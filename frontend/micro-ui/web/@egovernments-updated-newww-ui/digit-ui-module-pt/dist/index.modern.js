import { TickMark, LabelFieldPair, CardLabel, TextInput, CardLabelError, FormStep, CitizenInfoLabel, RadioButtons, CardLabelDesc, Dropdown, UploadFile, Card, CardHeader, CardText, CardSubHeader, Loader, SubmitBar, RadioOrSelect, TelePhone, DisplayPhotos, CardSectionHeader, CheckPoint, ConnectingCheckPoints, ActionLinks, LocationSearchCard, TextArea, CheckBox, MobileNumber, LinkButton, DeleteIcon, Toast, Header, Localities, KeyNote, AppContainer, BackButton, PrivateRoute, InfoBannerIcon, FormComposer, ResponseComposer, Modal, StatusTable, Row, Banner, SearchForm, SearchField, ButtonSelector, DetailsCard, Table, PopUp, MultiLink, EditIcon, CardCaption, DatePicker, CloseSvg, PropertyHouse, Label, LinkLabel, ActionBar, SearchAction, FilterAction, ShippingTruck, BreadCrumb, EmployeeModuleCard, RemoveableTag, PDFSvg as PDFSvg$1, MultiUploadWrapper, Close as Close$8, BreakLine, Menu, OTPInput, Rating, CitizenHomeCard, PTIcon } from '@egovernments/digit-ui-react-components';
import React, { useState, useEffect, Fragment as Fragment$1, useMemo, memo, useCallback, useLayoutEffect, useRef, useReducer } from 'react';
import { useTranslation } from 'react-i18next';
import { useLocation, Link, useRouteMatch, Switch, Route, useHistory, useParams, Redirect } from 'react-router-dom';
import { useForm, Controller } from 'react-hook-form';
import { useQueryClient } from 'react-query';

let actions = [];
const getAction = flow => {
  switch (flow) {
    case "STAKEHOLDER":
      actions = [];
      break;
    case "PT_MUTATE":
      actions = ["PT_OWNERSHIP_INFO_SUB_HEADER", "PT_MUTATION_DETAILS", "CE_DOCUMENT_DETAILS", "PT_COMMON_SUMMARY"];
      break;
    default:
      actions = ["ES_NEW_APPLICATION_PROPERTY_DETAILS", "PT_OWNERSHIP_INFO_SUB_HEADER", "CE_DOCUMENT_DETAILS", "PT_COMMON_SUMMARY"];
  }
};
const Timeline$1 = ({
  currentStep: _currentStep = 1,
  flow: _flow = ""
}) => {
  const {
    t
  } = useTranslation();
  const isMobile = window.Digit.Utils.browser.isMobile();
  getAction(_flow);
  return /*#__PURE__*/React.createElement("div", {
    className: "timeline-container",
    style: isMobile ? {} : {
      maxWidth: "960px",
      minWidth: "640px",
      marginRight: "auto"
    }
  }, actions.map((action, index, arr) => /*#__PURE__*/React.createElement("div", {
    className: "timeline-checkpoint",
    key: index
  }, /*#__PURE__*/React.createElement("div", {
    className: "timeline-content"
  }, /*#__PURE__*/React.createElement("span", {
    className: `circle ${index <= _currentStep - 1 && "active"}`
  }, index < _currentStep - 1 ? /*#__PURE__*/React.createElement(TickMark, null) : index + 1), /*#__PURE__*/React.createElement("span", {
    className: "secondary-color"
  }, t(action))), index < arr.length - 1 && /*#__PURE__*/React.createElement("span", {
    className: `line ${index < _currentStep - 1 && "active"}`
  }))));
};

const Area = ({
  t,
  config,
  onSelect,
  value,
  userType,
  formData,
  setError: setFormError,
  clearErrors: clearFormErrors,
  formState,
  onBlur
}) => {
  let index = window.location.href.split("/").pop();
  let validation = {};
  const onSkip = () => onSelect();
  let floorarea;
  let setfloorarea;
  if (!isNaN(index)) {
    [floorarea, setfloorarea] = useState(formData.units && formData.units[index] && formData.units[index].floorarea);
  } else {
    var _formData$landarea;
    [floorarea, setfloorarea] = useState((_formData$landarea = formData.landarea) === null || _formData$landarea === void 0 ? void 0 : _formData$landarea.floorarea);
  }
  const [error, setError] = useState(null);
  const [unitareaerror, setunitareaerror] = useState(null);
  const [areanotzeroerror, setareanotzeroerror] = useState(null);
  const {
    pathname
  } = useLocation();
  const presentInModifyApplication = pathname.includes("modify");
  function setPropertyfloorarea(e) {
    var _formData$PropertyTyp, _formData$units$index, _formData$PropertyTyp2, _formData$floordetail;
    setfloorarea(e.target.value);
    setunitareaerror(null);
    setareanotzeroerror(null);
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.code) === "BUILTUP.INDEPENDENTPROPERTY" && parseInt(formData === null || formData === void 0 ? void 0 : (_formData$units$index = formData.units[index]) === null || _formData$units$index === void 0 ? void 0 : _formData$units$index.builtUpArea) < e.target.value) {
      setunitareaerror("PT_TOTUNITAREA_LESS_THAN_BUILTUP_ERR_MSG");
    }
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp2 = formData.PropertyType) === null || _formData$PropertyTyp2 === void 0 ? void 0 : _formData$PropertyTyp2.code) === "BUILTUP.SHAREDPROPERTY" && parseInt(formData === null || formData === void 0 ? void 0 : (_formData$floordetail = formData.floordetails) === null || _formData$floordetail === void 0 ? void 0 : _formData$floordetail.builtUpArea) < e.target.value) {
      setunitareaerror("PT_SELFOCCUPIED_AREA_LESS_THAN_BUILTUP");
    }
    if (parseInt(e.target.value) == 0) {
      setareanotzeroerror("PT_AREA_NOT_0_MSG");
    }
  }
  const goNext = () => {
    if (!isNaN(index)) {
      var _formData$isResdentia, _formData$usageCatego, _formData$PropertyTyp3;
      let unit = formData.units && formData.units[index];
      if (((formData === null || formData === void 0 ? void 0 : (_formData$isResdentia = formData.isResdential) === null || _formData$isResdentia === void 0 ? void 0 : _formData$isResdentia.i18nKey) === "PT_COMMON_YES" || (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego = formData.usageCategoryMajor) === null || _formData$usageCatego === void 0 ? void 0 : _formData$usageCatego.i18nKey) == "PROPERTYTAX_BILLING_SLAB_NONRESIDENTIAL") && (formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp3 = formData.PropertyType) === null || _formData$PropertyTyp3 === void 0 ? void 0 : _formData$PropertyTyp3.i18nKey) !== "COMMON_PROPTYPE_VACANT") {
        sessionStorage.setItem("area", "yes");
      } else {
        sessionStorage.setItem("area", "no");
      }
      let floordet = {
        ...unit,
        floorarea
      };
      onSelect(config.key, floordet, false, index);
    } else {
      var _formData$isResdentia2, _formData$usageCatego2, _formData$PropertyTyp4, _formData$PropertyTyp5;
      if (((formData === null || formData === void 0 ? void 0 : (_formData$isResdentia2 = formData.isResdential) === null || _formData$isResdentia2 === void 0 ? void 0 : _formData$isResdentia2.i18nKey) === "PT_COMMON_YES" || (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego2 = formData.usageCategoryMajor) === null || _formData$usageCatego2 === void 0 ? void 0 : _formData$usageCatego2.i18nKey) == "PROPERTYTAX_BILLING_SLAB_NONRESIDENTIAL") && (formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp4 = formData.PropertyType) === null || _formData$PropertyTyp4 === void 0 ? void 0 : _formData$PropertyTyp4.i18nKey) !== "COMMON_PROPTYPE_VACANT") {
        sessionStorage.setItem("area", "yes");
      } else if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp5 = formData.PropertyType) === null || _formData$PropertyTyp5 === void 0 ? void 0 : _formData$PropertyTyp5.code) === "VACANT") {
        sessionStorage.setItem("area", "vacant");
      } else {
        sessionStorage.setItem("area", "no");
      }
      onSelect("landarea", {
        floorarea
      });
    }
  };
  function onChange(e) {
    if (e.target.value.length > 1024) {
      setError("CS_COMMON_LANDMARK_MAX_LENGTH");
    } else {
      setError(null);
      setfloorarea(e.target.value);
    }
  }
  useEffect(() => {
    if (userType === "employee") {
      if (!Number(floorarea)) setFormError(config.key, {
        type: "required",
        message: t("CORE_COMMON_REQUIRED_ERRMSG")
      });else if (isNaN(floorarea)) setFormError(config.key, {
        type: "invalid",
        message: t("ERR_DEFAULT_INPUT_FIELD_MSG")
      });else clearFormErrors(config.key);
      onSelect(config.key, floorarea);
    }
  }, [floorarea]);
  useEffect(() => {
    if (presentInModifyApplication && userType === "employee") {
      var _formData$originalDat;
      setfloorarea(formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : _formData$originalDat.landArea);
    }
  }, []);
  const inputs = [{
    label: "PT_PLOT_SIZE_SQUARE_FEET_LABEL",
    type: "text",
    name: "area",
    validation: {}
  }];
  if (userType === "employee") {
    return inputs === null || inputs === void 0 ? void 0 : inputs.map((input, index) => {
      var _formState$errors, _formState$errors$con;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, {
        key: index
      }, /*#__PURE__*/React.createElement(CardLabel, {
        className: "card-label-smaller"
      }, t(input.label) + " *"), /*#__PURE__*/React.createElement("div", {
        className: "field"
      }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
        key: input.name,
        id: input.name,
        value: floorarea,
        onChange: onChange
      }, input.validation, {
        onBlur: onBlur
      })))), formState.touched[config.key] ? /*#__PURE__*/React.createElement(CardLabelError, {
        style: {
          width: "70%",
          marginLeft: "30%",
          fontSize: "12px",
          marginTop: "-21px"
        }
      }, (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$con = _formState$errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.message) : null);
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onChange: onChange,
    forcedError: t(unitareaerror) || t(areanotzeroerror),
    onSelect: goNext,
    onSkip: onSkip,
    t: t,
    isDisabled: unitareaerror || areanotzeroerror || !floorarea,
    showErrorBelowChildren: true
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_PLOT_SIZE_SQUARE_FEET_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "number",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "floorarea",
    value: floorarea,
    onChange: setPropertyfloorarea
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_PLOT_SIZE_ERROR_MESSAGE")
  }))));
};

const Area$1 = ({
  t,
  config,
  onSelect,
  value,
  userType,
  formData,
  setError: setFormError,
  clearErrors: clearFormErrors,
  formState,
  onBlur
}) => {
  var _formData$landArea;
  let validation = {};
  const onSkip = () => onSelect();
  const [floorarea, setfloorarea] = useState((_formData$landArea = formData.landArea) === null || _formData$landArea === void 0 ? void 0 : _formData$landArea.floorarea);
  const [unitareaerror, setunitareaerror] = useState(null);
  function setPropertyfloorarea(e) {
    setfloorarea(e.target.value);
  }
  const goNext = () => {
    onSelect("landArea", {
      floorarea
    });
  };
  function onChange(e) {
    if (e.target.value.length > 1024) {
      setunitareaerror("CS_COMMON_LANDMARK_MAX_LENGTH");
    } else {
      setunitareaerror(null);
      setfloorarea(e.target.value);
    }
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onChange: onChange,
    forcedError: t(unitareaerror),
    onSelect: goNext,
    onSkip: onSkip,
    t: t,
    isDisabled: unitareaerror || !floorarea,
    showErrorBelowChildren: true
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_PLOT_SIZE_SQUARE_FEET_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "number",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "floorarea",
    value: floorarea,
    onChange: setPropertyfloorarea
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_PLOT_SIZE_ERROR_MESSAGE")
  }))));
};

const GroundFloorDetails = ({
  t,
  config,
  onSelect,
  value,
  userType,
  formData
}) => {
  let index = window.location.href.split("/").pop();
  let validation = {};
  const onSkip = () => onSelect();
  let plotSize, builtUpArea, setplotSize, setbuiltUpArea;
  if (!isNaN(index)) {
    [plotSize, setplotSize] = useState(formData.units && formData.units[index] && formData.units[index].plotSize);
    [builtUpArea, setbuiltUpArea] = useState(formData.units && formData.units[index] && formData.units[index].builtUpArea);
  } else {
    var _formData$floordetail, _formData$floordetail2;
    [plotSize, setplotSize] = useState((_formData$floordetail = formData.floordetails) === null || _formData$floordetail === void 0 ? void 0 : _formData$floordetail.plotSize);
    [builtUpArea, setbuiltUpArea] = useState((_formData$floordetail2 = formData.floordetails) === null || _formData$floordetail2 === void 0 ? void 0 : _formData$floordetail2.builtUpArea);
  }
  const [builtupplotsizeeroor, setbuiltupplotsizeeroor] = useState(null);
  const [areanotzeroerror, setareanotzeroerror] = useState(null);
  function setPropertyplotSize(e) {
    setplotSize(e.target.value);
    setbuiltupplotsizeeroor(null);
    setareanotzeroerror(null);
    if (e.target.value && parseInt(builtUpArea) > parseInt(e.target.value)) {
      setbuiltupplotsizeeroor("PT_BUILTUPAREA_PLOTSIZE_ERROR_MSG");
    }
    if (parseInt(e.target.value) == 0) {
      setareanotzeroerror("PT_AREA_NOT_0_MSG");
    }
  }
  function setPropertybuiltUpArea(e) {
    var _formData$PropertyTyp;
    setbuiltUpArea(e.target.value);
    setbuiltupplotsizeeroor(null);
    setareanotzeroerror(null);
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.i18nKey) === "COMMON_PROPTYPE_BUILTUP_INDEPENDENTPROPERTY" && index != "0") {
      var _formData$units$, _formData$units$2;
      if (formData !== null && formData !== void 0 && (_formData$units$ = formData.units[0]) !== null && _formData$units$ !== void 0 && _formData$units$.plotSize && parseInt(e.target.value) > parseInt(formData === null || formData === void 0 ? void 0 : (_formData$units$2 = formData.units[0]) === null || _formData$units$2 === void 0 ? void 0 : _formData$units$2.plotSize)) {
        setbuiltupplotsizeeroor("PT_BUILTUPAREA_PLOTSIZE_ERROR_MSG");
      }
    } else {
      if (plotSize && parseInt(e.target.value) > parseInt(plotSize)) {
        setbuiltupplotsizeeroor("PT_BUILTUPAREA_PLOTSIZE_ERROR_MSG");
      }
    }
    if (parseInt(e.target.value) == 0) {
      setareanotzeroerror("PT_AREA_NOT_0_MSG");
    }
  }
  const getheader = () => {
    var _formData$PropertyTyp2;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp2 = formData.PropertyType) === null || _formData$PropertyTyp2 === void 0 ? void 0 : _formData$PropertyTyp2.i18nKey) === "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY") {
      return "PT_FLOOR_DETAILS_HEADER";
    } else {
      return `PROPERTYTAX_FLOOR_${index}_DETAILS`;
    }
  };
  const goNext = () => {
    if (!isNaN(index)) {
      let unit = formData.units && formData.units[index] || null;
      if (unit !== null) {
        unit["builtUpArea"] = builtUpArea;
        unit["plotSize"] = plotSize;
        onSelect(config.key, unit, "", index);
      } else {
        let floordet = {
          plotSize,
          builtUpArea
        };
        sessionStorage.setItem("propertyArea", "multiple");
        onSelect(config.key, floordet, "", index);
      }
    } else {
      sessionStorage.setItem("propertyArea", "multiple");
      onSelect("floordetails", {
        plotSize,
        builtUpArea
      });
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormStep, {
    config: (config.texts.header = getheader(), config),
    header: "ground",
    onSelect: goNext,
    onSkip: onSkip,
    t: t,
    forcedError: t(builtupplotsizeeroor) || t(areanotzeroerror),
    isDisabled: builtupplotsizeeroor || areanotzeroerror || !builtUpArea && (!plotSize || !builtUpArea),
    showErrorBelowChildren: true
  }, (index === "0" || isNaN(index)) && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FLOOR_DETAILS_PLOT_SIZE_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "number",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "PlotSize",
    value: plotSize,
    onChange: setPropertyplotSize
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_PLOT_SIZE_ERROR_MESSAGE")
  }))), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FLOOR_DETAILS_BUILT_UP_AREA_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "number",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "BuiltUpArea",
    value: builtUpArea,
    onChange: setPropertybuiltUpArea
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_BUILT_AREA_ERROR_MESSAGE")
  }))), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_FLOOR_AREA_INFO_MSG")
  }));
};

const IsAnyPartOfThisFloorUnOccupied = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  let index = window.location.href.split("/").pop();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  let IsAnyPartOfThisFloorUnOccupied, setSelfOccupied;
  if (!isNaN(index)) {
    [IsAnyPartOfThisFloorUnOccupied, setSelfOccupied] = useState(formData.units && formData.units[index] && formData.units[index].IsAnyPartOfThisFloorUnOccupied);
  } else {
    [IsAnyPartOfThisFloorUnOccupied, setSelfOccupied] = useState(formData === null || formData === void 0 ? void 0 : formData.IsAnyPartOfThisFloorUnOccupied);
  }
  const data = [{
    i18nKey: "PT_COMMON_YES",
    code: "UNOCCUPIED"
  }, {
    i18nKey: "PT_COMMON_NO",
    code: "UNOCCUPIED"
  }];
  const onSkip = () => onSelect();
  function selectSelfOccupied(value) {
    setSelfOccupied(value);
  }
  const getheaderCaption = () => {
    var _formData$PropertyTyp;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.i18nKey) === "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY") {
      return "PT_FLOOR_DETAILS_HEADER";
    } else {
      return `PROPERTYTAX_FLOOR_${index}_DETAILS`;
    }
  };
  function goNext() {
    let index = window.location.href.split("/").pop();
    if (!isNaN(index)) {
      sessionStorage.setItem("IsAnyPartOfThisFloorUnOccupied", IsAnyPartOfThisFloorUnOccupied.i18nKey);
      let unit = formData.units && formData.units[index];
      let floordet = {
        ...unit,
        IsAnyPartOfThisFloorUnOccupied
      };
      onSelect(config.key, floordet, false, index);
      if (IsAnyPartOfThisFloorUnOccupied.i18nKey === "PT_COMMON_NO") {
        var _formData$noOfFloors, _formData$noOfFloors2, _formData$noOofBaseme, _formData$noOofBaseme2, _formData$noOofBaseme3;
        if ((formData === null || formData === void 0 ? void 0 : (_formData$noOfFloors = formData.noOfFloors) === null || _formData$noOfFloors === void 0 ? void 0 : _formData$noOfFloors.i18nKey) === "PT_GROUND_PLUS_ONE_OPTION" && index < 1 && index > -1) {
          let newIndex1 = parseInt(index) + 1;
          onSelect("floordetails", {}, true, newIndex1, true);
        } else if ((formData === null || formData === void 0 ? void 0 : (_formData$noOfFloors2 = formData.noOfFloors) === null || _formData$noOfFloors2 === void 0 ? void 0 : _formData$noOfFloors2.i18nKey) === "PT_GROUND_PLUS_TWO_OPTION" && index < 2 && index > -1) {
          let newIndex2 = parseInt(index) + 1;
          onSelect("floordetails", {}, true, newIndex2, true);
        } else if (((formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme = formData.noOofBasements) === null || _formData$noOofBaseme === void 0 ? void 0 : _formData$noOofBaseme.i18nKey) === "PT_ONE_BASEMENT_OPTION" || (formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme2 = formData.noOofBasements) === null || _formData$noOofBaseme2 === void 0 ? void 0 : _formData$noOofBaseme2.i18nKey) === "PT_TWO_BASEMENT_OPTION") && index > -1) {
          onSelect("floordetails", {}, true, "-1", true);
        } else if ((formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme3 = formData.noOofBasements) === null || _formData$noOofBaseme3 === void 0 ? void 0 : _formData$noOofBaseme3.i18nKey) === "PT_TWO_BASEMENT_OPTION" && index != -2) {
          onSelect("floordetails", {}, true, "-2", true);
        }
      }
    } else {
      sessionStorage.setItem("IsAnyPartOfThisFloorUnOccupied", IsAnyPartOfThisFloorUnOccupied.i18nKey);
      onSelect("IsAnyPartOfThisFloorUnOccupied", IsAnyPartOfThisFloorUnOccupied);
    }
  }
  return /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: (config.texts.headerCaption = getheaderCaption(), config),
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !IsAnyPartOfThisFloorUnOccupied
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: data,
    selectedOption: IsAnyPartOfThisFloorUnOccupied,
    onSelect: selectSelfOccupied
  }));
};

const IsResidential = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  const [isResdential, setisResdential] = useState(formData === null || formData === void 0 ? void 0 : formData.isResdential);
  const menu = [{
    i18nKey: "PT_COMMON_YES",
    code: "RESIDENTIAL"
  }, {
    i18nKey: "PT_COMMON_NO",
    code: "NONRESIDENTIAL"
  }];
  const onSkip = () => onSelect();
  function selectisResdential(value) {
    setisResdential(value);
  }
  function goNext() {
    if (isResdential.i18nKey === "PT_COMMON_NO") {
      sessionStorage.setItem("isResdential", isResdential.i18nKey);
      onSelect(config.key, isResdential);
    } else {
      sessionStorage.setItem("isResdential", isResdential.i18nKey);
      onSelect(config.key, isResdential);
    }
  }
  return /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !isResdential
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: menu,
    selectedOption: isResdential,
    onSelect: selectisResdential
  }));
};

const IsThisFloorSelfOccupied = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  let index = window.location.href.split("/").pop();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  let selfOccupied, setSelfOccupied;
  if (!isNaN(index)) {
    [selfOccupied, setSelfOccupied] = useState(formData.units && formData.units[index] && formData.units[index].selfOccupied);
  } else {
    [selfOccupied, setSelfOccupied] = useState(formData === null || formData === void 0 ? void 0 : formData.selfOccupied);
  }
  const data = [{
    i18nKey: "PT_FULLY_RENTED_OUT",
    code: "RENTED"
  }, {
    i18nKey: "PT_PARTIALLY_RENTED_OUT",
    code: "RENTED"
  }, {
    i18nKey: "PT_YES_IT_IS_SELFOCCUPIED",
    code: "SELFOCCUPIED"
  }];
  const onSkip = () => onSelect();
  function selectSelfOccupied(value) {
    setSelfOccupied(value);
  }
  function goNext() {
    var _formData$isResdentia, _formData$usageCatego;
    let index = window.location.href.split("/").pop();
    if ((formData === null || formData === void 0 ? void 0 : (_formData$isResdentia = formData.isResdential) === null || _formData$isResdentia === void 0 ? void 0 : _formData$isResdentia.i18nKey) === "PT_COMMON_YES" || (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego = formData.usageCategoryMajor) === null || _formData$usageCatego === void 0 ? void 0 : _formData$usageCatego.i18nKey) == "PROPERTYTAX_BILLING_SLAB_NONRESIDENTIAL") {
      let temp = selfOccupied.i18nKey + "1";
      sessionStorage.setItem("IsThisFloorSelfOccupied", temp);
    } else {
      sessionStorage.setItem("IsThisFloorSelfOccupied", selfOccupied.i18nKey);
    }
    if (!isNaN(index)) {
      let unit = formData.units && formData.units[index];
      let floordet = {
        ...unit,
        selfOccupied
      };
      onSelect(config.key, floordet, false, index);
    } else {
      onSelect("selfOccupied", selfOccupied);
    }
  }
  return /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !selfOccupied
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: data,
    selectedOption: selfOccupied,
    onSelect: selectSelfOccupied
  }));
};

const checkForNotNull = (value = "") => {
  return value && value != null && value != undefined && value != "" ? true : false;
};
const convertDotValues = (value = "") => {
  return checkForNotNull(value) && (value.replaceAll && value.replaceAll(".", "_") || value.replace && stringReplaceAll(value, ".", "_")) || "NA";
};
const convertToLocale = (value = "", key = "") => {
  let convertedValue = convertDotValues(value);
  if (convertedValue == "NA") {
    return "PT_NA";
  }
  return `${key}_${convertedValue}`;
};
const getPropertyTypeLocale = (value = "") => {
  return convertToLocale(value, "COMMON_PROPTYPE");
};
const getPropertySubUsageTypeLocale = (value = "") => {
  return convertToLocale(value, "COMMON_PROPSUBUSGTYPE");
};
const getPropertyOccupancyTypeLocale = (value = "") => {
  return convertToLocale(value, "PROPERTYTAX_OCCUPANCYTYPE");
};
const getMohallaLocale = (value = "", tenantId = "") => {
  let convertedValue = convertDotValues(tenantId);
  if (convertedValue == "NA" || !checkForNotNull(value)) {
    return "PT_NA";
  }
  convertedValue = convertedValue.toUpperCase();
  return convertToLocale(value, `${convertedValue}_REVENUE`);
};
const getCityLocale = (value = "") => {
  let convertedValue = convertDotValues(value);
  if (convertedValue == "NA" || !checkForNotNull(value)) {
    return "PT_NA";
  }
  convertedValue = convertedValue.toUpperCase();
  return convertToLocale(convertedValue, `TENANT_TENANTS`);
};
const getPropertyOwnerTypeLocale = (value = "") => {
  return convertToLocale(value, "PROPERTYTAX_OWNERTYPE");
};
const getFixedFilename = (filename = "", size = 5) => {
  if (filename.length <= size) {
    return filename;
  }
  return `${filename.substr(0, size)}...`;
};
const shouldHideBackButton = (config = []) => {
  return config.filter(key => window.location.href.includes(key.screenPath)).length > 0 ? true : false;
};
const cardBodyStyle = {};
const setAddressDetails = data => {
  var _address$city, _address$locality, _address$locality2;
  let {
    address
  } = data;
  let propAddress = {
    ...address,
    pincode: address === null || address === void 0 ? void 0 : address.pincode,
    landmark: address === null || address === void 0 ? void 0 : address.landmark,
    city: address === null || address === void 0 ? void 0 : (_address$city = address.city) === null || _address$city === void 0 ? void 0 : _address$city.name,
    doorNo: address === null || address === void 0 ? void 0 : address.doorNo,
    street: address === null || address === void 0 ? void 0 : address.street,
    locality: {
      code: (address === null || address === void 0 ? void 0 : (_address$locality = address.locality) === null || _address$locality === void 0 ? void 0 : _address$locality.code) || "NA",
      area: address === null || address === void 0 ? void 0 : (_address$locality2 = address.locality) === null || _address$locality2 === void 0 ? void 0 : _address$locality2.name
    }
  };
  data.address = propAddress;
  return data;
};
const setOwnerDetails = data => {
  const {
    address,
    owners
  } = data;
  let institution = {},
    owner = [];
  if (owners && owners.length > 0) {
    var _data$ownershipCatego, _data$ownershipCatego2;
    if ((data === null || data === void 0 ? void 0 : (_data$ownershipCatego = data.ownershipCategory) === null || _data$ownershipCatego === void 0 ? void 0 : _data$ownershipCatego.value) === "INSTITUTIONALPRIVATE" || (data === null || data === void 0 ? void 0 : (_data$ownershipCatego2 = data.ownershipCategory) === null || _data$ownershipCatego2 === void 0 ? void 0 : _data$ownershipCatego2.value) === "INSTITUTIONALGOVERNMENT") {
      var _owners$, _owners$2, _owners$3, _address$city2, _owners$4, _owners$4$inistitutet, _owners$5, _owners$5$documents$p, _owners$8, _owners$9, _owners$10, _owners$11, _owners$12, _owners$13, _owners$14, _owners$15, _owners$15$ownerType;
      institution.designation = (_owners$ = owners[0]) === null || _owners$ === void 0 ? void 0 : _owners$.designation;
      institution.name = (_owners$2 = owners[0]) === null || _owners$2 === void 0 ? void 0 : _owners$2.inistitutionName;
      institution.nameOfAuthorizedPerson = (_owners$3 = owners[0]) === null || _owners$3 === void 0 ? void 0 : _owners$3.name;
      institution.tenantId = address === null || address === void 0 ? void 0 : (_address$city2 = address.city) === null || _address$city2 === void 0 ? void 0 : _address$city2.code;
      institution.type = (_owners$4 = owners[0]) === null || _owners$4 === void 0 ? void 0 : (_owners$4$inistitutet = _owners$4.inistitutetype) === null || _owners$4$inistitutet === void 0 ? void 0 : _owners$4$inistitutet.value;
      let document = [];
      if ((_owners$5 = owners[0]) !== null && _owners$5 !== void 0 && (_owners$5$documents$p = _owners$5.documents["proofIdentity"]) !== null && _owners$5$documents$p !== void 0 && _owners$5$documents$p.fileStoreId) {
        var _owners$6, _owners$6$documents$p, _owners$7, _owners$7$documents$p, _owners$7$documents$p2;
        document.push({
          fileStoreId: ((_owners$6 = owners[0]) === null || _owners$6 === void 0 ? void 0 : (_owners$6$documents$p = _owners$6.documents["proofIdentity"]) === null || _owners$6$documents$p === void 0 ? void 0 : _owners$6$documents$p.fileStoreId) || "",
          documentType: ((_owners$7 = owners[0]) === null || _owners$7 === void 0 ? void 0 : (_owners$7$documents$p = _owners$7.documents["proofIdentity"]) === null || _owners$7$documents$p === void 0 ? void 0 : (_owners$7$documents$p2 = _owners$7$documents$p.documentType) === null || _owners$7$documents$p2 === void 0 ? void 0 : _owners$7$documents$p2.code) || ""
        });
      }
      owner.push({
        altContactNumber: (_owners$8 = owners[0]) === null || _owners$8 === void 0 ? void 0 : _owners$8.altContactNumber,
        correspondenceAddress: (_owners$9 = owners[0]) === null || _owners$9 === void 0 ? void 0 : _owners$9.permanentAddress,
        designation: (_owners$10 = owners[0]) === null || _owners$10 === void 0 ? void 0 : _owners$10.designation,
        emailId: (_owners$11 = owners[0]) === null || _owners$11 === void 0 ? void 0 : _owners$11.emailId,
        isCorrespondenceAddress: (_owners$12 = owners[0]) === null || _owners$12 === void 0 ? void 0 : _owners$12.isCorrespondenceAddress,
        mobileNumber: (_owners$13 = owners[0]) === null || _owners$13 === void 0 ? void 0 : _owners$13.mobileNumber,
        name: (_owners$14 = owners[0]) === null || _owners$14 === void 0 ? void 0 : _owners$14.name,
        ownerType: ((_owners$15 = owners[0]) === null || _owners$15 === void 0 ? void 0 : (_owners$15$ownerType = _owners$15.ownerType) === null || _owners$15$ownerType === void 0 ? void 0 : _owners$15$ownerType.code) || "NONE",
        documents: document
      });
      data.institution = institution;
      data.owners = owner;
    } else {
      owners.map(ownr => {
        var _ownr$ownerType, _ownr$documents$proof, _ownr$gender, _ownr$ownerType2, _ownr$relationship;
        let document = [];
        if ((ownr === null || ownr === void 0 ? void 0 : (_ownr$ownerType = ownr.ownerType) === null || _ownr$ownerType === void 0 ? void 0 : _ownr$ownerType.code) != "NONE") {
          var _ownr$documents$speci, _ownr$documents$speci2, _ownr$documents$speci3;
          document.push({
            fileStoreId: (ownr === null || ownr === void 0 ? void 0 : (_ownr$documents$speci = ownr.documents["specialProofIdentity"]) === null || _ownr$documents$speci === void 0 ? void 0 : _ownr$documents$speci.fileStoreId) || "",
            documentType: (ownr === null || ownr === void 0 ? void 0 : (_ownr$documents$speci2 = ownr.documents["specialProofIdentity"]) === null || _ownr$documents$speci2 === void 0 ? void 0 : (_ownr$documents$speci3 = _ownr$documents$speci2.documentType) === null || _ownr$documents$speci3 === void 0 ? void 0 : _ownr$documents$speci3.code) || ""
          });
        }
        if (ownr !== null && ownr !== void 0 && (_ownr$documents$proof = ownr.documents["proofIdentity"]) !== null && _ownr$documents$proof !== void 0 && _ownr$documents$proof.fileStoreId) {
          var _ownr$documents$proof2, _ownr$documents$proof3, _ownr$documents$proof4;
          document.push({
            fileStoreId: (ownr === null || ownr === void 0 ? void 0 : (_ownr$documents$proof2 = ownr.documents["proofIdentity"]) === null || _ownr$documents$proof2 === void 0 ? void 0 : _ownr$documents$proof2.fileStoreId) || "",
            documentType: (ownr === null || ownr === void 0 ? void 0 : (_ownr$documents$proof3 = ownr.documents["proofIdentity"]) === null || _ownr$documents$proof3 === void 0 ? void 0 : (_ownr$documents$proof4 = _ownr$documents$proof3.documentType) === null || _ownr$documents$proof4 === void 0 ? void 0 : _ownr$documents$proof4.code) || ""
          });
        }
        owner.push({
          emailId: ownr === null || ownr === void 0 ? void 0 : ownr.emailId,
          fatherOrHusbandName: ownr === null || ownr === void 0 ? void 0 : ownr.fatherOrHusbandName,
          gender: ownr === null || ownr === void 0 ? void 0 : (_ownr$gender = ownr.gender) === null || _ownr$gender === void 0 ? void 0 : _ownr$gender.value,
          isCorrespondenceAddress: ownr === null || ownr === void 0 ? void 0 : ownr.isCorrespondenceAddress,
          mobileNumber: ownr === null || ownr === void 0 ? void 0 : ownr.mobileNumber,
          name: ownr === null || ownr === void 0 ? void 0 : ownr.name,
          ownerType: (ownr === null || ownr === void 0 ? void 0 : (_ownr$ownerType2 = ownr.ownerType) === null || _ownr$ownerType2 === void 0 ? void 0 : _ownr$ownerType2.code) || "NONE",
          permanentAddress: ownr === null || ownr === void 0 ? void 0 : ownr.permanentAddress,
          relationship: ownr === null || ownr === void 0 ? void 0 : (_ownr$relationship = ownr.relationship) === null || _ownr$relationship === void 0 ? void 0 : _ownr$relationship.code,
          documents: document
        });
      });
      data.owners = owner;
    }
  }
  return data;
};
const setDocumentDetails = data => {
  var _address$documents$Pr;
  const {
    address,
    owners
  } = data;
  let documents = [];
  if (address !== null && address !== void 0 && (_address$documents$Pr = address.documents["ProofOfAddress"]) !== null && _address$documents$Pr !== void 0 && _address$documents$Pr.id) {
    var _address$documents$Pr2, _address$documents$Pr3, _address$documents$Pr4, _address$documents$Pr5, _address$documents$Pr6;
    documents.push({
      fileStoreId: (address === null || address === void 0 ? void 0 : (_address$documents$Pr2 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr2 === void 0 ? void 0 : _address$documents$Pr2.fileStoreId) || "",
      documentType: (address === null || address === void 0 ? void 0 : (_address$documents$Pr3 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr3 === void 0 ? void 0 : (_address$documents$Pr4 = _address$documents$Pr3.documentType) === null || _address$documents$Pr4 === void 0 ? void 0 : _address$documents$Pr4.code) || "",
      id: (address === null || address === void 0 ? void 0 : (_address$documents$Pr5 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr5 === void 0 ? void 0 : _address$documents$Pr5.id) || "",
      status: (address === null || address === void 0 ? void 0 : (_address$documents$Pr6 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr6 === void 0 ? void 0 : _address$documents$Pr6.status) || ""
    });
  } else {
    var _address$documents$Pr7, _address$documents$Pr8, _address$documents$Pr9;
    documents.push({
      fileStoreId: (address === null || address === void 0 ? void 0 : (_address$documents$Pr7 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr7 === void 0 ? void 0 : _address$documents$Pr7.fileStoreId) || "",
      documentType: (address === null || address === void 0 ? void 0 : (_address$documents$Pr8 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr8 === void 0 ? void 0 : (_address$documents$Pr9 = _address$documents$Pr8.documentType) === null || _address$documents$Pr9 === void 0 ? void 0 : _address$documents$Pr9.code) || ""
    });
  }
  owners && owners.length > 0 && owners.map(owner => {
    if (owner.documents && owner.documents["proofIdentity"]) {
      var _owner$documents$proo;
      if (owner !== null && owner !== void 0 && (_owner$documents$proo = owner.documents["proofIdentity"]) !== null && _owner$documents$proo !== void 0 && _owner$documents$proo.id) {
        var _owner$documents$proo2, _owner$documents$proo3, _owner$documents$proo4;
        documents.push({
          fileStoreId: (owner === null || owner === void 0 ? void 0 : owner.documents["proofIdentity"].fileStoreId) || "",
          documentType: (owner === null || owner === void 0 ? void 0 : (_owner$documents$proo2 = owner.documents["proofIdentity"].documentType) === null || _owner$documents$proo2 === void 0 ? void 0 : _owner$documents$proo2.code) || "",
          id: (owner === null || owner === void 0 ? void 0 : (_owner$documents$proo3 = owner.documents["proofIdentity"]) === null || _owner$documents$proo3 === void 0 ? void 0 : _owner$documents$proo3.id) || "",
          status: (owner === null || owner === void 0 ? void 0 : (_owner$documents$proo4 = owner.documents["proofIdentity"]) === null || _owner$documents$proo4 === void 0 ? void 0 : _owner$documents$proo4.status) || ""
        });
      } else {
        var _owner$documents$proo5;
        documents.push({
          fileStoreId: (owner === null || owner === void 0 ? void 0 : owner.documents["proofIdentity"].fileStoreId) || "",
          documentType: (owner === null || owner === void 0 ? void 0 : (_owner$documents$proo5 = owner.documents["proofIdentity"].documentType) === null || _owner$documents$proo5 === void 0 ? void 0 : _owner$documents$proo5.code) || ""
        });
      }
    }
    if (owner.documents && owner.documents["specialProofIdentity"]) {
      var _owner$documents$spec;
      if (owner !== null && owner !== void 0 && (_owner$documents$spec = owner.documents["specialProofIdentity"]) !== null && _owner$documents$spec !== void 0 && _owner$documents$spec.id) {
        var _owner$documents$spec2, _owner$documents$spec3, _owner$documents$spec4, _owner$documents$spec5, _owner$documents$spec6;
        documents.push({
          fileStoreId: (owner === null || owner === void 0 ? void 0 : (_owner$documents$spec2 = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec2 === void 0 ? void 0 : _owner$documents$spec2.fileStoreId) || "",
          documentType: (owner === null || owner === void 0 ? void 0 : (_owner$documents$spec3 = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec3 === void 0 ? void 0 : (_owner$documents$spec4 = _owner$documents$spec3.documentType) === null || _owner$documents$spec4 === void 0 ? void 0 : _owner$documents$spec4.code) || "",
          id: (owner === null || owner === void 0 ? void 0 : (_owner$documents$spec5 = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec5 === void 0 ? void 0 : _owner$documents$spec5.id) || "",
          status: (owner === null || owner === void 0 ? void 0 : (_owner$documents$spec6 = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec6 === void 0 ? void 0 : _owner$documents$spec6.status) || ""
        });
      } else {
        var _owner$documents$spec7, _owner$documents$spec8, _owner$documents$spec9;
        documents.push({
          fileStoreId: (owner === null || owner === void 0 ? void 0 : (_owner$documents$spec7 = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec7 === void 0 ? void 0 : _owner$documents$spec7.fileStoreId) || "",
          documentType: (owner === null || owner === void 0 ? void 0 : (_owner$documents$spec8 = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec8 === void 0 ? void 0 : (_owner$documents$spec9 = _owner$documents$spec8.documentType) === null || _owner$documents$spec9 === void 0 ? void 0 : _owner$documents$spec9.code) || ""
        });
      }
    }
  });
  data.documents = documents;
  return data;
};
const getUsageType = data => {
  var _data$isResdential;
  if ((data === null || data === void 0 ? void 0 : (_data$isResdential = data.isResdential) === null || _data$isResdential === void 0 ? void 0 : _data$isResdential.code) == "RESIDENTIAL") {
    var _data$isResdential2;
    return data === null || data === void 0 ? void 0 : (_data$isResdential2 = data.isResdential) === null || _data$isResdential2 === void 0 ? void 0 : _data$isResdential2.code;
  } else {
    var _data$usageCategoryMa;
    return data === null || data === void 0 ? void 0 : (_data$usageCategoryMa = data.usageCategoryMajor) === null || _data$usageCategoryMa === void 0 ? void 0 : _data$usageCategoryMa.code;
  }
};
const getSuperBuiltUpareafromob = data => {
  let builtuparea = 0;
  data === null || data === void 0 ? void 0 : data.units.map(unit => {
    var _unit$constructionDet;
    builtuparea = builtuparea + (unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea);
  });
  return builtuparea;
};
const setPropertyDetails = data => {
  var _data$PropertyType2, _data$PropertyType2$c, _data$PropertyType4, _data$PropertyType4$c, _data$PropertyType6, _data$PropertyType6$c;
  let propertyDetails = {};
  if (data !== null && data !== void 0 && (_data$PropertyType2 = data.PropertyType) !== null && _data$PropertyType2 !== void 0 && (_data$PropertyType2$c = _data$PropertyType2.code) !== null && _data$PropertyType2$c !== void 0 && _data$PropertyType2$c.includes("VACANT")) {
    var _data$landarea3, _data$PropertyType3;
    propertyDetails = {
      units: [],
      landArea: parseInt(data === null || data === void 0 ? void 0 : (_data$landarea3 = data.landarea) === null || _data$landarea3 === void 0 ? void 0 : _data$landarea3.floorarea),
      propertyType: data === null || data === void 0 ? void 0 : (_data$PropertyType3 = data.PropertyType) === null || _data$PropertyType3 === void 0 ? void 0 : _data$PropertyType3.code,
      noOfFloors: 0,
      usageCategory: getUsageType(data)
    };
  } else if (data !== null && data !== void 0 && (_data$PropertyType4 = data.PropertyType) !== null && _data$PropertyType4 !== void 0 && (_data$PropertyType4$c = _data$PropertyType4.code) !== null && _data$PropertyType4$c !== void 0 && _data$PropertyType4$c.includes("SHAREDPROPERTY")) {
    var _data$units2, _data$PropertyType5, _data$units3, _data$units4, _data$units4$;
    propertyDetails = {
      units: data === null || data === void 0 ? void 0 : data.units,
      landArea: data === null || data === void 0 ? void 0 : (_data$units2 = data.units) === null || _data$units2 === void 0 ? void 0 : _data$units2.reduce((acc, curr) => {
        var _curr$constructionDet;
        return Number(curr === null || curr === void 0 ? void 0 : (_curr$constructionDet = curr.constructionDetail) === null || _curr$constructionDet === void 0 ? void 0 : _curr$constructionDet.builtUpArea) + acc;
      }, 0),
      propertyType: data === null || data === void 0 ? void 0 : (_data$PropertyType5 = data.PropertyType) === null || _data$PropertyType5 === void 0 ? void 0 : _data$PropertyType5.code,
      noOfFloors: 1,
      superBuiltUpArea: data === null || data === void 0 ? void 0 : (_data$units3 = data.units) === null || _data$units3 === void 0 ? void 0 : _data$units3.reduce((acc, curr) => {
        var _curr$constructionDet2;
        return Number(curr === null || curr === void 0 ? void 0 : (_curr$constructionDet2 = curr.constructionDetail) === null || _curr$constructionDet2 === void 0 ? void 0 : _curr$constructionDet2.builtUpArea) + acc;
      }, 0),
      usageCategory: data === null || data === void 0 ? void 0 : (_data$units4 = data.units) === null || _data$units4 === void 0 ? void 0 : (_data$units4$ = _data$units4[0]) === null || _data$units4$ === void 0 ? void 0 : _data$units4$.usageCategory
    };
  } else if (data !== null && data !== void 0 && (_data$PropertyType6 = data.PropertyType) !== null && _data$PropertyType6 !== void 0 && (_data$PropertyType6$c = _data$PropertyType6.code) !== null && _data$PropertyType6$c !== void 0 && _data$PropertyType6$c.includes("INDEPENDENTPROPERTY")) {
    var _data$landArea, _data$PropertyType7, _data$noOfFloors, _data$units5, _data$units5$;
    propertyDetails = {
      units: data === null || data === void 0 ? void 0 : data.units,
      landArea: data === null || data === void 0 ? void 0 : (_data$landArea = data.landArea) === null || _data$landArea === void 0 ? void 0 : _data$landArea.floorarea,
      propertyType: data === null || data === void 0 ? void 0 : (_data$PropertyType7 = data.PropertyType) === null || _data$PropertyType7 === void 0 ? void 0 : _data$PropertyType7.code,
      noOfFloors: (data === null || data === void 0 ? void 0 : (_data$noOfFloors = data.noOfFloors) === null || _data$noOfFloors === void 0 ? void 0 : _data$noOfFloors.code) + 1,
      superBuiltUpArea: null,
      usageCategory: data === null || data === void 0 ? void 0 : (_data$units5 = data.units) === null || _data$units5 === void 0 ? void 0 : (_data$units5$ = _data$units5[0]) === null || _data$units5$ === void 0 ? void 0 : _data$units5$.usageCategory
    };
  } else {
    var _data$PropertyType8;
    propertyDetails = {
      units: [{
        occupancyType: "SELFOCCUPIED",
        floorNo: "0",
        constructionDetail: {
          builtUpArea: 16.67
        },
        tenantId: data.tenantId,
        usageCategory: "RESIDENTIAL"
      }],
      landArea: "2000",
      propertyType: data === null || data === void 0 ? void 0 : (_data$PropertyType8 = data.PropertyType) === null || _data$PropertyType8 === void 0 ? void 0 : _data$PropertyType8.code,
      noOfFloors: 1,
      superBuiltUpArea: 16.67,
      usageCategory: getUsageType(data)
    };
  }
  data.propertyDetails = propertyDetails;
  return data;
};
const convertToProperty = (data = {}) => {
  var _data, _data$floordetails4, _data2, _data3, _data4, _data5, _data6, _data7, _data8, _data9, _data10, _data11, _data11$ownershipCate;
  let isResdential = data.isResdential;
  let propertyType = data.PropertyType;
  let selfOccupied = data.selfOccupied;
  let Subusagetypeofrentedarea = data.Subusagetypeofrentedarea || null;
  let subusagetype = data.subusagetype || null;
  let IsAnyPartOfThisFloorUnOccupied = data.IsAnyPartOfThisFloorUnOccupied || null;
  let builtUpArea = ((_data = data) === null || _data === void 0 ? void 0 : (_data$floordetails4 = _data.floordetails) === null || _data$floordetails4 === void 0 ? void 0 : _data$floordetails4.builtUpArea) || null;
  let noOfFloors = (_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.noOfFloors;
  let noOofBasements = (_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.noOofBasements;
  let unit = (_data4 = data) === null || _data4 === void 0 ? void 0 : _data4.units;
  let basement1 = Array.isArray((_data5 = data) === null || _data5 === void 0 ? void 0 : _data5.units) && (_data6 = data) !== null && _data6 !== void 0 && _data6.units["-1"] ? (_data7 = data) === null || _data7 === void 0 ? void 0 : _data7.units["-1"] : null;
  let basement2 = Array.isArray((_data8 = data) === null || _data8 === void 0 ? void 0 : _data8.units) && (_data9 = data) !== null && _data9 !== void 0 && _data9.units["-2"] ? (_data10 = data) === null || _data10 === void 0 ? void 0 : _data10.units["-2"] : null;
  data = setDocumentDetails(data);
  data = setOwnerDetails(data);
  data = setAddressDetails(data);
  data = setPropertyDetails(data);
  const formdata = {
    Property: {
      tenantId: data.tenantId,
      address: data.address,
      ownershipCategory: (_data11 = data) === null || _data11 === void 0 ? void 0 : (_data11$ownershipCate = _data11.ownershipCategory) === null || _data11$ownershipCate === void 0 ? void 0 : _data11$ownershipCate.value,
      owners: data.owners,
      institution: data.institution || null,
      documents: data.documents || [],
      ...data.propertyDetails,
      additionalDetails: {
        inflammable: false,
        heightAbove36Feet: false,
        isResdential: isResdential,
        propertyType: propertyType,
        selfOccupied: selfOccupied,
        Subusagetypeofrentedarea: Subusagetypeofrentedarea,
        subusagetype: subusagetype,
        IsAnyPartOfThisFloorUnOccupied: IsAnyPartOfThisFloorUnOccupied,
        builtUpArea: builtUpArea,
        noOfFloors: noOfFloors,
        noOofBasements: noOofBasements,
        unit: unit,
        basement1: basement1,
        basement2: basement2
      },
      creationReason: getCreationReason(data),
      source: "MUNICIPAL_RECORDS",
      channel: "CITIZEN"
    }
  };
  return formdata;
};
const setUpdateOwnerDetails = (data = []) => {
  var _data$ownershipCatego3, _data$ownershipCatego4;
  const {
    institution,
    owners
  } = data;
  if ((data === null || data === void 0 ? void 0 : (_data$ownershipCatego3 = data.ownershipCategory) === null || _data$ownershipCatego3 === void 0 ? void 0 : _data$ownershipCatego3.value) === "INSTITUTIONALPRIVATE" || (data === null || data === void 0 ? void 0 : (_data$ownershipCatego4 = data.ownershipCategory) === null || _data$ownershipCatego4 === void 0 ? void 0 : _data$ownershipCatego4.value) === "INSTITUTIONALGOVERNMENT") {
    var _data$ownershipCatego5, _data$ownershipCatego6;
    if ((data === null || data === void 0 ? void 0 : (_data$ownershipCatego5 = data.ownershipCategory) === null || _data$ownershipCatego5 === void 0 ? void 0 : _data$ownershipCatego5.value) === "INSTITUTIONALPRIVATE" || (data === null || data === void 0 ? void 0 : (_data$ownershipCatego6 = data.ownershipCategory) === null || _data$ownershipCatego6 === void 0 ? void 0 : _data$ownershipCatego6.value) === "INSTITUTIONALGOVERNMENT") {
      var _owners$16, _owners$17, _owners$18, _data$address, _data$address$city, _owners$19, _owners$19$inistitute, _owners$20, _owners$20$documents$;
      institution.designation = (_owners$16 = owners[0]) === null || _owners$16 === void 0 ? void 0 : _owners$16.designation;
      institution.name = (_owners$17 = owners[0]) === null || _owners$17 === void 0 ? void 0 : _owners$17.inistitutionName;
      institution.nameOfAuthorizedPerson = (_owners$18 = owners[0]) === null || _owners$18 === void 0 ? void 0 : _owners$18.name;
      institution.tenantId = data === null || data === void 0 ? void 0 : (_data$address = data.address) === null || _data$address === void 0 ? void 0 : (_data$address$city = _data$address.city) === null || _data$address$city === void 0 ? void 0 : _data$address$city.code;
      institution.type = (_owners$19 = owners[0]) === null || _owners$19 === void 0 ? void 0 : (_owners$19$inistitute = _owners$19.inistitutetype) === null || _owners$19$inistitute === void 0 ? void 0 : _owners$19$inistitute.value;
      let document = [];
      if ((_owners$20 = owners[0]) !== null && _owners$20 !== void 0 && (_owners$20$documents$ = _owners$20.documents["proofIdentity"]) !== null && _owners$20$documents$ !== void 0 && _owners$20$documents$.fileStoreId && owners[0].documents["proofIdentity"].id) {
        var _owners$0$documents$p;
        document.push({
          fileStoreId: owners[0].documents["proofIdentity"].fileStoreId || "",
          documentType: ((_owners$0$documents$p = owners[0].documents["proofIdentity"].documentType) === null || _owners$0$documents$p === void 0 ? void 0 : _owners$0$documents$p.code) || "",
          id: owners[0].documents["proofIdentity"].id || "",
          status: owners[0].documents["proofIdentity"].status || ""
        });
      } else {
        var _owners$0$documents$p2;
        document.push({
          fileStoreId: owners[0].documents["proofIdentity"].fileStoreId || "",
          documentType: ((_owners$0$documents$p2 = owners[0].documents["proofIdentity"].documentType) === null || _owners$0$documents$p2 === void 0 ? void 0 : _owners$0$documents$p2.code) || ""
        });
      }
      data.owners.forEach(owner => {
        var _owners$21, _owners$22, _owners$23, _owners$24, _owners$25, _owners$26, _owners$27, _owners$28, _owners$28$ownerType;
        owner.altContactNumber = (_owners$21 = owners[0]) === null || _owners$21 === void 0 ? void 0 : _owners$21.altContactNumber;
        owner.correspondenceAddress = (_owners$22 = owners[0]) === null || _owners$22 === void 0 ? void 0 : _owners$22.permanentAddress;
        owner.designation = (_owners$23 = owners[0]) === null || _owners$23 === void 0 ? void 0 : _owners$23.designation;
        owner.emailId = (_owners$24 = owners[0]) === null || _owners$24 === void 0 ? void 0 : _owners$24.emailId;
        owner.isCorrespondenceAddress = (_owners$25 = owners[0]) === null || _owners$25 === void 0 ? void 0 : _owners$25.isCorrespondenceAddress;
        owner.mobileNumber = (_owners$26 = owners[0]) === null || _owners$26 === void 0 ? void 0 : _owners$26.mobileNumber;
        owner.name = (_owners$27 = owners[0]) === null || _owners$27 === void 0 ? void 0 : _owners$27.name;
        owner.ownerType = ((_owners$28 = owners[0]) === null || _owners$28 === void 0 ? void 0 : (_owners$28$ownerType = _owners$28.ownerType) === null || _owners$28$ownerType === void 0 ? void 0 : _owners$28$ownerType.code) || "NONE";
        owner.documents = document;
      });
      data.institution = institution;
    }
  } else {
    data.owners.forEach(owner => {
      var _owner$ownerType, _owner$documents$proo6, _owner$gender, _owner$ownerType2, _owner$relationship;
      let document = [];
      if ((owner === null || owner === void 0 ? void 0 : (_owner$ownerType = owner.ownerType) === null || _owner$ownerType === void 0 ? void 0 : _owner$ownerType.code) != "NONE") {
        if (owner.documents["specialProofIdentity"].id) {
          var _owner$documents$spec10;
          document.push({
            fileStoreId: owner.documents["specialProofIdentity"].fileStoreId || "",
            documentType: ((_owner$documents$spec10 = owner.documents["specialProofIdentity"].documentType) === null || _owner$documents$spec10 === void 0 ? void 0 : _owner$documents$spec10.code) || "",
            id: owner.documents["specialProofIdentity"].id || "",
            status: owner.documents["specialProofIdentity"].status || ""
          });
        } else {
          var _owner$documents$spec11;
          document.push({
            fileStoreId: owner.documents["specialProofIdentity"].fileStoreId || "",
            documentType: ((_owner$documents$spec11 = owner.documents["specialProofIdentity"].documentType) === null || _owner$documents$spec11 === void 0 ? void 0 : _owner$documents$spec11.code) || ""
          });
        }
      }
      if (owner !== null && owner !== void 0 && (_owner$documents$proo6 = owner.documents["proofIdentity"]) !== null && _owner$documents$proo6 !== void 0 && _owner$documents$proo6.fileStoreId) {
        if (owner.documents["proofIdentity"].id) {
          var _owner$documents$proo7;
          document.push({
            fileStoreId: owner.documents["proofIdentity"].fileStoreId || "",
            documentType: ((_owner$documents$proo7 = owner.documents["proofIdentity"].documentType) === null || _owner$documents$proo7 === void 0 ? void 0 : _owner$documents$proo7.code) || "",
            id: owner.documents["proofIdentity"].id || "",
            status: owner.documents["proofIdentity"].status || ""
          });
        } else {
          var _owner$documents$proo8;
          document.push({
            fileStoreId: owner.documents["proofIdentity"].fileStoreId || "",
            documentType: ((_owner$documents$proo8 = owner.documents["proofIdentity"].documentType) === null || _owner$documents$proo8 === void 0 ? void 0 : _owner$documents$proo8.code) || ""
          });
        }
      }
      owner.gender = owner === null || owner === void 0 ? void 0 : (_owner$gender = owner.gender) === null || _owner$gender === void 0 ? void 0 : _owner$gender.code;
      owner.ownerType = owner === null || owner === void 0 ? void 0 : (_owner$ownerType2 = owner.ownerType) === null || _owner$ownerType2 === void 0 ? void 0 : _owner$ownerType2.code;
      owner.relationship = owner === null || owner === void 0 ? void 0 : (_owner$relationship = owner.relationship) === null || _owner$relationship === void 0 ? void 0 : _owner$relationship.code;
      owner.documents = document;
    });
  }
  return data;
};
const setUpdatedDocumentDetails = data => {
  var _address$documents$Pr10;
  const {
    address,
    owners
  } = data;
  let documents = [];
  if (address !== null && address !== void 0 && (_address$documents$Pr10 = address.documents["ProofOfAddress"]) !== null && _address$documents$Pr10 !== void 0 && _address$documents$Pr10.id) {
    var _address$documents$Pr11, _address$documents$Pr12, _address$documents$Pr13, _address$documents$Pr14, _address$documents$Pr15;
    documents.push({
      fileStoreId: (address === null || address === void 0 ? void 0 : (_address$documents$Pr11 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr11 === void 0 ? void 0 : _address$documents$Pr11.fileStoreId) || "",
      documentType: (address === null || address === void 0 ? void 0 : (_address$documents$Pr12 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr12 === void 0 ? void 0 : (_address$documents$Pr13 = _address$documents$Pr12.documentType) === null || _address$documents$Pr13 === void 0 ? void 0 : _address$documents$Pr13.code) || "",
      id: (address === null || address === void 0 ? void 0 : (_address$documents$Pr14 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr14 === void 0 ? void 0 : _address$documents$Pr14.id) || "",
      status: (address === null || address === void 0 ? void 0 : (_address$documents$Pr15 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr15 === void 0 ? void 0 : _address$documents$Pr15.status) || ""
    });
  } else {
    var _address$documents$Pr16, _address$documents$Pr17, _address$documents$Pr18;
    documents.push({
      fileStoreId: (address === null || address === void 0 ? void 0 : (_address$documents$Pr16 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr16 === void 0 ? void 0 : _address$documents$Pr16.fileStoreId) || "",
      documentType: (address === null || address === void 0 ? void 0 : (_address$documents$Pr17 = address.documents["ProofOfAddress"]) === null || _address$documents$Pr17 === void 0 ? void 0 : (_address$documents$Pr18 = _address$documents$Pr17.documentType) === null || _address$documents$Pr18 === void 0 ? void 0 : _address$documents$Pr18.code) || ""
    });
  }
  owners && owners.length > 0 && owners.map(owner => {
    owner.documents.map(document => {
      documents.push(document);
    });
  });
  data.documents = documents;
  return data;
};
const convertToUpdateProperty = (data = {}, t) => {
  var _data12, _data12$floordetails, _data13, _data14, _data15, _data16, _data16$units, _data17, _data18, _data19, _data20, _data21, _data22, _data23, _data24, _data24$ownershipCate, _formdata$Property, _data25, _formdata$Property3;
  let isResdential = data.isResdential;
  let propertyType = data.PropertyType;
  let selfOccupied = data.selfOccupied;
  let Subusagetypeofrentedarea = data.Subusagetypeofrentedarea || null;
  let subusagetype = data.subusagetype || null;
  let IsAnyPartOfThisFloorUnOccupied = data.IsAnyPartOfThisFloorUnOccupied || null;
  let builtUpArea = ((_data12 = data) === null || _data12 === void 0 ? void 0 : (_data12$floordetails = _data12.floordetails) === null || _data12$floordetails === void 0 ? void 0 : _data12$floordetails.builtUpArea) || null;
  let noOfFloors = (_data13 = data) === null || _data13 === void 0 ? void 0 : _data13.noOfFloors;
  let noOofBasements = (_data14 = data) === null || _data14 === void 0 ? void 0 : _data14.noOofBasements;
  let unit = (_data15 = data) === null || _data15 === void 0 ? void 0 : _data15.units;
  data.units = (_data16 = data) === null || _data16 === void 0 ? void 0 : (_data16$units = _data16.units) === null || _data16$units === void 0 ? void 0 : _data16$units.map(ob => {
    var _ob$unitType;
    return {
      ...ob,
      unitType: ob === null || ob === void 0 ? void 0 : (_ob$unitType = ob.unitType) === null || _ob$unitType === void 0 ? void 0 : _ob$unitType.code
    };
  });
  let basement1 = Array.isArray((_data17 = data) === null || _data17 === void 0 ? void 0 : _data17.units) && (_data18 = data) !== null && _data18 !== void 0 && _data18.units["-1"] ? (_data19 = data) === null || _data19 === void 0 ? void 0 : _data19.units["-1"] : null;
  let basement2 = Array.isArray((_data20 = data) === null || _data20 === void 0 ? void 0 : _data20.units) && (_data21 = data) !== null && _data21 !== void 0 && _data21.units["-2"] ? (_data22 = data) === null || _data22 === void 0 ? void 0 : _data22.units["-2"] : null;
  data = setAddressDetails(data);
  data = setUpdateOwnerDetails(data);
  data = setUpdatedDocumentDetails(data);
  data = setPropertyDetails(data);
  data.address.city = data.address.city ? data.address.city : t(`TENANT_TENANTS_${stringReplaceAll((_data23 = data) === null || _data23 === void 0 ? void 0 : _data23.tenantId.toUpperCase(), ".", "_")}`);
  const formdata = {
    Property: {
      id: data.id,
      accountId: data.accountId,
      acknowldgementNumber: data.acknowldgementNumber,
      propertyId: data.propertyId,
      status: data.status || "INWORKFLOW",
      tenantId: data.tenantId,
      address: data.address,
      ownershipCategory: (_data24 = data) === null || _data24 === void 0 ? void 0 : (_data24$ownershipCate = _data24.ownershipCategory) === null || _data24$ownershipCate === void 0 ? void 0 : _data24$ownershipCate.value,
      owners: data.owners,
      institution: data.institution || null,
      documents: data.documents || [],
      ...data.propertyDetails,
      additionalDetails: {
        inflammable: false,
        heightAbove36Feet: false,
        isResdential: isResdential,
        propertyType: propertyType,
        selfOccupied: selfOccupied,
        Subusagetypeofrentedarea: Subusagetypeofrentedarea,
        subusagetype: subusagetype,
        IsAnyPartOfThisFloorUnOccupied: IsAnyPartOfThisFloorUnOccupied,
        builtUpArea: builtUpArea,
        noOfFloors: noOfFloors,
        noOofBasements: noOofBasements,
        unit: unit,
        basement1: basement1,
        basement2: basement2
      },
      creationReason: getCreationReason(data),
      source: "MUNICIPAL_RECORDS",
      channel: "CITIZEN",
      workflow: getWorkflow(data)
    }
  };
  let propertyInitialObject = JSON.parse(sessionStorage.getItem("propertyInitialObject"));
  if (checkArrayLength(propertyInitialObject === null || propertyInitialObject === void 0 ? void 0 : propertyInitialObject.units) && checkIsAnArray((_formdata$Property = formdata.Property) === null || _formdata$Property === void 0 ? void 0 : _formdata$Property.units) && (_data25 = data) !== null && _data25 !== void 0 && _data25.isEditProperty) {
    var _formdata$Property2;
    propertyInitialObject.units = propertyInitialObject.units.filter(unit => unit.active);
    let oldUnits = propertyInitialObject.units.map(unit => {
      return {
        ...unit,
        active: false
      };
    });
    (_formdata$Property2 = formdata.Property) === null || _formdata$Property2 === void 0 ? void 0 : _formdata$Property2.units.push(...oldUnits);
  }
  if (checkArrayLength(propertyInitialObject === null || propertyInitialObject === void 0 ? void 0 : propertyInitialObject.owners) && checkIsAnArray((_formdata$Property3 = formdata.Property) === null || _formdata$Property3 === void 0 ? void 0 : _formdata$Property3.owners)) {
    formdata.Property.owners = [...propertyInitialObject.owners];
  }
  if (propertyInitialObject !== null && propertyInitialObject !== void 0 && propertyInitialObject.auditDetails) {
    formdata.Property["auditDetails"] = {
      ...propertyInitialObject.auditDetails
    };
  }
  return formdata;
};
const checkForNA = (value = "") => {
  return checkForNotNull(value) ? value : "PT_NA";
};
const isPropertyIndependent = (value = "") => {
  return checkForNotNull(value) && value.includes("INDEPENDENT") ? true : false;
};
const isPropertyselfoccupied = (value = "") => {
  return checkForNotNull(value) && value.includes("SELFOCCUPIED") ? true : false;
};
const ispropertyunoccupied = (value = "") => {
  return checkForNotNull(value) && value.includes("YES") ? true : false;
};
const pdfDownloadLink = (documents = {}, fileStoreId = "", format = "") => {
  let downloadLink = documents[fileStoreId] || "";
  let differentFormats = (downloadLink === null || downloadLink === void 0 ? void 0 : downloadLink.split(",")) || [];
  let fileURL = "";
  differentFormats.length > 0 && differentFormats.map(link => {
    if (!link.includes("large") && !link.includes("medium") && !link.includes("small")) {
      fileURL = link;
    }
  });
  return fileURL;
};
const pdfDocumentName = (documentLink = "", index = 0) => {
  let documentName = decodeURIComponent(documentLink.split("?")[0].split("/").pop().slice(13)) || `Document - ${index + 1}`;
  return documentName;
};
const convertEpochToDate = (dateEpoch, businessService) => {
  if (dateEpoch) {
    const dateFromApi = new Date(dateEpoch);
    let month = dateFromApi.getMonth() + 1;
    let day = dateFromApi.getDate();
    let year = dateFromApi.getFullYear();
    month = (month > 9 ? "" : "0") + month;
    day = (day > 9 ? "" : "0") + day;
    if (businessService == "PT") return `${day}-${month}-${year}`;else return `${day}/${month}/${year}`;
  } else {
    return null;
  }
};
const stringReplaceAll = (str = "", searcher = "", replaceWith = "") => {
  if (searcher == "") return str;
  while (str.includes(searcher)) {
    str = str.replace(searcher, replaceWith);
  }
  return str;
};
const DownloadReceipt = async (consumerCode, tenantId, businessService, pdfKey = "consolidatedreceipt") => {
  tenantId = tenantId ? tenantId : Digit.ULBService.getCurrentTenantId();
  await Digit.Utils.downloadReceipt(consumerCode, businessService, "consolidatedreceipt", tenantId);
};
const checkIsAnArray = (obj = []) => {
  return obj && Array.isArray(obj) ? true : false;
};
const checkArrayLength = (obj = [], length = 0) => {
  return checkIsAnArray(obj) && obj.length > length ? true : false;
};
const getWorkflow = (data = {}) => {
  return {
    action: data !== null && data !== void 0 && data.isEditProperty ? "REOPEN" : "OPEN",
    businessService: `PT.${getCreationReason(data)}`,
    moduleName: "PT"
  };
};
const getCreationReason = (data = {}) => {
  return data !== null && data !== void 0 && data.isUpdateProperty ? "UPDATE" : "CREATE";
};

const Proof = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _formData$address, _formData$address$doc, _formData$address$doc2, _formData$config$key, _formData$address2, _formData$address2$do, _formData$address3, _formData$address3$do, _formData$address3$do2, _formData$config$key2, _Documentsob$Property;
  const {
    pathname: url
  } = useLocation();
  const isMutation = url.includes("property-mutation");
  let index = window.location.href.split("/").pop();
  const [uploadedFile, setUploadedFile] = useState(!isMutation ? (formData === null || formData === void 0 ? void 0 : (_formData$address = formData.address) === null || _formData$address === void 0 ? void 0 : (_formData$address$doc = _formData$address.documents) === null || _formData$address$doc === void 0 ? void 0 : (_formData$address$doc2 = _formData$address$doc.ProofOfAddress) === null || _formData$address$doc2 === void 0 ? void 0 : _formData$address$doc2.fileStoreId) || null : formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.fileStoreId);
  const [file, setFile] = useState(formData === null || formData === void 0 ? void 0 : (_formData$address2 = formData.address) === null || _formData$address2 === void 0 ? void 0 : (_formData$address2$do = _formData$address2.documents) === null || _formData$address2$do === void 0 ? void 0 : _formData$address2$do.ProofOfAddress);
  const [error, setError] = useState(null);
  const cityDetails = Digit.ULBService.getCurrentUlb();
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  const isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  const [dropdownValue, setDropdownValue] = useState(!isMutation ? (formData === null || formData === void 0 ? void 0 : (_formData$address3 = formData.address) === null || _formData$address3 === void 0 ? void 0 : (_formData$address3$do = _formData$address3.documents) === null || _formData$address3$do === void 0 ? void 0 : (_formData$address3$do2 = _formData$address3$do.ProofOfAddress) === null || _formData$address3$do2 === void 0 ? void 0 : _formData$address3$do2.documentType) || null : formData === null || formData === void 0 ? void 0 : (_formData$config$key2 = formData[config.key]) === null || _formData$config$key2 === void 0 ? void 0 : _formData$config$key2.documentType);
  let dropdownData = [];
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Documentsob = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "Documents");
  const docs = Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property.Documents;
  const proofOfAddress = Array.isArray(docs) && docs.filter(doc => doc.code.includes("ADDRESSPROOF"));
  if (proofOfAddress.length > 0) {
    var _proofOfAddress$;
    dropdownData = (_proofOfAddress$ = proofOfAddress[0]) === null || _proofOfAddress$ === void 0 ? void 0 : _proofOfAddress$.dropdownData;
    dropdownData.forEach(data => {
      data.i18nKey = stringReplaceAll(data.code, ".", "_");
    });
  }
  function setTypeOfDropdownValue(dropdownValue) {
    setDropdownValue(dropdownValue);
  }
  const handleSubmit = () => {
    let fileStoreId = uploadedFile;
    let fileDetails = file;
    if (fileDetails) fileDetails.documentType = dropdownValue;
    if (fileDetails) fileDetails.fileStoreId = fileStoreId ? fileStoreId : null;
    let address = !isMutation ? formData === null || formData === void 0 ? void 0 : formData.address : {};
    if (address && address.documents) {
      address.documents["ProofOfAddress"] = fileDetails;
    } else {
      address["documents"] = [];
      address.documents["ProofOfAddress"] = fileDetails;
    }
    if (!isMutation) onSelect(config.key, address, "", index);else onSelect(config.key, {
      documentType: dropdownValue,
      fileStoreId
    }, "", index);
  };
  const onSkip = () => onSelect();
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 2000000) {
          setError(t("PT_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("property-upload", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("PT_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {}
        }
      }
    })();
  }, [file]);
  const checkMutatePT = window.location.href.includes("citizen/pt/property/property-mutation/") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 3,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? checkMutatePT : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    t: t,
    isDisabled: isUpdateProperty || isEditProperty ? false : !uploadedFile || !dropdownValue || error
  }, /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_TYPES`)), /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_SIZE`)), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_CATEGORY_DOCUMENT_TYPE")}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: dropdownData,
    selected: dropdownValue,
    optionKey: "i18nKey",
    select: setTypeOfDropdownValue,
    placeholder: t(`PT_MUTATION_SELECT_DOC_LABEL`)
  }), /*#__PURE__*/React.createElement(UploadFile, {
    id: "pt-doc",
    extraStyleName: "propertyCreate",
    accept: ".jpg,.png,.pdf",
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
    },
    message: uploadedFile ? `1 ${t(`PT_ACTION_FILEUPLOADED`)}` : t(`PT_ACTION_NO_FILEUPLOADED`),
    error: error
  }), error ? /*#__PURE__*/React.createElement("div", {
    style: {
      height: "20px",
      width: "100%",
      fontSize: "20px",
      color: "red",
      marginTop: "5px"
    }
  }, error) : "", /*#__PURE__*/React.createElement("div", {
    style: {
      disabled: "true",
      height: "20px",
      width: "100%"
    }
  })));
};

const PropertyBasementsDetails = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  const [BasementDetails, setBasementDetails] = useState(formData === null || formData === void 0 ? void 0 : formData.noOofBasements);
  const menu = [{
    code: 0,
    i18nKey: "PT_NO_BASEMENT_OPTION"
  }, {
    code: 1,
    i18nKey: "PT_ONE_BASEMENT_OPTION"
  }, {
    code: 2,
    i18nKey: "PT_TWO_BASEMENT_OPTION"
  }];
  const onSkip = () => onSelect();
  function goNext() {
    sessionStorage.setItem("noOofBasements", BasementDetails.i18nKey);
    onSelect(config.key, BasementDetails);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !BasementDetails,
    isMultipleAllow: true
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: menu,
    selectedOption: BasementDetails,
    onSelect: setBasementDetails
  })), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_BASEMENT_NUMBER_INFO_MSG", BasementDetails)
  }));
};

const PropertyFloorsDetails = ({
  t,
  config,
  onSelect,
  formData,
  userType
}) => {
  var _Menu$PropertyTax, _Menu$PropertyTax$Flo;
  const [FloorDetails, setFloorDetails] = useState(formData === null || formData === void 0 ? void 0 : formData.noOfFloors);
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Menu = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "Floor") || {};
  const menu = [{
    i18nKey: "PT_GROUND_FLOOR_OPTION",
    code: 0
  }, {
    i18nKey: "PT_GROUND_PLUS_ONE_OPTION",
    code: 1
  }, {
    i18nKey: "PT_GROUND_PLUS_TWO_OPTION",
    code: 2
  }];
  const employeeMenu = (Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax = Menu.PropertyTax) === null || _Menu$PropertyTax === void 0 ? void 0 : (_Menu$PropertyTax$Flo = _Menu$PropertyTax.Floor) === null || _Menu$PropertyTax$Flo === void 0 ? void 0 : _Menu$PropertyTax$Flo.filter(floor => (floor === null || floor === void 0 ? void 0 : floor.code) > 0)) || [];
  const onSkip = () => onSelect();
  function selectFloorDetails(value) {
    setFloorDetails(value);
  }
  function goNext() {
    let index = window.location.href.charAt(window.location.href.length - 1);
    onSelect(config.key, FloorDetails, "", index);
  }
  useEffect(() => {
    if (userType === "employee") {
      goNext();
    }
  }, [FloorDetails]);
  if (userType === "employee") {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !FloorDetails,
    isMultipleAllow: true
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: menu,
    selectedOption: FloorDetails,
    onSelect: selectFloorDetails
  })), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_USAGE_TYPE_INFO_MSG")
  }));
};

const PropertyTax = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _Documentsob$Property, _docs;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  sessionStorage.removeItem("docReqScreenByBack");
  const docType = config !== null && config !== void 0 && config.isMutation ? ["MutationDocuments"] : "Documents";
  const {
    isLoading,
    data: Documentsob = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", docType);
  let docs = Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property[config !== null && config !== void 0 && config.isMutation ? docType[0] : docType];
  if (!(config !== null && config !== void 0 && config.isMutation)) docs = (_docs = docs) === null || _docs === void 0 ? void 0 : _docs.filter(doc => doc["digit-citizen"]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardHeader, null, !config.isMutation ? t("PT_DOC_REQ_SCREEN_HEADER") : t("PT_REQIURED_DOC_TRANSFER_OWNERSHIP")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardText, {
    className: "primaryColor"
  }, t("PT_DOC_REQ_SCREEN_SUB_HEADER")), /*#__PURE__*/React.createElement(CardText, {
    className: "primaryColor"
  }, t("PT_DOC_REQ_SCREEN_TEXT")), /*#__PURE__*/React.createElement(CardText, {
    className: "primaryColor"
  }, t("PT_DOC_REQ_SCREEN_SUB_TEXT")), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_DOC_REQ_SCREEN_LABEL")), /*#__PURE__*/React.createElement(CardText, {
    className: "primaryColor"
  }, t("PT_DOC_REQ_SCREEN_LABEL_TEXT")), /*#__PURE__*/React.createElement("div", null, isLoading && /*#__PURE__*/React.createElement(Loader, null), Array.isArray(docs) ? config !== null && config !== void 0 && config.isMutation ? docs.map(({
    code,
    dropdownData
  }, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, null, index + 1, ". ", t(code)), /*#__PURE__*/React.createElement(CardText, {
    className: "primaryColor"
  }, dropdownData.map(dropdownData => t(dropdownData === null || dropdownData === void 0 ? void 0 : dropdownData.code)).join(', ')))) : docs.map(({
    code,
    dropdownData
  }, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, null, index + 1, ". ", t("PROPERTYTAX_" + stringReplaceAll(code, ".", "_") + "_HEADING")), dropdownData.map(dropdownData => /*#__PURE__*/React.createElement(CardText, {
    className: "primaryColor"
  }, t("PROPERTYTAX_" + stringReplaceAll(dropdownData === null || dropdownData === void 0 ? void 0 : dropdownData.code, ".", "_") + "_LABEL"))))) : null)), /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_COMMON_NEXT"),
    onSubmit: onSelect
  }))));
};

const PropertyType = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  setError,
  clearErrors,
  formState,
  onBlur
}) => {
  var _Menu$PropertyTax;
  const [BuildingType, setBuildingType] = useState(formData === null || formData === void 0 ? void 0 : formData.PropertyType);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Menu = {},
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "PTPropertyType") || {};
  let proptype = [];
  proptype = Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax = Menu.PropertyTax) === null || _Menu$PropertyTax === void 0 ? void 0 : _Menu$PropertyTax.PropertyType;
  let i;
  let menu = [];
  function getPropertyTypeMenu(proptype) {
    if (userType === "employee") {
      var _proptype$filter, _proptype$filter$map;
      return proptype === null || proptype === void 0 ? void 0 : (_proptype$filter = proptype.filter(e => e.code === "VACANT" || e.code.split(".").length > 1)) === null || _proptype$filter === void 0 ? void 0 : (_proptype$filter$map = _proptype$filter.map(item => ({
        i18nKey: "COMMON_PROPTYPE_" + stringReplaceAll(item === null || item === void 0 ? void 0 : item.code, ".", "_"),
        code: item === null || item === void 0 ? void 0 : item.code
      }))) === null || _proptype$filter$map === void 0 ? void 0 : _proptype$filter$map.sort((a, b) => a.i18nKey.split("_").pop().localeCompare(b.i18nKey.split("_").pop()));
    } else {
      if (Array.isArray(proptype) && proptype.length > 0) {
        for (i = 0; i < proptype.length; i++) {
          if (i != 1 && i != 4 && Array.isArray(proptype) && proptype.length > 0) menu.push({
            i18nKey: "COMMON_PROPTYPE_" + stringReplaceAll(proptype[i].code, ".", "_"),
            code: proptype[i].code
          });
        }
      }
      menu.sort((a, b) => a.i18nKey.split("_").pop().localeCompare(b.i18nKey.split("_").pop()));
      return menu;
    }
  }
  const {
    pathname
  } = useLocation();
  const presentInModifyApplication = pathname.includes("modify");
  const onSkip = () => onSelect();
  function selectBuildingType(value) {
    setBuildingType(value);
  }
  function goNext() {
    sessionStorage.setItem("PropertyType", BuildingType === null || BuildingType === void 0 ? void 0 : BuildingType.i18nKey);
    onSelect(config.key, BuildingType);
  }
  useEffect(() => {
    if (presentInModifyApplication && userType === "employee" && Menu) {
      var _formData$originalDat, _getPropertyTypeMenu;
      const original = formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : _formData$originalDat.propertyType;
      const defaultVal = (_getPropertyTypeMenu = getPropertyTypeMenu(proptype)) === null || _getPropertyTypeMenu === void 0 ? void 0 : _getPropertyTypeMenu.filter(e => e.code === original)[0];
      setBuildingType(defaultVal);
    }
  }, [isLoading]);
  useEffect(() => {
    if (userType === "employee") {
      goNext();
      if (!BuildingType) setError(config.key, {
        type: "required",
        message: t("CORE_COMMON_REQUIRED_ERRMSG")
      });else clearErrors(config.key);
    }
  }, [BuildingType]);
  const inputs = [{
    label: "PT_ASSESMENT_INFO_TYPE_OF_BUILDING",
    type: "text",
    name: "propertyType",
    validation: {}
  }];
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if (userType === "employee") {
    return inputs === null || inputs === void 0 ? void 0 : inputs.map((input, index) => {
      var _getPropertyTypeMenu2, _getPropertyTypeMenu3, _formState$errors, _formState$errors$con;
      return /*#__PURE__*/React.createElement(React.Fragment, {
        key: index
      }, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
        className: "card-label-smaller"
      }, t(input.label) + " *"), /*#__PURE__*/React.createElement(Dropdown, {
        className: "form-field",
        selected: ((_getPropertyTypeMenu2 = getPropertyTypeMenu(proptype)) === null || _getPropertyTypeMenu2 === void 0 ? void 0 : _getPropertyTypeMenu2.length) === 1 ? getPropertyTypeMenu(proptype)[0] : BuildingType,
        disable: ((_getPropertyTypeMenu3 = getPropertyTypeMenu(proptype)) === null || _getPropertyTypeMenu3 === void 0 ? void 0 : _getPropertyTypeMenu3.length) === 1,
        option: getPropertyTypeMenu(proptype),
        select: selectBuildingType,
        optionKey: "i18nKey",
        onBlur: onBlur,
        t: t
      })), formState.touched[config.key] ? /*#__PURE__*/React.createElement(CardLabelError, {
        style: {
          width: "70%",
          marginLeft: "30%",
          fontSize: "12px",
          marginTop: "-21px"
        }
      }, (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$con = _formState$errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.message) : null);
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !BuildingType
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: getPropertyTypeMenu(proptype) || {},
    selectedOption: BuildingType,
    onSelect: selectBuildingType
  })), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_PROPERTY_TYPE_INFO_MSG")
  }));
};

const PropertyUsageType = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  formState,
  setError,
  clearErrors,
  onBlur
}) => {
  var _formData$usageCatego, _formData$usageCatego2, _Menu$PropertyTax;
  const [usageCategoryMajor, setPropertyPurpose] = useState(formData !== null && formData !== void 0 && formData.usageCategoryMajor && (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego = formData.usageCategoryMajor) === null || _formData$usageCatego === void 0 ? void 0 : _formData$usageCatego.code) === "NONRESIDENTIAL.OTHERS" ? {
    code: `${formData === null || formData === void 0 ? void 0 : (_formData$usageCatego2 = formData.usageCategoryMajor) === null || _formData$usageCatego2 === void 0 ? void 0 : _formData$usageCatego2.code}`,
    i18nKey: `PROPERTYTAX_BILLING_SLAB_OTHERS`
  } : formData === null || formData === void 0 ? void 0 : formData.usageCategoryMajor);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Menu = {},
    isLoading: menuLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "UsageCategory") || {};
  let usagecat = [];
  usagecat = (Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax = Menu.PropertyTax) === null || _Menu$PropertyTax === void 0 ? void 0 : _Menu$PropertyTax.UsageCategory) || [];
  let i;
  let menu = [];
  const {
    pathname
  } = useLocation();
  const presentInModifyApplication = pathname.includes("modify");
  function usageCategoryMajorMenu(usagecat) {
    if (userType === "employee") {
      var _usagecat$filter;
      const catMenu = usagecat === null || usagecat === void 0 ? void 0 : (_usagecat$filter = usagecat.filter(e => (e === null || e === void 0 ? void 0 : e.code.split(".").length) <= 2 && e.code !== "NONRESIDENTIAL")) === null || _usagecat$filter === void 0 ? void 0 : _usagecat$filter.map(item => {
        const arr = item === null || item === void 0 ? void 0 : item.code.split(".");
        if (arr.length == 2) return {
          i18nKey: "PROPERTYTAX_BILLING_SLAB_" + arr[1],
          code: item === null || item === void 0 ? void 0 : item.code
        };else return {
          i18nKey: "PROPERTYTAX_BILLING_SLAB_" + (item === null || item === void 0 ? void 0 : item.code),
          code: item === null || item === void 0 ? void 0 : item.code
        };
      });
      return catMenu;
    } else {
      for (i = 0; i < 10; i++) {
        if (Array.isArray(usagecat) && usagecat.length > 0 && usagecat[i].code.split(".")[0] == "NONRESIDENTIAL" && usagecat[i].code.split(".").length == 2) {
          menu.push({
            i18nKey: "PROPERTYTAX_BILLING_SLAB_" + usagecat[i].code.split(".")[1],
            code: usagecat[i].code
          });
        }
      }
      return menu;
    }
  }
  useEffect(() => {
    if (!menuLoading && presentInModifyApplication && userType === "employee") {
      var _formData$originalDat;
      const original = formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : _formData$originalDat.usageCategory;
      const selectedOption = usageCategoryMajorMenu(usagecat).filter(e => e.code === original)[0];
      setPropertyPurpose(selectedOption);
    }
  }, [menuLoading]);
  const onSkip = () => onSelect();
  function selectPropertyPurpose(value) {
    setPropertyPurpose(value);
  }
  function goNext() {
    if ((usageCategoryMajor === null || usageCategoryMajor === void 0 ? void 0 : usageCategoryMajor.i18nKey) === "PROPERTYTAX_BILLING_SLAB_OTHERS") {
      usageCategoryMajor.i18nKey = "PROPERTYTAX_BILLING_SLAB_NONRESIDENTIAL";
      onSelect(config.key, usageCategoryMajor);
    } else {
      onSelect(config.key, usageCategoryMajor);
    }
  }
  useEffect(() => {
    if (userType === "employee") {
      if (!usageCategoryMajor) {
        setError(config.key, {
          type: "required",
          message: t(`CORE_COMMON_REQUIRED_ERRMSG`)
        });
      } else {
        clearErrors(config.key);
      }
      goNext();
    }
  }, [usageCategoryMajor]);
  if (userType === "employee") {
    var _usageCategoryMajorMe, _formState$errors, _formState$errors$con;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      className: "card-label-smaller"
    }, t("PT_ASSESMENT_INFO_USAGE_TYPE") + " *"), /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: usageCategoryMajor,
      disable: ((_usageCategoryMajorMe = usageCategoryMajorMenu(usagecat)) === null || _usageCategoryMajorMe === void 0 ? void 0 : _usageCategoryMajorMe.length) === 1,
      option: usageCategoryMajorMenu(usagecat),
      select: e => {
        selectPropertyPurpose(e);
      },
      optionKey: "i18nKey",
      onBlur: onBlur,
      t: t
    })), formState.touched[config.key] ? /*#__PURE__*/React.createElement(CardLabelError, {
      style: {
        width: "70%",
        marginLeft: "30%",
        fontSize: "12px",
        marginTop: "-21px"
      }
    }, (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$con = _formState$errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.message) : null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !usageCategoryMajor
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: usageCategoryMajorMenu(usagecat) || {},
    selectedOption: usageCategoryMajor,
    onSelect: selectPropertyPurpose
  }))), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_USAGE_TYPE_INFO_MSG", usageCategoryMajor)
  }));
};

const ProvideSubUsageType = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _Menu$PropertyTax, _formData$usageCatego4;
  let index = window.location.href.split("/").pop();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  let SubUsageType, setSelfOccupied;
  if (!isNaN(index)) {
    [SubUsageType, setSelfOccupied] = useState(formData.units && formData.units[index] && formData.units[index].SubUsageType);
  } else {
    var _formData$subusagetyp;
    [SubUsageType, setSelfOccupied] = useState((_formData$subusagetyp = formData.subusagetype) === null || _formData$subusagetyp === void 0 ? void 0 : _formData$subusagetyp.SubUsageType);
  }
  const {
    data: Menu = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "UsageCategory") || {};
  let subusageoption = [];
  subusageoption = (Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax = Menu.PropertyTax) === null || _Menu$PropertyTax === void 0 ? void 0 : _Menu$PropertyTax.UsageCategory) || [];
  let i;
  let data = [];
  function getSubUsagedata(subusageoption) {
    if (userType === "employee") {
      var _subusageoption$map, _subusageoption$map$f;
      return subusageoption === null || subusageoption === void 0 ? void 0 : (_subusageoption$map = subusageoption.map(item => {
        var _formData$usageCatego;
        const codeArr = item === null || item === void 0 ? void 0 : item.code.split(".");
        if (codeArr[1] == (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego = formData.usageCategoryMajor) === null || _formData$usageCatego === void 0 ? void 0 : _formData$usageCatego.i18nKey.split("_")[3]) && codeArr.length == 4) {
          return {
            i18nKey: "COMMON_PROPSUBUSGTYPE_NONRESIDENTIAL_" + codeArr[1] + "_" + codeArr[codeArr.length - 1]
          };
        }
        return {
          filter: true
        };
      })) === null || _subusageoption$map === void 0 ? void 0 : (_subusageoption$map$f = _subusageoption$map.filter(item => !(item !== null && item !== void 0 && item.filter))) === null || _subusageoption$map$f === void 0 ? void 0 : _subusageoption$map$f.sort((a, b) => t(a.i18nKey).localeCompare(t(b.i18nKey)));
    } else {
      for (i = 0; i < subusageoption.length; i++) {
        var _formData$usageCatego2;
        if (Array.isArray(subusageoption) && subusageoption.length > 0 && subusageoption[i].code.split(".")[1] == (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego2 = formData.usageCategoryMajor) === null || _formData$usageCatego2 === void 0 ? void 0 : _formData$usageCatego2.i18nKey.split("_")[3]) && subusageoption[i].code.split(".").length == 4) {
          data.push({
            i18nKey: "COMMON_PROPSUBUSGTYPE_NONRESIDENTIAL_" + subusageoption[i].code.split(".")[1] + "_" + subusageoption[i].code.split(".")[subusageoption[i].code.split(".").length - 1]
          });
        }
      }
      data.sort((a, b) => t(a.i18nKey).localeCompare(t(b.i18nKey)));
      return data;
    }
  }
  const getCode = () => {
    for (i = 0; i < subusageoption.length; i++) {
      var _subusageoption$i, _SubUsageType;
      if (((_subusageoption$i = subusageoption[i]) === null || _subusageoption$i === void 0 ? void 0 : _subusageoption$i.code.split(".").pop()) === ((_SubUsageType = SubUsageType) === null || _SubUsageType === void 0 ? void 0 : _SubUsageType.i18nKey.split("_").pop())) {
        var _subusageoption$i2;
        return (_subusageoption$i2 = subusageoption[i]) === null || _subusageoption$i2 === void 0 ? void 0 : _subusageoption$i2.code;
      }
    }
  };
  const onSkip = () => onSelect();
  function selectSelfOccupied(value) {
    setSelfOccupied(value);
  }
  function goNext() {
    let subuagecode = getCode();
    if (!isNaN(index)) {
      var _unit$selfOccupied;
      let unit = formData.units && formData.units[index];
      let floordet = {
        ...unit,
        SubUsageType,
        subuagecode
      };
      if ((unit === null || unit === void 0 ? void 0 : (_unit$selfOccupied = unit.selfOccupied) === null || _unit$selfOccupied === void 0 ? void 0 : _unit$selfOccupied.i18nKey) === "PT_YES_IT_IS_SELFOCCUPIED") {
        sessionStorage.setItem("subusagetypevar", "yes");
      } else {
        sessionStorage.setItem("subusagetypevar", "no");
      }
      onSelect(config.key, floordet, false, index);
    } else {
      if (userType === "employee") {
        onSelect(config.key, {
          SubUsageType,
          subuagecode
        });
      } else {
        var _formData$selfOccupie;
        if ((formData === null || formData === void 0 ? void 0 : (_formData$selfOccupie = formData.selfOccupied) === null || _formData$selfOccupie === void 0 ? void 0 : _formData$selfOccupie.i18nKey) === "PT_YES_IT_IS_SELFOCCUPIED") {
          sessionStorage.setItem("subusagetypevar", "yes");
        } else {
          sessionStorage.setItem("subusagetypevar", "no");
        }
        onSelect("subusagetype", {
          SubUsageType,
          subuagecode
        });
      }
    }
  }
  const [inputs, setInputs] = useState([]);
  useEffect(() => {
    if (userType === "employee") {
      var _formData$usageCatego3;
      const arr = ["RESIDENTIAL", "NONRESIDENTIAL.OTHERS", "MIXED"];
      if (!arr.includes(formData === null || formData === void 0 ? void 0 : (_formData$usageCatego3 = formData.usageCategoryMajor) === null || _formData$usageCatego3 === void 0 ? void 0 : _formData$usageCatego3.code)) setInputs([{
        label: "PT_ASSESSMENT_FLOW_SUBUSAGE_HEADER",
        type: "dropdown",
        name: "subusagetype",
        validation: {}
      }]);else setInputs([]);
    }
  }, [formData === null || formData === void 0 ? void 0 : (_formData$usageCatego4 = formData.usageCategoryMajor) === null || _formData$usageCatego4 === void 0 ? void 0 : _formData$usageCatego4.code]);
  useEffect(() => {
    if (userType === "employee") {
      goNext();
    }
  }, [SubUsageType]);
  if (userType === "employee") {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !SubUsageType
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_SUB_USAGE_TYPE_LABEL")), /*#__PURE__*/React.createElement("div", {
    className: "form-pt-dropdown-only"
  }, getSubUsagedata(subusageoption) && /*#__PURE__*/React.createElement(RadioOrSelect, {
    isMandatory: config.isMandatory,
    selectedOption: SubUsageType,
    options: data || {},
    t: t,
    optionKey: "i18nKey",
    onSelect: selectSelfOccupied
  }))), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_SUB_USAGE_TYPE_INFO_MSG")
  }));
};

const ProvideSubUsageTypeOfRentedArea = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _Menu$PropertyTax;
  let index = window.location.href.split("/").pop();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  let SubUsageTypeOfRentedArea, setSelfOccupied;
  if (!isNaN(index)) {
    [SubUsageTypeOfRentedArea, setSelfOccupied] = useState(formData.units && formData.units[index] && formData.units[index].SubUsageTypeOfRentedArea || "");
  } else {
    var _formData$Subusagetyp;
    [SubUsageTypeOfRentedArea, setSelfOccupied] = useState(((_formData$Subusagetyp = formData.Subusagetypeofrentedarea) === null || _formData$Subusagetyp === void 0 ? void 0 : _formData$Subusagetyp.SubUsageTypeOfRentedArea) || "");
  }
  const {
    data: Menu = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "UsageCategory") || {};
  let subusageoption = [];
  subusageoption = (Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax = Menu.PropertyTax) === null || _Menu$PropertyTax === void 0 ? void 0 : _Menu$PropertyTax.UsageCategory) || [];
  let i;
  let data = [];
  function getSubUsagedata(subusageoption) {
    for (i = 0; i < subusageoption.length; i++) {
      if (Array.isArray(subusageoption) && subusageoption.length > 0 && subusageoption[i].code.split(".")[1] == (formData === null || formData === void 0 ? void 0 : formData.usageCategoryMajor.i18nKey.split("_")[3]) && subusageoption[i].code.split(".").length == 4) {
        data.push({
          i18nKey: "COMMON_PROPSUBUSGTYPE_NONRESIDENTIAL_" + subusageoption[i].code.split(".")[1] + "_" + subusageoption[i].code.split(".")[subusageoption[i].code.split(".").length - 1]
        });
      }
    }
    data.sort((a, b) => t(a.i18nKey).localeCompare(t(b.i18nKey)));
    return data;
  }
  const getCode = () => {
    for (i = 0; i < subusageoption.length; i++) {
      var _subusageoption$i;
      if (((_subusageoption$i = subusageoption[i]) === null || _subusageoption$i === void 0 ? void 0 : _subusageoption$i.code.split(".").pop()) === SubUsageTypeOfRentedArea.i18nKey.split("_").pop()) {
        var _subusageoption$i2;
        return (_subusageoption$i2 = subusageoption[i]) === null || _subusageoption$i2 === void 0 ? void 0 : _subusageoption$i2.code;
      }
    }
  };
  const onSkip = () => onSelect();
  function selectSelfOccupied(value) {
    setSelfOccupied(value);
  }
  function goNext() {
    let Subusagetypeofrentedareacode = getCode();
    if (!isNaN(index)) {
      let unit = formData.units && formData.units[index];
      let floordet = {
        ...unit,
        SubUsageTypeOfRentedArea,
        Subusagetypeofrentedareacode
      };
      onSelect(config.key, floordet, false, index);
    } else {
      onSelect("Subusagetypeofrentedarea", {
        SubUsageTypeOfRentedArea,
        Subusagetypeofrentedareacode
      });
    }
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !SubUsageTypeOfRentedArea
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_SUB_USAGE_TYPE_LABEL")), /*#__PURE__*/React.createElement("div", {
    className: "form-pt-dropdown-only"
  }, getSubUsagedata(subusageoption) && /*#__PURE__*/React.createElement(RadioOrSelect, {
    t: t,
    optionKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: data || [],
    selectedOption: SubUsageTypeOfRentedArea,
    onSelect: selectSelfOccupied
  }))), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_SUB_USAGE_TYPE_INFO_MSG")
  }));
};

const PTWFReason = ({
  headComment,
  otherComment
}) => /*#__PURE__*/React.createElement("div", {
  className: "checkpoint-comments-wrap"
}, /*#__PURE__*/React.createElement("h4", null, headComment), /*#__PURE__*/React.createElement("p", null, otherComment));

const PTWFCaption = ({
  data,
  OpenImage
}) => {
  var _data$wfComment, _data$thumbnailsToSho, _data$thumbnailsToSho2;
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement("div", null, data.date && /*#__PURE__*/React.createElement("p", null, data.date), /*#__PURE__*/React.createElement("p", null, data.name), data.mobileNumber && /*#__PURE__*/React.createElement(TelePhone, {
    mobile: data.mobileNumber
  }), data.source && /*#__PURE__*/React.createElement("p", null, t("ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_" + data.source.toUpperCase())), data.comment && /*#__PURE__*/React.createElement(Reason, {
    otherComment: data === null || data === void 0 ? void 0 : data.otherComment,
    headComment: data === null || data === void 0 ? void 0 : data.comment
  }), data !== null && data !== void 0 && data.wfComment ? /*#__PURE__*/React.createElement("div", null, data === null || data === void 0 ? void 0 : (_data$wfComment = data.wfComment) === null || _data$wfComment === void 0 ? void 0 : _data$wfComment.map(e => /*#__PURE__*/React.createElement("div", {
    className: "TLComments"
  }, /*#__PURE__*/React.createElement("h3", null, t("WF_COMMON_COMMENTS")), /*#__PURE__*/React.createElement("p", null, e)))) : null, (data === null || data === void 0 ? void 0 : (_data$thumbnailsToSho = data.thumbnailsToShow) === null || _data$thumbnailsToSho === void 0 ? void 0 : (_data$thumbnailsToSho2 = _data$thumbnailsToSho.thumbs) === null || _data$thumbnailsToSho2 === void 0 ? void 0 : _data$thumbnailsToSho2.length) > 0 ? /*#__PURE__*/React.createElement("div", {
    className: "TLComments"
  }, /*#__PURE__*/React.createElement("h3", null, t("CS_COMMON_ATTACHMENTS")), /*#__PURE__*/React.createElement(DisplayPhotos, {
    srcs: data === null || data === void 0 ? void 0 : data.thumbnailsToShow.thumbs,
    onClick: (src, index) => {
      OpenImage(src, index, data === null || data === void 0 ? void 0 : data.thumbnailsToShow);
    }
  })) : null);
};

const PTWFApplicationTimeline = props => {
  var _props$application, _props$application2, _data$timeline, _data$timeline2, _data$timeline$;
  const {
    t
  } = useTranslation();
  const businessService = ((_props$application = props.application) === null || _props$application === void 0 ? void 0 : _props$application.creationReason) && `PT.${props.application.creationReason}` || "PT.CREATE";
  const {
    isLoading,
    data
  } = Digit.Hooks.useWorkflowDetails({
    tenantId: (_props$application2 = props.application) === null || _props$application2 === void 0 ? void 0 : _props$application2.tenantId,
    id: props.id,
    moduleCode: businessService
  });
  function OpenImage(imageSource, index, thumbnailsToShow) {
    var _thumbnailsToShow$ful;
    window.open(thumbnailsToShow === null || thumbnailsToShow === void 0 ? void 0 : (_thumbnailsToShow$ful = thumbnailsToShow.fullImage) === null || _thumbnailsToShow$ful === void 0 ? void 0 : _thumbnailsToShow$ful[0], "_blank");
  }
  const getTimelineCaptions = checkpoint => {
    if (checkpoint.state === "OPEN") {
      var _checkpoint$auditDeta, _props$application3;
      const caption = {
        date: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$auditDeta = checkpoint.auditDetails) === null || _checkpoint$auditDeta === void 0 ? void 0 : _checkpoint$auditDeta.lastModified,
        source: ((_props$application3 = props.application) === null || _props$application3 === void 0 ? void 0 : _props$application3.channel) || ""
      };
      return /*#__PURE__*/React.createElement(PTWFCaption, {
        data: caption
      });
    } else if (checkpoint.state) {
      var _checkpoint$auditDeta2, _checkpoint$assignes, _checkpoint$assignes$, _checkpoint$assignes2, _checkpoint$assignes3;
      const caption = {
        date: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$auditDeta2 = checkpoint.auditDetails) === null || _checkpoint$auditDeta2 === void 0 ? void 0 : _checkpoint$auditDeta2.lastModified,
        name: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes = checkpoint.assignes) === null || _checkpoint$assignes === void 0 ? void 0 : (_checkpoint$assignes$ = _checkpoint$assignes[0]) === null || _checkpoint$assignes$ === void 0 ? void 0 : _checkpoint$assignes$.name,
        mobileNumber: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes2 = checkpoint.assignes) === null || _checkpoint$assignes2 === void 0 ? void 0 : (_checkpoint$assignes3 = _checkpoint$assignes2[0]) === null || _checkpoint$assignes3 === void 0 ? void 0 : _checkpoint$assignes3.mobileNumber,
        comment: t(checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.comment),
        wfComment: checkpoint.wfComment,
        thumbnailsToShow: checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.thumbnailsToShow
      };
      return /*#__PURE__*/React.createElement(PTWFCaption, {
        data: caption,
        OpenImage: OpenImage
      });
    } else if (checkpoint.status === "ACTIVE" && (props === null || props === void 0 ? void 0 : props.userType) === 'citizen') {
      var _props$application4;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Link, {
        to: `/digit-ui/citizen/pt/property/properties/${props === null || props === void 0 ? void 0 : (_props$application4 = props.application) === null || _props$application4 === void 0 ? void 0 : _props$application4.propertyId}`
      }, /*#__PURE__*/React.createElement(ActionLinks, null, t("PT_VIEW_PROPERTY_DETAILS"))));
    } else {
      var _props$application5, _checkpoint$assigner;
      const caption = {
        date: Digit.DateUtils.ConvertTimestampToDate((_props$application5 = props.application) === null || _props$application5 === void 0 ? void 0 : _props$application5.auditDetails.lastModified),
        name: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assigner = checkpoint.assigner) === null || _checkpoint$assigner === void 0 ? void 0 : _checkpoint$assigner.name,
        comment: t(checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.comment)
      };
      return /*#__PURE__*/React.createElement(PTWFCaption, {
        data: caption
      });
    }
  };
  const showNextActions = nextActions => {
    var _nextAction, _props$application6;
    let nextAction = nextActions[0];
    const next = nextActions.map(action => action.action);
    if (next.includes("PAY") || next.includes("EDIT")) {
      let currentIndex = next.indexOf("EDIT") || next.indexOf("PAY");
      currentIndex = currentIndex != -1 ? currentIndex : next.indexOf("PAY");
      nextAction = nextActions[currentIndex];
    }
    switch ((_nextAction = nextAction) === null || _nextAction === void 0 ? void 0 : _nextAction.action) {
      case "PAY":
        return (props === null || props === void 0 ? void 0 : props.userType) === 'citizen' ? /*#__PURE__*/React.createElement("div", {
          style: {
            marginTop: "1em",
            bottom: "0px",
            width: "100%",
            marginBottom: "1.2em"
          }
        }, /*#__PURE__*/React.createElement(Link, {
          to: {
            pathname: `/digit-ui/citizen/payment/my-bills/${businessService}/${props.id}`,
            state: {
              tenantId: props.application.tenantId,
              propertyId: props === null || props === void 0 ? void 0 : (_props$application6 = props.application) === null || _props$application6 === void 0 ? void 0 : _props$application6.propertyId
            }
          }
        }, /*#__PURE__*/React.createElement(SubmitBar, {
          label: t("CS_APPLICATION_DETAILS_MAKE_PAYMENT")
        }))) : null;
      case "EDIT":
        return /*#__PURE__*/React.createElement("div", {
          style: {
            marginTop: "1em",
            bottom: "0px",
            width: "100%",
            marginBottom: "1.2em"
          }
        }, businessService != "PT.MUTATION" && /*#__PURE__*/React.createElement(Link, {
          to: {
            pathname: `/digit-ui/citizen/pt/property/edit-application/action=edit-${businessService}/${props.id}`,
            state: {
              tenantId: props.application.tenantId
            }
          }
        }, /*#__PURE__*/React.createElement(SubmitBar, {
          label: t("CS_APPLICATION_DETAILS_EDIT")
        })));
      case "SUBMIT_FEEDBACK":
        return /*#__PURE__*/React.createElement("div", {
          style: {
            marginTop: "24px"
          }
        }, /*#__PURE__*/React.createElement(Link, {
          to: `/digit-ui/citizen/fsm/rate/${props.id}`
        }, /*#__PURE__*/React.createElement(SubmitBar, {
          label: t("CS_APPLICATION_DETAILS_RATE")
        })));
      default:
        return null;
    }
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isLoading && /*#__PURE__*/React.createElement(Fragment$1, null, (data === null || data === void 0 ? void 0 : (_data$timeline = data.timeline) === null || _data$timeline === void 0 ? void 0 : _data$timeline.length) > 0 && /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      marginBottom: "16px",
      marginTop: "32px"
    }
  }, t("CS_APPLICATION_DETAILS_APPLICATION_TIMELINE")), data !== null && data !== void 0 && data.timeline && (data === null || data === void 0 ? void 0 : (_data$timeline2 = data.timeline) === null || _data$timeline2 === void 0 ? void 0 : _data$timeline2.length) === 1 ? /*#__PURE__*/React.createElement(CheckPoint, {
    isCompleted: true,
    label: t((data === null || data === void 0 ? void 0 : (_data$timeline$ = data.timeline[0]) === null || _data$timeline$ === void 0 ? void 0 : _data$timeline$.state) && `WF_${businessService}_${data.timeline[0].state}` || "NA"),
    customChild: getTimelineCaptions(data === null || data === void 0 ? void 0 : data.timeline[0])
  }) : /*#__PURE__*/React.createElement(ConnectingCheckPoints, null, (data === null || data === void 0 ? void 0 : data.timeline) && (data === null || data === void 0 ? void 0 : data.timeline.map((checkpoint, index, arr) => {
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, /*#__PURE__*/React.createElement(CheckPoint, {
      keyValue: index,
      isCompleted: index === 0,
      label: checkpoint.state ? t(`WF_${businessService}_${checkpoint.state}`) : "NA",
      customChild: getTimelineCaptions(checkpoint)
    }));
  })))), data && showNextActions(data === null || data === void 0 ? void 0 : data.nextActions));
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var lodash = createCommonjsModule(function (module, exports) {
  (function () {
    var undefined$1;
    var VERSION = '4.17.21';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
      HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrimStart = /^\s+/;
    var reWhitespace = /\s/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      '\u0100': 'A',
      '\u0102': 'A',
      '\u0104': 'A',
      '\u0101': 'a',
      '\u0103': 'a',
      '\u0105': 'a',
      '\u0106': 'C',
      '\u0108': 'C',
      '\u010a': 'C',
      '\u010c': 'C',
      '\u0107': 'c',
      '\u0109': 'c',
      '\u010b': 'c',
      '\u010d': 'c',
      '\u010e': 'D',
      '\u0110': 'D',
      '\u010f': 'd',
      '\u0111': 'd',
      '\u0112': 'E',
      '\u0114': 'E',
      '\u0116': 'E',
      '\u0118': 'E',
      '\u011a': 'E',
      '\u0113': 'e',
      '\u0115': 'e',
      '\u0117': 'e',
      '\u0119': 'e',
      '\u011b': 'e',
      '\u011c': 'G',
      '\u011e': 'G',
      '\u0120': 'G',
      '\u0122': 'G',
      '\u011d': 'g',
      '\u011f': 'g',
      '\u0121': 'g',
      '\u0123': 'g',
      '\u0124': 'H',
      '\u0126': 'H',
      '\u0125': 'h',
      '\u0127': 'h',
      '\u0128': 'I',
      '\u012a': 'I',
      '\u012c': 'I',
      '\u012e': 'I',
      '\u0130': 'I',
      '\u0129': 'i',
      '\u012b': 'i',
      '\u012d': 'i',
      '\u012f': 'i',
      '\u0131': 'i',
      '\u0134': 'J',
      '\u0135': 'j',
      '\u0136': 'K',
      '\u0137': 'k',
      '\u0138': 'k',
      '\u0139': 'L',
      '\u013b': 'L',
      '\u013d': 'L',
      '\u013f': 'L',
      '\u0141': 'L',
      '\u013a': 'l',
      '\u013c': 'l',
      '\u013e': 'l',
      '\u0140': 'l',
      '\u0142': 'l',
      '\u0143': 'N',
      '\u0145': 'N',
      '\u0147': 'N',
      '\u014a': 'N',
      '\u0144': 'n',
      '\u0146': 'n',
      '\u0148': 'n',
      '\u014b': 'n',
      '\u014c': 'O',
      '\u014e': 'O',
      '\u0150': 'O',
      '\u014d': 'o',
      '\u014f': 'o',
      '\u0151': 'o',
      '\u0154': 'R',
      '\u0156': 'R',
      '\u0158': 'R',
      '\u0155': 'r',
      '\u0157': 'r',
      '\u0159': 'r',
      '\u015a': 'S',
      '\u015c': 'S',
      '\u015e': 'S',
      '\u0160': 'S',
      '\u015b': 's',
      '\u015d': 's',
      '\u015f': 's',
      '\u0161': 's',
      '\u0162': 'T',
      '\u0164': 'T',
      '\u0166': 'T',
      '\u0163': 't',
      '\u0165': 't',
      '\u0167': 't',
      '\u0168': 'U',
      '\u016a': 'U',
      '\u016c': 'U',
      '\u016e': 'U',
      '\u0170': 'U',
      '\u0172': 'U',
      '\u0169': 'u',
      '\u016b': 'u',
      '\u016d': 'u',
      '\u016f': 'u',
      '\u0171': 'u',
      '\u0173': 'u',
      '\u0174': 'W',
      '\u0175': 'w',
      '\u0176': 'Y',
      '\u0177': 'y',
      '\u0178': 'Y',
      '\u0179': 'Z',
      '\u017b': 'Z',
      '\u017d': 'Z',
      '\u017a': 'z',
      '\u017c': 'z',
      '\u017e': 'z',
      '\u0132': 'IJ',
      '\u0133': 'ij',
      '\u0152': 'Oe',
      '\u0153': 'oe',
      '\u0149': "'n",
      '\u017f': 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };
    var freeParseFloat = parseFloat,
      freeParseInt = parseInt;
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports =  exports && !exports.nodeType && exports;
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function () {
      try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
        length = array == null ? 0 : array.length;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arrayEach(array, iteratee) {
      var index = -1,
        length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;
      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEvery(array, predicate) {
      var index = -1,
        length = array == null ? 0 : array.length;
      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter(array, predicate) {
      var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
        length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1,
        length = values.length,
        offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
        length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index = -1,
        length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty('length');
    function asciiToArray(string) {
      return string.split('');
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
        length = array.length;
      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined$1 : object[key];
      };
    }
    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined$1 : object[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function baseSum(array, iteratee) {
      var result,
        index = -1,
        length = array.length;
      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined$1) {
          result = result === undefined$1 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes(n, iteratee) {
      var index = -1,
        result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
    }
    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }
    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
        length = strSymbols.length;
      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }
    function countHolders(array, placeholder) {
      var length = array.length,
        result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }
    function getValue(object, key) {
      return object == null ? undefined$1 : object[key];
    }
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function iteratorToArray(iterator) {
      var data,
        result = [];
      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1,
        result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }
    function replaceHolders(array, placeholder) {
      var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    function setToArray(set) {
      var index = -1,
        result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }
    function setToPairs(set) {
      var index = -1,
        result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
        length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;
      var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined$1,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
        symIterator = Symbol ? Symbol.iterator : undefined$1,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;
      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? Symbol.prototype : undefined$1,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
        symbolToString = symbolProto ? symbolProto.toString : undefined$1;
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate = function () {
        function object() {}
        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = undefined$1;
          return result;
        };
      }();
      function baseLodash() {}
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }
      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }
      function lazyValue() {
        var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];
        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
            value = array[index];
          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);
            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash(entries) {
        var index = -1,
          length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined$1 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1,
          length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__,
          index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__,
          index = assocIndexOf(data, key);
        return index < 0 ? undefined$1 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__,
          index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1,
          length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
          size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index = -1,
          length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__,
          result = data['delete'](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined$1;
      }
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }
      function baseAt(object, paths) {
        var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;
        while (++index < length) {
          result[index] = skip ? undefined$1 : get(object, paths[index]);
        }
        return result;
      }
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined$1) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined$1) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined$1) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;
          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined$1 : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }
      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
            predicate = source[key],
            value = object[key];
          if (value === undefined$1 && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function () {
          func.apply(undefined$1, args);
        }, wait);
      }
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;
        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer: while (++index < length) {
          var value = array[index],
            computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
          length = array.length;
        while (++index < length) {
          var value = array[index],
            current = iteratee(value);
          if (current != null && (computed === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
              result = value;
          }
        }
        return result;
      }
      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined$1 || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
          length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }
      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }
      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
          length = path.length;
        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return index && index == length ? object : undefined$1;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined$1 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;
        }
        array = arrays[0];
        var index = -1,
          seen = caches[0];
        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
            computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined$1 : apply(func, object, args);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
          length = index,
          noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
            objValue = object[key],
            srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === undefined$1 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
          result = [];
        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee) {
        var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function (srcValue, key) {
          stack || (stack = new Stack());
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined$1;
            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined$1;
        var isCommon = newValue === undefined$1;
        if (isCommon) {
          var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined$1;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function (iteratee) {
            if (isArray(iteratee)) {
              return function (value) {
                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              };
            }
            return iteratee;
          });
        } else {
          iteratees = [identity];
        }
        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }
      function basePickBy(object, paths, predicate) {
        var index = -1,
          length = paths.length,
          result = {};
        while (++index < length) {
          var path = paths[index],
            value = baseGet(object, path);
          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }
      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;
        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;
          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
          lastIndex = length - 1;
        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);
        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);
        return result;
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);
        var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
            newValue = value;
          if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice(array, start, end) {
        var index = -1,
          length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }
      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
          high = array == null ? low : array.length;
        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
              computed = array[mid];
            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        var low = 0,
          high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee(value);
        var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined$1;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined$1,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array, iteratee) {
        var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];
        while (++index < length) {
          var value = array[index],
            computed = iteratee ? iteratee(value) : value;
          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer: while (++index < length) {
          var value = array[index],
            computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
          index = fromRight ? length : -1;
        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
          result = Array(length);
        while (++index < length) {
          var array = arrays[index],
            othIndex = -1;
          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};
        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined$1;
          assignFunc(result, props[index], value);
        }
        return result;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      var castRest = baseRest;
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined$1 ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }
      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$1,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined$1,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object, other, orders) {
        var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;
        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }
      function copyArray(source, array) {
        var index = -1,
          length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
          length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;
          if (newValue === undefined$1) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined$1,
            guard = length > 2 ? sources[2] : undefined$1;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined$1 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);
          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }
      function createCtor(Ctor) {
        return function () {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);
          while (index--) {
            args[index] = arguments[index];
          }
          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;
          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);
          }
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function (key) {
              return iteratee(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined$1;
            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function () {
            var args = arguments,
              value = args[0];
            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
              result = length ? funcs[index].apply(this, args) : value;
            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined$1 : createCtor(func);
        function wrapper() {
          var length = arguments.length,
            args = Array(length),
            index = length;
          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }
          var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;
          if (value === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value !== undefined$1) {
            result = value;
          }
          if (other !== undefined$1) {
            if (result === undefined$1) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }
      function createPadding(length, chars) {
        chars = chars === undefined$1 ? ' ' : baseToString(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined$1;
          }
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined$1,
          newHoldersRight = isCurry ? undefined$1 : holders,
          newPartials = isCurry ? partials : undefined$1,
          newPartialsRight = isCurry ? undefined$1 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }
      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };
      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined$1 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
            holdersRight = holders;
          partials = holders = undefined$1;
        }
        var data = isBindKey ? undefined$1 : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined$1, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined$1 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined$1 : value;
      }
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1,
          result = true,
          seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index],
            othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + '';
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
            othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
            othCtor = other.constructor;
          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + '');
      }
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
        while (length--) {
          var data = array[length],
            otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }
      function getMatchData(object) {
        var result = keys(object),
          length = result.length;
        while (length--) {
          var key = result[length],
            value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined$1;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined$1;
          var unmasked = true;
        } catch (e) {}
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function (value) {
          var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined$1,
            ctorString = Ctor ? toSource(Ctor) : '';
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      function getView(start, end, transforms) {
        var index = -1,
          length = transforms.length;
        while (++index < length) {
          var data = transforms[index],
            size = data.size;
          switch (data.type) {
            case 'drop':
              start += size;
              break;
            case 'dropRight':
              end -= size;
              break;
            case 'take':
              end = nativeMin(end, start + size);
              break;
            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }
        return {
          'start': start,
          'end': end
        };
      }
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
          length = path.length,
          result = false;
        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      function initCloneArray(array) {
        var length = array.length,
          result = new array.constructor(length);
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func),
          other = lodash[funcName];
        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMaskable = coreJsData ? isFunction : stubFalse;
      function isPrototype(value) {
        var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined$1 || key in Object(object));
        };
      }
      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      function mergeData(data, source) {
        var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        value = source[7];
        if (value) {
          data[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        if (data[9] == null) {
          data[9] = source[9];
        }
        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }
      function reorder(array, indexes) {
        var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);
        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
        }
        return array;
      }
      function safeGet(object, key) {
        if (key === 'constructor' && typeof object[key] === 'function') {
          return;
        }
        if (key == '__proto__') {
          return;
        }
        return object[key];
      }
      var setData = shortOut(baseSetData);
      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut(func) {
        var count = 0,
          lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }
      function shuffleSelf(array, size) {
        var index = -1,
          length = array.length,
          lastIndex = length - 1;
        size = size === undefined$1 ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
            value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }
      var stringToPath = memoizeCapped(function (string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push('');
        }
        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + '';
          } catch (e) {}
        }
        return '';
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }
      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined$1) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));
        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }
        return result;
      }
      function compact(array) {
        var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];
        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
          array = arguments[0],
          index = length;
        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }
      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
      });
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }
      function fromPairs(pairs) {
        var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};
        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }
      function head(array) {
        return array && array.length ? array[0] : undefined$1;
      }
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }
      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
        if (iteratee === last(mapped)) {
          iteratee = undefined$1;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
      });
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined$1;
      }
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }
      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined$1;
      }
      var pull = baseRest(pullAll);
      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }
      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }
      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined$1, comparator) : array;
      }
      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
          indexes = [],
          length = array.length;
        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$1 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }
      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });
      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
      }
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function (group) {
          return apply(iteratee, undefined$1, group);
        });
      }
      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }
      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined$1;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
        return unzipWith(arrays, iteratee);
      });
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function (object) {
            return baseAt(object, paths);
          };
        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined$1
        });
        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined$1);
          }
          return array;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
          value = done ? undefined$1 : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result,
          parent = this;
        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined$1;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }
      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now = ctxNow || function () {
        return root.Date.now();
      };
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined$1 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
      }
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$1;
          }
          return result;
        };
      }
      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curry.placeholder;
        return result;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }
      function debounce(func, wait, options) {
        var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs,
            thisArg = lastThis;
          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined$1;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$1;
          return result;
        }
        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }
        function flush() {
          return timerId === undefined$1 ? result : trailingEdge(now());
        }
        function debounced() {
          var time = now(),
            isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function () {
          var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function () {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once(func) {
        return before(2, func);
      }
      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
            length = nativeMin(args.length, funcsLength);
          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined$1 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
            otherArgs = castSlice(args, 0, start);
          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options) {
        var leading = true,
          trailing = true;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        var result = customizer ? customizer(value, other) : undefined$1;
        return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
      }
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }
      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }
      function isNaN(value) {
        return isNumber(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
      function isNull(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function isUndefined(value) {
        return value === undefined$1;
      }
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result = toFinite(value),
          remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }
      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }
      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined$1;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === undefined$1 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply(mergeWith, undefined$1, args);
      });
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }
      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
      function get(object, path, defaultValue) {
        var result = object == null ? undefined$1 : baseGet(object, path);
        return result === undefined$1 ? defaultValue : result;
      }
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }
        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }
        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }
      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }
      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
          length = path.length;
        if (!length) {
          length = 1;
          object = undefined$1;
        }
        while (++index < length) {
          var value = object == null ? undefined$1 : object[toKey(path[index])];
          if (value === undefined$1) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseSet(object, path, value, customizer);
      }
      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
      function clamp(number, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined$1;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined$1 ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }
      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }
      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }
      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }
      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }
      function replace() {
        var args = arguments,
          string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }
      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }
      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }
      function template(string, options, guard) {
        var settings = lodash.templateSettings;
        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined$1;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);
        var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty.call(options, 'variable') && options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        } else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined$1, importsValues);
        });
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }
      function toLower(value) {
        return toString(value).toLowerCase();
      }
      function toUpper(value) {
        return toString(value).toUpperCase();
      }
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return baseTrim(string);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.slice(0, trimmedEndIndex(string) + 1);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);
        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
        if (separator === undefined$1) {
          return result + omission;
        }
        if (strSymbols) {
          end += result.length - end;
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
              substring = result;
            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }
      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }
      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined$1 : pattern;
        if (pattern === undefined$1) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined$1, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }
      function constant(value) {
        return function () {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });
      function mixin(object, source, options) {
        var props = keys(source),
          methodNames = baseFunctions(source, props);
        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }
      function noop() {}
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined$1 : baseGet(object, path);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return '';
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }
      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');
      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;
      }
      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined$1;
      }
      function mean(array) {
        return baseMean(array, identity);
      }
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }
      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;
      }
      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined$1;
      }
      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }
      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };
        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');
        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');
        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };
      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });
      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined$1) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };
      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);
          var interceptor = function (value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };
          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined$1
            });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash.prototype[methodName] = function () {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + '';
          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined$1
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;
      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    };
    var _ = runInContext();
    if (freeModule) {
      (freeModule.exports = _)._ = _;
      freeExports._ = _;
    } else {
      root._ = _;
    }
  }).call(commonjsGlobal);
});

const PTSelectAddress = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  setError,
  clearErrors,
  formState
}) => {
  var _formData$address5;
  const allCities = Digit.Hooks.pt.useTenants();
  let tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    pathname
  } = useLocation();
  const presentInModifyApplication = pathname.includes("modify");
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  if (presentInModifyApplication) isEditProperty = true;
  if (formData !== null && formData !== void 0 && formData.isUpdateProperty) isEditProperty = true;
  const {
    pincode,
    city
  } = (formData === null || formData === void 0 ? void 0 : formData.address) || "";
  const cities = userType === "employee" ? allCities.filter(city => city.code === tenantId) : pincode ? allCities.filter(city => {
    var _city$pincode;
    return city === null || city === void 0 ? void 0 : (_city$pincode = city.pincode) === null || _city$pincode === void 0 ? void 0 : _city$pincode.some(pin => pin == pincode);
  }) : allCities;
  const [selectedCity, setSelectedCity] = useState(() => {
    var _formData$address;
    return (formData === null || formData === void 0 ? void 0 : (_formData$address = formData.address) === null || _formData$address === void 0 ? void 0 : _formData$address.city) || null;
  });
  const {
    data: fetchedLocalities
  } = Digit.Hooks.useBoundaryLocalities(selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.code, "revenue", {
    enabled: !!selectedCity
  }, t);
  const [localities, setLocalities] = useState();
  const [selectedLocality, setSelectedLocality] = useState();
  useEffect(() => {
    if (userType === "employee" && presentInModifyApplication && localities !== null && localities !== void 0 && localities.length) {
      var _formData$originalDat, _formData$originalDat2, _formData$originalDat3;
      const code = formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : (_formData$originalDat2 = _formData$originalDat.address) === null || _formData$originalDat2 === void 0 ? void 0 : (_formData$originalDat3 = _formData$originalDat2.locality) === null || _formData$originalDat3 === void 0 ? void 0 : _formData$originalDat3.code;
      const _locality = localities === null || localities === void 0 ? void 0 : localities.filter(e => e.code === code)[0];
      setValue("locality", _locality);
    }
  }, [localities]);
  useEffect(() => {
    if (cities) {
      if (cities.length === 1) {
        setSelectedCity(cities[0]);
      }
    }
  }, [cities]);
  useEffect(() => {
    if (selectedCity && fetchedLocalities) {
      var _formData$address2, _formData$address3;
      let __localityList = fetchedLocalities;
      let filteredLocalityList = [];
      if (formData !== null && formData !== void 0 && (_formData$address2 = formData.address) !== null && _formData$address2 !== void 0 && _formData$address2.locality) {
        setSelectedLocality(formData.address.locality);
      }
      if (formData !== null && formData !== void 0 && (_formData$address3 = formData.address) !== null && _formData$address3 !== void 0 && _formData$address3.pincode) {
        var _formData$address4;
        filteredLocalityList = __localityList.filter(obj => {
          var _obj$pincode;
          return (_obj$pincode = obj.pincode) === null || _obj$pincode === void 0 ? void 0 : _obj$pincode.find(item => item == formData.address.pincode);
        });
        if (!(formData !== null && formData !== void 0 && (_formData$address4 = formData.address) !== null && _formData$address4 !== void 0 && _formData$address4.locality)) setSelectedLocality();
      }
      setLocalities(() => filteredLocalityList.length > 0 ? filteredLocalityList : __localityList);
      if (filteredLocalityList.length === 1) {
        setSelectedLocality(filteredLocalityList[0]);
        if (userType === "employee") {
          onSelect(config.key, {
            ...formData[config.key],
            locality: filteredLocalityList[0]
          });
        }
      }
    }
  }, [selectedCity, formData === null || formData === void 0 ? void 0 : (_formData$address5 = formData.address) === null || _formData$address5 === void 0 ? void 0 : _formData$address5.pincode, fetchedLocalities]);
  function selectCity(city) {
    setSelectedLocality(null);
    setLocalities(null);
    setSelectedCity(city);
  }
  function selectLocality(locality) {
    var _formData$address6;
    if (formData !== null && formData !== void 0 && (_formData$address6 = formData.address) !== null && _formData$address6 !== void 0 && _formData$address6.locality) {
      formData.address["locality"] = locality;
    }
    setSelectedLocality(locality);
    if (userType === "employee") {
      onSelect(config.key, {
        ...formData[config.key],
        locality: locality
      });
    }
  }
  function onSubmit() {
    onSelect(config.key, {
      city: selectedCity,
      locality: selectedLocality
    });
  }
  const {
    control,
    formState: localFormState,
    watch,
    setError: setLocalError,
    clearErrors: clearLocalErrors,
    setValue
  } = useForm();
  const formValue = watch();
  const {
    errors
  } = localFormState;
  const errorStyle = {
    width: "70%",
    marginLeft: "30%",
    fontSize: "12px",
    marginTop: "-21px"
  };
  useEffect(() => {
    if (userType === "employee") {
      let keys = Object.keys(formValue);
      const part = {};
      keys.forEach(key => {
        var _formData$config$key;
        return part[key] = (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key[key];
      });
      if (!lodash.isEqual(formValue, part)) onSelect(config.key, {
        ...formData[config.key],
        ...formValue
      });
      for (let key in formValue) {
        if (!formValue[key] && !(localFormState !== null && localFormState !== void 0 && localFormState.errors[key])) {
          setLocalError(key, {
            type: `${key.toUpperCase()}_REQUIRED`,
            message: t(`CORE_COMMON_REQUIRED_ERRMSG`)
          });
        } else if (formValue[key] && localFormState.errors[key]) {
          clearLocalErrors([key]);
        }
      }
    }
  }, [formValue]);
  useEffect(() => {
    if (userType === "employee") {
      var _formState$errors, _formState$errors2;
      const errorsPresent = !!Object.keys(localFormState.errors).lengtha;
      if (errorsPresent && !((_formState$errors = formState.errors) !== null && _formState$errors !== void 0 && _formState$errors[config.key])) setError(config.key, {
        type: "required"
      });else if (!errorsPresent && (_formState$errors2 = formState.errors) !== null && _formState$errors2 !== void 0 && _formState$errors2[config.key]) clearErrors(config.key);
    }
  }, [localFormState]);
  if (userType === "employee") {
    var _errors$city, _errors$locality;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      className: "card-label-smaller"
    }, t("MYCITY_CODE_LABEL") + " *"), /*#__PURE__*/React.createElement(Controller, {
      name: "city",
      defaultValue: (cities === null || cities === void 0 ? void 0 : cities.length) === 1 ? cities[0] : selectedCity,
      control: control,
      render: props => /*#__PURE__*/React.createElement(Dropdown, {
        className: "form-field",
        selected: props.value,
        disable: isEditProperty ? isEditProperty : (cities === null || cities === void 0 ? void 0 : cities.length) === 1,
        option: cities,
        select: props.onChange,
        optionKey: "code",
        onBlur: props.onBlur,
        t: t
      })
    })), /*#__PURE__*/React.createElement(CardLabelError, {
      style: errorStyle
    }, localFormState.touched.city ? errors === null || errors === void 0 ? void 0 : (_errors$city = errors.city) === null || _errors$city === void 0 ? void 0 : _errors$city.message : ""), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      className: "card-label-smaller"
    }, t("PT_LOCALITY_LABEL") + " *"), /*#__PURE__*/React.createElement(Controller, {
      name: "locality",
      defaultValue: null,
      control: control,
      render: props => /*#__PURE__*/React.createElement(Dropdown, {
        className: "form-field",
        selected: props.value,
        option: localities,
        select: props.onChange,
        onBlur: props.onBlur,
        optionKey: "i18nkey",
        t: t,
        disable: isEditProperty ? isEditProperty : false
      })
    })), /*#__PURE__*/React.createElement(CardLabelError, {
      style: errorStyle
    }, localFormState.touched.locality ? errors === null || errors === void 0 ? void 0 : (_errors$locality = errors.locality) === null || _errors$locality === void 0 ? void 0 : _errors$locality.message : ""));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? window.location.href.includes("/citizen/pt/property/property-mutation") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onSelect: onSubmit,
    t: t,
    isDisabled: selectedLocality ? false : true
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("MYCITY_CODE_LABEL")} `), /*#__PURE__*/React.createElement("span", {
    className: "form-pt-dropdown-only"
  }, /*#__PURE__*/React.createElement(RadioOrSelect, {
    options: cities.sort((a, b) => a.name.localeCompare(b.name)),
    selectedOption: selectedCity,
    optionKey: "i18nKey",
    onSelect: selectCity,
    t: t,
    isPTFlow: true,
    disabled: isEditProperty
  })), selectedCity && localities && /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_LOCALITY_LABEL")} `), selectedCity && localities && /*#__PURE__*/React.createElement("span", {
    className: "form-pt-dropdown-only"
  }, /*#__PURE__*/React.createElement(RadioOrSelect, {
    dropdownStyle: {
      paddingBottom: "20px"
    },
    isMandatory: config.isMandatory,
    options: localities.sort((a, b) => a.name.localeCompare(b.name)),
    selectedOption: selectedLocality,
    optionKey: "i18nkey",
    onSelect: selectLocality,
    t: t,
    labelKey: "",
    disabled: isEditProperty
  })))));
};

const PTSelectGeolocation = ({
  t,
  config,
  onSelect,
  formData: _formData = {}
}) => {
  var _formData$address, _formData$address2, _defaultConfig$Proper;
  const [pincode, setPincode] = useState((_formData === null || _formData === void 0 ? void 0 : (_formData$address = _formData.address) === null || _formData$address === void 0 ? void 0 : _formData$address.pincode) || "");
  const [geoLocation, setGeoLocation] = useState((_formData === null || _formData === void 0 ? void 0 : (_formData$address2 = _formData.address) === null || _formData$address2 === void 0 ? void 0 : _formData$address2.geoLocation) || {});
  const tenants = Digit.Hooks.pt.useTenants();
  const [pincodeServicability, setPincodeServicability] = useState(null);
  const isEditProperty = (_formData === null || _formData === void 0 ? void 0 : _formData.isEditProperty) || false;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: defaultConfig = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "MapConfig");
  const defaultcoord = defaultConfig === null || defaultConfig === void 0 ? void 0 : (_defaultConfig$Proper = defaultConfig.PropertyTax) === null || _defaultConfig$Proper === void 0 ? void 0 : _defaultConfig$Proper.MapConfig;
  let defaultcoord1 = defaultcoord ? defaultcoord[0] : {};
  const onSkip = () => onSelect();
  const onChange = (code, location) => {
    setPincodeServicability(null);
    const foundValue = tenants === null || tenants === void 0 ? void 0 : tenants.find(obj => {
      var _obj$pincode;
      return (_obj$pincode = obj.pincode) === null || _obj$pincode === void 0 ? void 0 : _obj$pincode.find(item => item == code);
    });
    if (!foundValue) {
      setPincodeServicability("PT_COMMON_PINCODE_NOT_SERVICABLE");
      setPincode("");
      setGeoLocation({});
    } else {
      setPincode(code);
      setGeoLocation(location);
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(LocationSearchCard, {
    header: t("PT_GEOLOCATON_HEADER"),
    cardText: t("PT_GEOLOCATION_TEXT"),
    nextText: t("PT_COMMON_NEXT"),
    skipAndContinueText: t("CORE_COMMON_SKIP_CONTINUE"),
    skip: onSkip,
    t: t,
    position: geoLocation,
    onSave: () => onSelect(config.key, {
      geoLocation,
      pincode
    }),
    onChange: (code, location) => onChange(code, location),
    disabled: pincode === "" || isEditProperty,
    forcedError: t(pincodeServicability),
    cardBodyStyle: cardBodyStyle,
    isPTDefault: true,
    PTdefaultcoord: defaultcoord1
  }));
};

const PTSelectStreet = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  formState,
  setError,
  clearErrors
}) => {
  const onSkip = () => onSelect();
  const [focusIndex, setFocusIndex] = useState({
    index: -1,
    type: ""
  });
  const {
    control,
    formState: localFormState,
    watch,
    setError: setLocalError,
    clearErrors: clearLocalErrors,
    setValue,
    trigger
  } = useForm();
  const formValue = watch();
  const {
    errors
  } = localFormState;
  const checkLocation = window.location.href.includes("tl/new-application") || window.location.href.includes("tl/renew-application-details");
  const isRenewal = window.location.href.includes("edit-application") || window.location.href.includes("tl/renew-application-details");
  let inputs;
  if (window.location.href.includes("tl")) {
    inputs = config.inputs;
    config.inputs[0].disable = window.location.href.includes("edit-application");
    config.inputs[1].disable = window.location.href.includes("edit-application");
  } else {
    inputs = [{
      label: "PT_PROPERTY_ADDRESS_STREET_NAME",
      type: "text",
      name: "street",
      validation: {
        pattern: "[a-zA-Z0-9 !@#$%^&*()_+\-={};':\\\\|,.<>/?]{1,64}",
        title: t("CORE_COMMON_STREET_INVALID")
      }
    }, {
      label: "PT_PROPERTY_ADDRESS_HOUSE_NO",
      type: "text",
      name: "doorNo",
      validation: {
        pattern: "[a-zA-Z0-9 !@#$%^&*()_+\-={};':\\\\|,.<>/?]{1,64}",
        title: t("CORE_COMMON_DOOR_INVALID")
      }
    }];
  }
  const convertValidationToRules = ({
    validation,
    name,
    messages
  }) => {
    if (validation) {
      let {
        pattern: valPattern,
        maxlength,
        minlength,
        required: valReq
      } = validation || {};
      let pattern = value => {
        if (valPattern) {
          var _RegExp;
          if (valPattern instanceof RegExp) return valPattern.test(value) ? true : (messages === null || messages === void 0 ? void 0 : messages.pattern) || `${name.toUpperCase()}_PATTERN`;else if (typeof valPattern === "string") return (_RegExp = new RegExp(valPattern)) !== null && _RegExp !== void 0 && _RegExp.test(value) ? true : (messages === null || messages === void 0 ? void 0 : messages.pattern) || `${name.toUpperCase()}_PATTERN`;
        }
        return true;
      };
      let maxLength = value => maxlength ? (value === null || value === void 0 ? void 0 : value.length) <= maxlength ? true : (messages === null || messages === void 0 ? void 0 : messages.maxlength) || `${name.toUpperCase()}_MAXLENGTH` : true;
      let minLength = value => minlength ? (value === null || value === void 0 ? void 0 : value.length) >= minlength ? true : (messages === null || messages === void 0 ? void 0 : messages.minlength) || `${name.toUpperCase()}_MINLENGTH` : true;
      let required = value => valReq ? !!value ? true : (messages === null || messages === void 0 ? void 0 : messages.required) || `${name.toUpperCase()}_REQUIRED` : true;
      return {
        pattern,
        required,
        minLength,
        maxLength
      };
    }
    return {};
  };
  useEffect(() => {
    trigger();
  }, []);
  useEffect(() => {
    if (userType === "employee") {
      var _formState$errors$con;
      if (Object.keys(errors).length && !lodash.isEqual(((_formState$errors$con = formState.errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.type) || {}, errors)) setError(config.key, {
        type: errors
      });else if (!Object.keys(errors).length && formState.errors[config.key]) clearErrors(config.key);
    }
  }, [errors]);
  useEffect(() => {
    const keys = Object.keys(formValue);
    const part = {};
    keys.forEach(key => {
      var _formData$config$key;
      return part[key] = (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key[key];
    });
    if (!lodash.isEqual(formValue, part)) {
      onSelect(config.key, {
        ...formData[config.key],
        ...formValue
      });
      trigger();
    }
  }, [formValue]);
  if (userType === "employee") {
    var _inputs;
    return (_inputs = inputs) === null || _inputs === void 0 ? void 0 : _inputs.map((input, index) => {
      var _formData$address;
      return /*#__PURE__*/React.createElement(LabelFieldPair, {
        key: index
      }, /*#__PURE__*/React.createElement(CardLabel, {
        className: "card-label-smaller"
      }, !checkLocation ? t(input.label) : `${t(input.label)}:`, config.isMandatory ? " * " : null), /*#__PURE__*/React.createElement("div", {
        className: "field"
      }, /*#__PURE__*/React.createElement(Controller, {
        control: control,
        defaultValue: formData === null || formData === void 0 ? void 0 : (_formData$address = formData.address) === null || _formData$address === void 0 ? void 0 : _formData$address[input.name],
        name: input.name,
        rules: {
          validate: convertValidationToRules(input)
        },
        render: _props => /*#__PURE__*/React.createElement(TextInput, Object.assign({
          id: input.name,
          key: input.name,
          value: _props.value,
          onChange: e => {
            setFocusIndex({
              index
            });
            _props.onChange(e.target.value);
          },
          onBlur: _props.onBlur,
          disable: isRenewal,
          autoFocus: (focusIndex === null || focusIndex === void 0 ? void 0 : focusIndex.index) == index
        }, input.validation))
      })));
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: {
      ...config,
      inputs
    },
    _defaultValues: {
      street: formData === null || formData === void 0 ? void 0 : formData.address.street,
      doorNo: formData === null || formData === void 0 ? void 0 : formData.address.doorNo
    },
    onSelect: data => onSelect(config.key, data),
    onSkip: onSkip,
    t: t
  }));
};

const PTSelectPincode = ({
  t,
  config,
  onSelect,
  formData: _formData = {},
  userType,
  register,
  errors,
  setError,
  formState,
  clearErrors
}) => {
  var _formData$address3;
  const tenants = Digit.Hooks.pt.useTenants();
  const {
    pathname
  } = useLocation();
  const presentInModifyApplication = pathname.includes("modify");
  const [pincode, setPincode] = useState(() => {
    var _formData$originalDat, _formData$originalDat2, _formData$address;
    if (presentInModifyApplication && userType === "employee") return (_formData === null || _formData === void 0 ? void 0 : (_formData$originalDat = _formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : (_formData$originalDat2 = _formData$originalDat.address) === null || _formData$originalDat2 === void 0 ? void 0 : _formData$originalDat2.pincode) || "";
    return (_formData === null || _formData === void 0 ? void 0 : (_formData$address = _formData.address) === null || _formData$address === void 0 ? void 0 : _formData$address.pincode) || "";
  });
  let isEditProperty = (_formData === null || _formData === void 0 ? void 0 : _formData.isEditProperty) || false;
  if (_formData !== null && _formData !== void 0 && _formData.isUpdateProperty) isEditProperty = true;
  const inputs = [{
    label: "PT_PROPERTY_ADDRESS_PINCODE",
    type: "text",
    name: "pincode",
    disable: isEditProperty,
    validation: {
      minlength: 6,
      maxlength: 7,
      pattern: "[0-9]+",
      max: "9999999",
      title: t("PT_PROPERTY_ADDRESS_PINCODE_INVALID")
    }
  }];
  const [pincodeServicability, setPincodeServicability] = useState(null);
  const [error, setLocalError] = useState("");
  useEffect(() => {
    var _formData$address2;
    if (_formData !== null && _formData !== void 0 && (_formData$address2 = _formData.address) !== null && _formData$address2 !== void 0 && _formData$address2.pincode) {
      setPincode(_formData.address.pincode);
    }
  }, [_formData === null || _formData === void 0 ? void 0 : (_formData$address3 = _formData.address) === null || _formData$address3 === void 0 ? void 0 : _formData$address3.pincode]);
  function onChange(e) {
    setPincode(e.target.value);
    setPincodeServicability(null);
    setLocalError("");
    let validPincode = Digit.Utils.getPattern("Pincode").test(e.target.value);
    if (userType === "employee") {
      if (e.target.value && !validPincode) setLocalError(t("ERR_DEFAULT_INPUT_FIELD_MSG"));
      if (validPincode) {
        const foundValue = tenants === null || tenants === void 0 ? void 0 : tenants.find(obj => {
          var _obj$pincode;
          return (_obj$pincode = obj.pincode) === null || _obj$pincode === void 0 ? void 0 : _obj$pincode.find(item => item.toString() === e.target.value);
        });
        if (!foundValue) setLocalError(t("PT_COMMON_PINCODE_NOT_SERVICABLE"));
      }
      onSelect(config.key, {
        ..._formData.address,
        pincode: e.target.value
      });
    }
  }
  const goNext = async data => {
    const foundValue = tenants === null || tenants === void 0 ? void 0 : tenants.find(obj => {
      var _obj$pincode2;
      return (_obj$pincode2 = obj.pincode) === null || _obj$pincode2 === void 0 ? void 0 : _obj$pincode2.find(item => item == (data === null || data === void 0 ? void 0 : data.pincode));
    });
    if (foundValue) {
      onSelect(config.key, {
        pincode
      });
    } else {
      setPincodeServicability("PT_COMMON_PINCODE_NOT_SERVICABLE");
    }
  };
  if (userType === "employee") {
    return inputs === null || inputs === void 0 ? void 0 : inputs.map((input, index) => {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, {
        key: index
      }, /*#__PURE__*/React.createElement(CardLabel, {
        className: "card-label-smaller"
      }, t(input.label)), /*#__PURE__*/React.createElement("div", {
        className: "field"
      }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
        key: input.name,
        value: pincode,
        onChange: onChange
      }, input.validation, {
        disable: presentInModifyApplication,
        autoFocus: presentInModifyApplication
      })))), error ? /*#__PURE__*/React.createElement(CardLabelError, {
        style: {
          width: "70%",
          marginLeft: "30%",
          fontSize: "12px",
          marginTop: "-21px"
        }
      }, error) : null);
    });
  }
  const onSkip = () => onSelect();
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: {
      ...config,
      inputs
    },
    onSelect: goNext,
    _defaultValues: {
      pincode
    },
    onChange: onChange,
    onSkip: onSkip,
    forcedError: t(pincodeServicability),
    isDisabled: !pincode || isEditProperty
  }));
};

const RentalDetails = ({
  t,
  config,
  onSelect,
  value,
  userType,
  formData
}) => {
  let index = window.location.href.split("/").pop();
  let validation = {};
  const onSkip = () => onSelect();
  let RentArea, AnnualRent;
  let setRentArea, setAnnualRent;
  if (!isNaN(index)) {
    [RentArea, setRentArea] = useState(formData.units && formData.units[index] && formData.units[index].RentArea);
    [AnnualRent, setAnnualRent] = useState(formData.units && formData.units[index] && formData.units[index].AnnualRent);
  } else {
    var _formData$Constructio, _formData$Constructio2;
    [RentArea, setRentArea] = useState((_formData$Constructio = formData.Constructiondetails) === null || _formData$Constructio === void 0 ? void 0 : _formData$Constructio.RentArea);
    [AnnualRent, setAnnualRent] = useState((_formData$Constructio2 = formData.Constructiondetails) === null || _formData$Constructio2 === void 0 ? void 0 : _formData$Constructio2.AnnualRent);
  }
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Menu,
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "RentalDetails");
  if (Menu) {
    var _Menu$PropertyTax, _Menu$PropertyTax$Ren, _Menu$PropertyTax2, _Menu$PropertyTax2$Re;
    config.texts.cardText = Menu !== null && Menu !== void 0 && (_Menu$PropertyTax = Menu.PropertyTax) !== null && _Menu$PropertyTax !== void 0 && (_Menu$PropertyTax$Ren = _Menu$PropertyTax.RentalDetails[0]) !== null && _Menu$PropertyTax$Ren !== void 0 && _Menu$PropertyTax$Ren.code ? `PT_ASSESSMENT_FLOW_RENTAL_DETAIL_${Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax2 = Menu.PropertyTax) === null || _Menu$PropertyTax2 === void 0 ? void 0 : (_Menu$PropertyTax2$Re = _Menu$PropertyTax2.RentalDetails[0]) === null || _Menu$PropertyTax2$Re === void 0 ? void 0 : _Menu$PropertyTax2$Re.code}` : "";
  }
  const [unitareaerror, setunitareaerror] = useState(null);
  const [areanotzeroerror, setareanotzeroerror] = useState(null);
  function setPropertyRentArea(e) {
    var _formData$PropertyTyp, _formData$PropertyTyp2, _formData$floordetail, _formData$landarea;
    setRentArea(e.target.value);
    setunitareaerror(null);
    setareanotzeroerror(null);
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.code) === "BUILTUP.INDEPENDENTPROPERTY") {
      var _formData$units$index, _formData$units$index2;
      let totalarea = parseInt((formData === null || formData === void 0 ? void 0 : (_formData$units$index = formData.units[index]) === null || _formData$units$index === void 0 ? void 0 : _formData$units$index.floorarea) || 0) + parseInt(e.target.value);
      if (parseInt(formData === null || formData === void 0 ? void 0 : (_formData$units$index2 = formData.units[index]) === null || _formData$units$index2 === void 0 ? void 0 : _formData$units$index2.builtUpArea) < totalarea) {
        setunitareaerror("PT_TOTUNITAREA_LESS_THAN_BUILTUP_ERR_MSG");
      }
    }
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp2 = formData.PropertyType) === null || _formData$PropertyTyp2 === void 0 ? void 0 : _formData$PropertyTyp2.code) === "BUILTUP.SHAREDPROPERTY" && parseInt(formData === null || formData === void 0 ? void 0 : (_formData$floordetail = formData.floordetails) === null || _formData$floordetail === void 0 ? void 0 : _formData$floordetail.builtUpArea) < parseInt(e.target.value) + parseInt((formData === null || formData === void 0 ? void 0 : (_formData$landarea = formData.landarea) === null || _formData$landarea === void 0 ? void 0 : _formData$landarea.floorarea) || "0")) {
      setunitareaerror("PT_RENTED_AREA_LESS_THAN_BUILTUP");
    }
    if (parseInt(e.target.value) == 0) {
      setareanotzeroerror("PT_AREA_NOT_0_MSG");
    }
  }
  function setPropertyAnnualRent(e) {
    setAnnualRent(e.target.value);
  }
  const getheaderCaption = () => {
    var _formData$PropertyTyp3;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp3 = formData.PropertyType) === null || _formData$PropertyTyp3 === void 0 ? void 0 : _formData$PropertyTyp3.i18nKey) === "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY") {
      return "PT_FLOOR_DETAILS_HEADER";
    } else {
      return `PROPERTYTAX_FLOOR_${index}_DETAILS`;
    }
  };
  const goNext = () => {
    if (!isNaN(index)) {
      let unit = formData.units && formData.units[index];
      let floordet = {
        ...unit,
        RentArea,
        AnnualRent
      };
      onSelect(config.key, floordet, false, index);
    } else {
      onSelect("Constructiondetails", {
        RentArea,
        AnnualRent
      });
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: (config.texts.headerCaption = getheaderCaption(), config),
    onSelect: goNext,
    onSkip: onSkip,
    forcedError: t(unitareaerror) || t(areanotzeroerror),
    t: t,
    isDisabled: unitareaerror || areanotzeroerror || !RentArea || !AnnualRent,
    showErrorBelowChildren: true
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FLOOR_DETAILS_RENTED_AREA_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    isMandatory: false,
    type: "number",
    optionKey: "i18nKey",
    name: "RentArea",
    value: RentArea,
    onChange: setPropertyRentArea
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_RENT_AREA_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FLOOR_DETAILS_ANNUAL_RENT_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    isMandatory: false,
    type: "number",
    optionKey: "i18nKey",
    name: "AnnualRent",
    value: AnnualRent,
    onChange: setPropertyAnnualRent
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_BUILT_AREA_ERROR_MESSAGE")
  }))), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_RENTAL_AREA_INFO_MSG")
  }));
};

const SelectInistitutionOwnerDetails = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  const isMutation = url.includes("property-mutation");
  let index = 0;
  let validation = {};
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [inistitutionName, setInistitutionName] = useState(formData.owners && formData.owners[index] && formData.owners[index].inistitutionName);
  const [inistitutetype, setInistitutetype] = useState(formData.owners && formData.owners[index] && formData.owners[index].inistitutetype);
  const [name, setName] = useState(formData.owners && formData.owners[index] && formData.owners[index].name);
  const [designation, setDesignation] = useState(formData.owners && formData.owners[index] && formData.owners[index].designation);
  const [mobileNumber, setMobileNumber] = useState(formData.owners && formData.owners[index] && formData.owners[index].mobileNumber);
  const [altContactNumber, setAltContactNumber] = useState(formData.owners && formData.owners[index] && formData.owners[index].altContactNumber);
  const [emailId, setEmailId] = useState(formData.owners && formData.owners[index] && formData.owners[index].emailId);
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  function setInistitution(e) {
    setInistitutionName(e.target.value);
  }
  function setTypeOfInistituteName(inistitutetype) {
    setInistitutetype(inistitutetype);
  }
  function setInistituteName(e) {
    setName(e.target.value);
  }
  function setDesignationName(e) {
    setDesignation(e.target.value);
  }
  function setMobileNo(e) {
    setMobileNumber(e.target.value);
  }
  function setAltContactNo(e) {
    setAltContactNumber(e.target.value);
  }
  function setEmail(e) {
    setEmailId(e.target.value);
  }
  const formDropdown = category => {
    const {
      name,
      code
    } = category;
    return {
      label: name,
      value: code,
      code: t(`PROPERTYTAX_BILLING_SLAB_${code}`)
    };
  };
  const getDropdwonForInstitution = () => {
    var _PropertyTaxPayload$P;
    let SubOwnerShipCategory = {};
    let PropertyTaxPayload = JSON.parse(sessionStorage.getItem("getSubPropertyOwnerShipCategory"));
    let SubOwnerShipCategoryOb = PropertyTaxPayload === null || PropertyTaxPayload === void 0 ? void 0 : (_PropertyTaxPayload$P = PropertyTaxPayload.PropertyTax) === null || _PropertyTaxPayload$P === void 0 ? void 0 : _PropertyTaxPayload$P.SubOwnerShipCategory;
    SubOwnerShipCategoryOb && SubOwnerShipCategoryOb.length > 0 && SubOwnerShipCategoryOb.map(category => {
      SubOwnerShipCategory[category.code] = category;
    });
    const institutedropDown = [];
    const value = formData.ownershipCategory.value || "";
    SubOwnerShipCategory && Object.keys(SubOwnerShipCategory).filter(subCategory => SubOwnerShipCategory[subCategory].ownerShipCategory === value).forEach(linkedCategory => {
      institutedropDown.push(formDropdown(SubOwnerShipCategory[linkedCategory]));
    });
    institutedropDown.sort((a, b) => a.label.localeCompare(b.label));
    return institutedropDown;
  };
  const goNext = () => {
    let ownerDetails = formData.owners && formData.owners[index];
    if (ownerDetails) {
      ownerDetails["inistitutionName"] = inistitutionName;
      ownerDetails["inistitutetype"] = inistitutetype;
      ownerDetails["name"] = name;
      ownerDetails["designation"] = designation;
      ownerDetails["mobileNumber"] = mobileNumber;
      ownerDetails["altContactNumber"] = altContactNumber;
      ownerDetails["emailId"] = emailId;
      onSelect(config.key, isMutation ? [ownerDetails] : ownerDetails, false, index);
    } else {
      let ownerStep = {
        ...ownerDetails,
        inistitutionName,
        inistitutetype,
        name,
        designation,
        mobileNumber,
        altContactNumber,
        emailId
      };
      if (isMutation) onSelect(config.key, [ownerStep], false, index);else onSelect(config.key, ownerStep, false, index);
    }
  };
  const checkMutatePT = window.location.href.includes("citizen/pt/property/property-mutation/") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? checkMutatePT : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    t: t,
    onSelect: goNext,
    isDisabled: !inistitutionName || !inistitutetype || !name || !designation || !mobileNumber || !altContactNumber
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_COMMON_INSTITUTION_NAME")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "institutionName",
    onChange: setInistitution,
    value: inistitutionName,
    disable: isUpdateProperty || isEditProperty
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z_@./()#&+- ]*$",
    title: t("PT_NAME_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_TYPE_OF_INSTITUTION")}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: getDropdwonForInstitution() || [],
    selected: inistitutetype,
    optionKey: "code",
    select: setTypeOfInistituteName,
    disabled: isUpdateProperty || isEditProperty
  }), /*#__PURE__*/React.createElement(CardHeader, null, t("PT_AUTH_PERSON_DETAILS")), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_OWNER_NAME")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "name",
    onChange: setInistituteName,
    value: name,
    disable: isUpdateProperty || isEditProperty
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    title: t("PT_NAME_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_COMMON_AUTHORISED_PERSON_DESIGNATION")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "designation",
    onChange: setDesignationName,
    value: designation,
    disable: isUpdateProperty || isEditProperty
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    title: t("PT_DESIGNATION_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM3_MOBILE_NUMBER")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "setMobileNo",
    onChange: setMobileNo,
    value: mobileNumber,
    type: "tel",
    disable: isUpdateProperty || isEditProperty
  }, validation = {
    isRequired: true,
    pattern: "[6-9]{1}[0-9]{9}",
    type: "tel",
    title: t("CORE_COMMON_APPLICANT_ALT_NUMBER_INVALID")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_OWNERSHIP_INFO_TEL_PHONE_NO")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "altContactNumber",
    onChange: setAltContactNo,
    value: altContactNumber,
    type: "tel",
    disable: isUpdateProperty || isEditProperty
  }, validation = {
    isRequired: true,
    pattern: "^[0-9]{11}$",
    type: "tel",
    title: t("CORE_COMMON_APPLICANT_MOBILE_NUMBER_INVALID")
  })), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_FORM3_EMAIL_ID")), /*#__PURE__*/React.createElement(TextInput, {
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "email",
    onChange: setEmail,
    type: "email",
    value: emailId,
    disable: isUpdateProperty || isEditProperty
  }))));
};

const SelectOwnerAddress = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  ownerIndex: _ownerIndex = 0
}) => {
  var _formData$owners$inde, _formData$owners$inde2, _formData$owners, _formData$owners$inde3;
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  const isMutation = url.includes("property-mutation");
  let index = isMutation ? _ownerIndex : window.location.href.charAt(window.location.href.length - 1);
  const [permanentAddress, setPermanentAddress] = useState(formData.owners && formData.owners[index] && ((_formData$owners$inde = formData.owners[index]) === null || _formData$owners$inde === void 0 ? void 0 : _formData$owners$inde.permanentAddress) || ((_formData$owners$inde2 = formData.owners[index]) === null || _formData$owners$inde2 === void 0 ? void 0 : _formData$owners$inde2.correspondenceAddress) || (formData === null || formData === void 0 ? void 0 : (_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.permanentAddress) || "");
  const [isCorrespondenceAddress, setIsCorrespondenceAddress] = useState(formData.owners && formData.owners[index] && ((_formData$owners$inde3 = formData.owners[index]) === null || _formData$owners$inde3 === void 0 ? void 0 : _formData$owners$inde3.isCorrespondenceAddress));
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  function setOwnerPermanentAddress(e) {
    setPermanentAddress(e.target.value);
  }
  function setCorrespondenceAddress(e) {
    if (e.target.checked == true) {
      var _formData$searchResul, _formData$searchResul2, _address$locality, _address$city, _formData$searchResul3, _formData$searchResul4, _formData$searchResul5, _formData$searchResul6;
      const address = isMutation ? formData === null || formData === void 0 ? void 0 : (_formData$searchResul = formData.searchResult) === null || _formData$searchResul === void 0 ? void 0 : (_formData$searchResul2 = _formData$searchResul.property) === null || _formData$searchResul2 === void 0 ? void 0 : _formData$searchResul2.address : formData === null || formData === void 0 ? void 0 : formData.address;
      let obj = {
        doorNo: address === null || address === void 0 ? void 0 : address.doorNo,
        street: address === null || address === void 0 ? void 0 : address.street,
        landmark: address === null || address === void 0 ? void 0 : address.landmark,
        locality: address === null || address === void 0 ? void 0 : (_address$locality = address.locality) === null || _address$locality === void 0 ? void 0 : _address$locality.i18nkey,
        city: address === null || address === void 0 ? void 0 : (_address$city = address.city) === null || _address$city === void 0 ? void 0 : _address$city.code,
        pincode: address === null || address === void 0 ? void 0 : address.pincode
      };
      let addressDetails = formData !== null && formData !== void 0 && (_formData$searchResul3 = formData.searchResult) !== null && _formData$searchResul3 !== void 0 && (_formData$searchResul4 = _formData$searchResul3.data) !== null && _formData$searchResul4 !== void 0 && _formData$searchResul4.property_address ? formData === null || formData === void 0 ? void 0 : (_formData$searchResul5 = formData.searchResult) === null || _formData$searchResul5 === void 0 ? void 0 : (_formData$searchResul6 = _formData$searchResul5.data) === null || _formData$searchResul6 === void 0 ? void 0 : _formData$searchResul6.property_address : "";
      for (const key in obj) {
        if (key == "pincode") addressDetails += obj[key] ? obj[key] : "";else addressDetails += obj[key] ? t(obj[key]) + ", " : "";
      }
      setPermanentAddress(addressDetails);
    } else {
      setPermanentAddress("");
    }
    setIsCorrespondenceAddress(e.target.checked);
  }
  const goNext = () => {
    if (userType === "employee") {
      onSelect(config.key, {
        ...formData[config.key],
        permanentAddress,
        isCorrespondenceAddress
      }, index);
    } else {
      let ownerDetails = formData.owners && formData.owners[index];
      ownerDetails["permanentAddress"] = permanentAddress;
      ownerDetails["isCorrespondenceAddress"] = isCorrespondenceAddress;
      if (isMutation) onSelect(config.key, [ownerDetails], "", index);else onSelect(config.key, ownerDetails, "", index);
    }
  };
  useEffect(() => {
    if (!isCorrespondenceAddress && isUpdateProperty) {
      let e = {
        target: {
          checked: true
        }
      };
      setCorrespondenceAddress(e);
    }
  });
  useEffect(() => {
    if (userType === "employee") {
      goNext();
    }
  }, [permanentAddress]);
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(LabelFieldPair, {
      key: index
    }, /*#__PURE__*/React.createElement(CardLabel, {
      className: "card-label-smaller",
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, t("PT_OWNERS_ADDRESS")), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      name: "address",
      onChange: setOwnerPermanentAddress,
      value: permanentAddress,
      disable: editScreen
    })));
  }
  const checkMutatePT = window.location.href.includes("citizen/pt/property/property-mutation/") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? checkMutatePT : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    t: t,
    onSelect: goNext,
    isDisabled: !permanentAddress
  }, /*#__PURE__*/React.createElement(TextArea, {
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "address",
    onChange: setOwnerPermanentAddress,
    value: permanentAddress,
    disable: isUpdateProperty || isEditProperty
  }), /*#__PURE__*/React.createElement(CheckBox, {
    label: t("PT_COMMON_SAME_AS_PROPERTY_ADDRESS"),
    onChange: setCorrespondenceAddress,
    value: isCorrespondenceAddress,
    checked: isCorrespondenceAddress || false,
    style: {
      paddingTop: "10px"
    },
    disable: isUpdateProperty || isEditProperty
  })));
};

const SelectOwnerDetails = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  ownerIndex
}) => {
  var _formData$owners, _formData$owners2, _formData$owners3, _formData$owners4, _formData$owners5, _formData$owners6;
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  const mutationScreen = url.includes("/property-mutation/");
  let index = mutationScreen ? ownerIndex : window.location.href.charAt(window.location.href.length - 1);
  let validation = {};
  const [name, setName] = useState(formData.owners && formData.owners[index] && formData.owners[index].name || (formData === null || formData === void 0 ? void 0 : (_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.name) || "");
  const [email, setEmail] = useState(formData.owners && formData.owners[index] && formData.owners[index].email || (formData === null || formData === void 0 ? void 0 : (_formData$owners2 = formData.owners) === null || _formData$owners2 === void 0 ? void 0 : _formData$owners2.emailId) || "");
  const [gender, setGender] = useState(formData.owners && formData.owners[index] && formData.owners[index].gender || (formData === null || formData === void 0 ? void 0 : (_formData$owners3 = formData.owners) === null || _formData$owners3 === void 0 ? void 0 : _formData$owners3.gender));
  const [mobileNumber, setMobileNumber] = useState(formData.owners && formData.owners[index] && formData.owners[index].mobileNumber || (formData === null || formData === void 0 ? void 0 : (_formData$owners4 = formData.owners) === null || _formData$owners4 === void 0 ? void 0 : _formData$owners4.mobileNumber) || "");
  const [fatherOrHusbandName, setFatherOrHusbandName] = useState(formData.owners && formData.owners[index] && formData.owners[index].fatherOrHusbandName || (formData === null || formData === void 0 ? void 0 : (_formData$owners5 = formData.owners) === null || _formData$owners5 === void 0 ? void 0 : _formData$owners5.fatherOrHusbandName) || "");
  const [relationship, setRelationship] = useState(formData.owners && formData.owners[index] && formData.owners[index].relationship || (formData === null || formData === void 0 ? void 0 : (_formData$owners6 = formData.owners) === null || _formData$owners6 === void 0 ? void 0 : _formData$owners6.relationship) || {});
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Menu
  } = Digit.Hooks.pt.useGenderMDMS(stateId, "common-masters", "GenderType");
  let menu = [];
  Menu && Menu.map(genderDetails => {
    menu.push({
      i18nKey: `PT_COMMON_GENDER_${genderDetails.code}`,
      code: `${genderDetails.code}`,
      value: `${genderDetails.code}`
    });
  });
  function setOwnerName(e) {
    setName(e.target.value);
  }
  function setOwnerEmail(e) {
    setEmail(e.target.value);
  }
  function setGenderName(value) {
    setGender(value);
  }
  function setMobileNo(e) {
    setMobileNumber(e.target.value);
  }
  function setGuardiansName(e) {
    setFatherOrHusbandName(e.target.value);
  }
  function setGuardianName(value) {
    setRelationship(value);
  }
  const goNext = () => {
    let owner = formData.owners && formData.owners[index];
    let ownerStep;
    if (userType === "employee") {
      ownerStep = {
        ...owner,
        name,
        gender,
        mobileNumber,
        fatherOrHusbandName,
        relationship,
        emailId: email
      };
      onSelect(config.key, {
        ...formData[config.key],
        ...ownerStep
      }, false, index);
    } else {
      if (mutationScreen) {
        ownerStep = {
          ...owner,
          name,
          gender,
          mobileNumber,
          fatherOrHusbandName,
          relationship
        };
        onSelect("", ownerStep);
        return;
      }
      ownerStep = {
        ...owner,
        name,
        gender,
        mobileNumber,
        fatherOrHusbandName,
        relationship
      };
      onSelect(config.key, ownerStep, false, index);
    }
  };
  const onSkip = () => onSelect();
  const GuardianOptions = [{
    name: "HUSBAND",
    code: "HUSBAND",
    i18nKey: "PT_RELATION_HUSBAND"
  }, {
    name: "Father",
    code: "FATHER",
    i18nKey: "PT_RELATION_FATHER"
  }];
  useEffect(() => {
    if (userType === "employee") {
      goNext();
    }
  }, [name, gender, mobileNumber, fatherOrHusbandName, relationship]);
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, `${t("PT_FORM3_MOBILE_NUMBER")}`), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
      type: "text",
      t: t,
      isMandatory: false,
      name: "mobileNumber",
      value: mobileNumber,
      onChange: setMobileNo,
      ValidationRequired: true
    }, validation = {
      isRequired: true,
      pattern: "[6-9]{1}[0-9]{9}",
      type: "tel",
      title: t("CORE_COMMON_APPLICANT_MOBILE_NUMBER_INVALID")
    }, {
      disable: editScreen
    })))), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, `${t("PT_OWNER_NAME")}`), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
      t: t,
      type: "text",
      isMandatory: false,
      name: "name",
      value: name,
      onChange: setOwnerName,
      ValidationRequired: true
    }, validation = {
      isRequired: true,
      pattern: "^[a-zA-Z-.`' ]*$",
      type: "tel",
      title: t("PT_NAME_ERROR_MESSAGE")
    }, {
      disable: editScreen
    })))), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, `${t("PT_FORM3_GUARDIAN_NAME")}`), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
      t: t,
      type: "text",
      isMandatory: false,
      name: "fatherOrHusbandName",
      value: fatherOrHusbandName,
      onChange: setGuardiansName,
      ValidationRequired: true
    }, validation = {
      pattern: "^[a-zA-Z-.`' ]*$",
      title: t("PT_NAME_ERROR_MESSAGE")
    }, {
      disable: editScreen
    })))), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, `${t("PT_FORM3_RELATIONSHIP")}`), /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: (relationship === null || relationship === void 0 ? void 0 : relationship.length) === 1 ? relationship[0] : relationship,
      disable: (relationship === null || relationship === void 0 ? void 0 : relationship.length) === 1 || editScreen,
      option: GuardianOptions,
      select: setGuardianName,
      optionKey: "i18nKey",
      t: t,
      name: "relationship"
    })), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, `${t("PT_FORM3_GENDER")}`), /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: (gender === null || gender === void 0 ? void 0 : gender.length) === 1 ? gender[0] : gender,
      disable: (gender === null || gender === void 0 ? void 0 : gender.length) === 1 || editScreen,
      option: menu,
      select: setGenderName,
      optionKey: "code",
      t: t,
      name: "gender"
    })), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, `${t("PT_OWNER_EMAIL")}`), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      t: t,
      type: "email",
      isMandatory: false,
      optionKey: "i18nKey",
      name: "email",
      value: email,
      onChange: setOwnerEmail,
      disable: editScreen
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? window.location.href.includes("/citizen/pt/property/property-mutation") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    t: t,
    isDisabled: !name || !mobileNumber || !gender || !relationship || !fatherOrHusbandName
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_OWNER_NAME")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "text",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "name",
    value: name,
    onChange: setOwnerName,
    disable: isUpdateProperty || isEditProperty,
    ValidationRequired: true
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    type: "text",
    title: t("PT_NAME_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM3_GENDER")}`), /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    options: menu,
    optionsKey: "code",
    name: "gender",
    value: gender,
    selectedOption: gender,
    onSelect: setGenderName,
    isDependent: true,
    labelKey: "PT_COMMON_GENDER",
    disabled: isUpdateProperty || isEditProperty
  }), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM3_MOBILE_NUMBER")}`), /*#__PURE__*/React.createElement(MobileNumber, Object.assign({
    value: mobileNumber,
    name: "mobileNumber",
    onChange: value => setMobileNo({
      target: {
        value
      }
    }),
    disable: isUpdateProperty || isEditProperty
  }, {
    required: true,
    pattern: "[6-9]{1}[0-9]{9}",
    type: "tel",
    title: t("CORE_COMMON_APPLICANT_MOBILE_NUMBER_INVALID")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM3_GUARDIAN_NAME")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "text",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "fatherOrHusbandName",
    value: fatherOrHusbandName,
    onChange: setGuardiansName,
    disable: isUpdateProperty || isEditProperty,
    ValidationRequired: true
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    type: "text",
    title: t("PT_NAME_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM3_RELATIONSHIP")}`), /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    name: "relationship",
    options: GuardianOptions,
    value: relationship,
    selectedOption: relationship,
    onSelect: setGuardianName,
    isDependent: true,
    labelKey: "PT_RELATION",
    disabled: isUpdateProperty || isEditProperty
  }))));
};

const SelectOwnerShipDetails = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  onBlur,
  formState,
  setError,
  clearErrors
}) => {
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  const [ownershipCategory, setOwnershipCategory] = useState(formData === null || formData === void 0 ? void 0 : formData.ownershipCategory);
  const [loader, setLoader] = useState(true);
  const {
    data: SubOwnerShipCategoryOb,
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "SubOwnerShipCategory");
  const {
    data: OwnerShipCategoryOb,
    isLoading: ownerShipCatLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "OwnerShipCategory");
  const ownerShipdropDown = [];
  let subCategoriesInOwnersType = ["INDIVIDUAL"];
  let OwnerShipCategory = {};
  let SubOwnerShipCategory = {};
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  useEffect(() => {
    if (!isLoading && SubOwnerShipCategoryOb && OwnerShipCategoryOb) {
      const preFilledPropertyType = SubOwnerShipCategoryOb.filter(ownershipCategory => {
        var _formData$ownershipCa;
        return ownershipCategory.code === ((formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa = formData.ownershipCategory) === null || _formData$ownershipCa === void 0 ? void 0 : _formData$ownershipCa.value) || (formData === null || formData === void 0 ? void 0 : formData.ownershipCategory));
      })[0];
      setOwnershipCategory(preFilledPropertyType);
    }
  }, [formData === null || formData === void 0 ? void 0 : formData.ownershipCategory, SubOwnerShipCategoryOb]);
  useEffect(() => {
    if (userType === "employee" && editScreen && !isLoading && !ownerShipCatLoading && OwnerShipCategoryOb) {
      const arr = getDropdwonForProperty(ownerShipdropDown);
      const defaultValue = arr.filter(e => {
        var _formData$originalDat;
        return e.code === (formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : _formData$originalDat.ownershipCategory);
      })[0];
      selectedValue(defaultValue);
      setLoader(false);
    }
  }, [isLoading, ownerShipCatLoading, OwnerShipCategoryOb]);
  OwnerShipCategoryOb && OwnerShipCategoryOb.length > 0 && OwnerShipCategoryOb.map(category => {
    OwnerShipCategory[category.code] = category;
  });
  SubOwnerShipCategoryOb && SubOwnerShipCategoryOb.length > 0 && SubOwnerShipCategoryOb.map(category => {
    SubOwnerShipCategory[category.code] = category;
  });
  getOwnerDetails();
  function formDropdown(category) {
    const {
      name,
      code
    } = category;
    return {
      label: name,
      value: code,
      code: code
    };
  }
  function getDropdwonForProperty(ownerShipdropDown) {
    if (userType === "employee") {
      var _ownerShipdropDown$fi, _ownerShipdropDown$fi2;
      const arr = ownerShipdropDown === null || ownerShipdropDown === void 0 ? void 0 : (_ownerShipdropDown$fi = ownerShipdropDown.filter(e => e.code.split(".").length <= 2)) === null || _ownerShipdropDown$fi === void 0 ? void 0 : (_ownerShipdropDown$fi2 = _ownerShipdropDown$fi.splice(0, 4)) === null || _ownerShipdropDown$fi2 === void 0 ? void 0 : _ownerShipdropDown$fi2.map(ownerShipDetails => ({
        ...ownerShipDetails,
        i18nKey: `PT_OWNERSHIP_${ownerShipDetails.value.split(".")[1] ? ownerShipDetails.value.split(".")[1] : ownerShipDetails.value.split(".")[0]}`
      }));
      return arr;
    }
    return ownerShipdropDown && ownerShipdropDown.length && ownerShipdropDown.splice(0, 4).map(ownerShipDetails => ({
      ...ownerShipDetails,
      i18nKey: `PT_OWNERSHIP_${ownerShipDetails.value.split(".")[1] ? ownerShipDetails.value.split(".")[1] : ownerShipDetails.value.split(".")[0]}`
    }));
  }
  function getOwnerDetails() {
    if (OwnerShipCategory && SubOwnerShipCategory) {
      Object.keys(OwnerShipCategory).forEach(category => {
        const categoryCode = OwnerShipCategory[category].code;
        if (subCategoriesInOwnersType.indexOf(categoryCode) !== -1) {
          Object.keys(SubOwnerShipCategory).filter(subCategory => categoryCode === SubOwnerShipCategory[subCategory].ownerShipCategory).forEach(linkedCategory => {
            ownerShipdropDown.push(formDropdown(SubOwnerShipCategory[linkedCategory]));
          });
        } else {
          ownerShipdropDown.push(formDropdown(OwnerShipCategory[category]));
        }
      });
    }
  }
  function selectedValue(value) {
    setOwnershipCategory(value);
  }
  const onSkip = () => onSelect();
  function goNext() {
    let index = window.location.href.charAt(window.location.href.length - 1);
    sessionStorage.setItem("ownershipCategory", ownershipCategory === null || ownershipCategory === void 0 ? void 0 : ownershipCategory.value);
    onSelect(config.key, ownershipCategory, "", index, null, {
      routeKey: ownershipCategory === null || ownershipCategory === void 0 ? void 0 : ownershipCategory.value
    });
  }
  useEffect(() => {
    if (userType === "employee") {
      if (!ownershipCategory) setError(config.key, {
        type: "required",
        message: t(`CORE_COMMON_REQUIRED_ERRMSG`)
      });else clearErrors(config.key);
      goNext();
    }
  }, [ownershipCategory]);
  if (userType === "employee" && editScreen && loader) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if (userType === "employee") {
    var _getDropdwonForProper, _getDropdwonForProper2, _formState$touched, _formState$errors$con;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      className: "card-label-smaller",
      style: editScreen ? {
        color: "#B1B4B6"
      } : {}
    }, t("PT_PROVIDE_OWNERSHIP_DETAILS") + " *"), /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: ((_getDropdwonForProper = getDropdwonForProperty(ownerShipdropDown)) === null || _getDropdwonForProper === void 0 ? void 0 : _getDropdwonForProper.length) === 1 ? getDropdwonForProperty(ownerShipdropDown)[0] : ownershipCategory,
      disable: ((_getDropdwonForProper2 = getDropdwonForProperty(ownerShipdropDown)) === null || _getDropdwonForProper2 === void 0 ? void 0 : _getDropdwonForProper2.length) === 1 || editScreen,
      option: getDropdwonForProperty(ownerShipdropDown),
      select: selectedValue,
      optionKey: "i18nKey",
      onBlur: onBlur,
      t: t
    })), (_formState$touched = formState.touched) !== null && _formState$touched !== void 0 && _formState$touched[config.key] ? /*#__PURE__*/React.createElement(CardLabelError, {
      style: {
        width: "70%",
        marginLeft: "30%",
        fontSize: "12px",
        marginTop: "-21px"
      }
    }, (_formState$errors$con = formState.errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.message) : null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen/pt/property/property-mutation") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !ownershipCategory
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtons, {
    isMandatory: config.isMandatory,
    options: getDropdwonForProperty(ownerShipdropDown) || [],
    selectedOption: ownershipCategory,
    optionsKey: "i18nKey",
    onSelect: selectedValue,
    value: ownershipCategory,
    labelKey: "PT_OWNERSHIP",
    isDependent: true,
    disabled: isUpdateProperty || isEditProperty
  }))));
};

const SelectProofIdentity = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  ownerIndex: _ownerIndex = 0,
  addNewOwner
}) => {
  var _formData$owners$inde4, _formData$owners$inde5, _formData$owners$inde6, _formData$owners$inde7, _formData$owners$inde8, _Documentsob$Property, _formData$ownershipCa3;
  const {
    pathname: url
  } = useLocation();
  const isMutation = url.includes("property-mutation");
  let index = isMutation ? _ownerIndex : window.location.href.charAt(window.location.href.length - 1);
  const [uploadedFile, setUploadedFile] = useState(() => {
    var _formData$owners$inde, _formData$owners$inde2, _formData$owners$inde3;
    return (formData === null || formData === void 0 ? void 0 : (_formData$owners$inde = formData.owners[index]) === null || _formData$owners$inde === void 0 ? void 0 : (_formData$owners$inde2 = _formData$owners$inde.documents) === null || _formData$owners$inde2 === void 0 ? void 0 : (_formData$owners$inde3 = _formData$owners$inde2.proofIdentity) === null || _formData$owners$inde3 === void 0 ? void 0 : _formData$owners$inde3.fileStoreId) || null;
  });
  const [file, setFile] = useState(formData === null || formData === void 0 ? void 0 : (_formData$owners$inde4 = formData.owners[index]) === null || _formData$owners$inde4 === void 0 ? void 0 : (_formData$owners$inde5 = _formData$owners$inde4.documents) === null || _formData$owners$inde5 === void 0 ? void 0 : _formData$owners$inde5.proofIdentity);
  const [error, setError] = useState(null);
  const cityDetails = Digit.ULBService.getCurrentUlb();
  const onSkip = () => onSelect();
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  const [dropdownValue, setDropdownValue] = useState(formData === null || formData === void 0 ? void 0 : (_formData$owners$inde6 = formData.owners[index]) === null || _formData$owners$inde6 === void 0 ? void 0 : (_formData$owners$inde7 = _formData$owners$inde6.documents) === null || _formData$owners$inde7 === void 0 ? void 0 : (_formData$owners$inde8 = _formData$owners$inde7.proofIdentity) === null || _formData$owners$inde8 === void 0 ? void 0 : _formData$owners$inde8.documentType);
  let dropdownData = [];
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Documentsob = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "Documents");
  const docs = Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property.Documents;
  const proofIdentity = Array.isArray(docs) && docs.filter(doc => doc.code.includes("IDENTITYPROOF"));
  if (proofIdentity.length > 0) {
    var _proofIdentity$;
    dropdownData = (_proofIdentity$ = proofIdentity[0]) === null || _proofIdentity$ === void 0 ? void 0 : _proofIdentity$.dropdownData;
    dropdownData.forEach(data => {
      data.i18nKey = stringReplaceAll(data.code, ".", "_");
    });
  }
  function setTypeOfDropdownValue(dropdownValue) {
    setDropdownValue(dropdownValue);
  }
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 2000000) {
          setError(t("PT_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("property-upload", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("PT_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {}
        }
      }
    })();
  }, [file]);
  const [multipleownererror, setmultipleownererror] = useState(null);
  const handleSubmit = () => {
    var _formData$ownershipCa, _formData$owners, _formData$owners2, _formData$ownershipCa2;
    setmultipleownererror(null);
    if ((formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa = formData.ownershipCategory) === null || _formData$ownershipCa === void 0 ? void 0 : _formData$ownershipCa.code) === "INDIVIDUAL.MULTIPLEOWNERS" && (formData === null || formData === void 0 ? void 0 : (_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.length) <= 1 && index == "0" && !isMutation) {
      setmultipleownererror("PT_MULTI_OWNER_ADD_ERR_MSG");
    } else if (isMutation && (formData === null || formData === void 0 ? void 0 : (_formData$owners2 = formData.owners) === null || _formData$owners2 === void 0 ? void 0 : _formData$owners2.length) <= 1 && (formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa2 = formData.ownershipCategory) === null || _formData$ownershipCa2 === void 0 ? void 0 : _formData$ownershipCa2.code) === "INDIVIDUAL.MULTIPLEOWNERS") {
      setmultipleownererror("PT_MULTI_OWNER_ADD_ERR_MSG");
    } else {
      let fileStoreId = uploadedFile;
      let fileDetails = file;
      if (fileDetails) {
        fileDetails.documentType = dropdownValue;
        fileDetails.fileStoreId = fileStoreId ? fileStoreId : null;
      }
      let ownerDetails = formData.owners && formData.owners[index];
      if (ownerDetails && ownerDetails.documents) {
        if (!isMutation) ownerDetails.documents["proofIdentity"] = fileDetails;else ownerDetails.documents["proofIdentity"] = {
          documentType: dropdownValue,
          fileStoreId
        };
      } else {
        if (!isMutation) {
          ownerDetails["documents"] = [];
          ownerDetails.documents["proofIdentity"] = fileDetails;
        } else {
          ownerDetails["documents"] = {};
          ownerDetails.documents["proofIdentity"] = {
            documentType: dropdownValue,
            fileStoreId
          };
        }
      }
      onSelect(config.key, isMutation ? [ownerDetails] : ownerDetails, "", index);
    }
  };
  function onAdd() {
    if (isMutation) {
      if (!uploadedFile || !dropdownValue) {
        setError(t("ERR_DEFAULT_INPUT_FIELD_MSG"));
        return;
      }
      let _ownerDetails = formData.owners && formData.owners[index];
      if (_ownerDetails && _ownerDetails.documents) {
        _ownerDetails.documents["proofIdentity"] = {
          documentType: dropdownValue,
          fileStoreId: uploadedFile
        };
      } else {
        _ownerDetails["documents"] = {};
        _ownerDetails.documents["proofIdentity"] = {
          documentType: dropdownValue,
          fileStoreId: uploadedFile
        };
      }
      addNewOwner(_ownerDetails);
      return;
    }
    let newIndex = parseInt(index) + 1;
    let fileStoreId = uploadedFile;
    let fileDetails = file;
    if (fileDetails) {
      fileDetails.documentType = dropdownValue;
      fileDetails.fileStoreId = fileStoreId ? fileStoreId : null;
    }
    let ownerDetails = formData.owners && formData.owners[index];
    if (ownerDetails && ownerDetails.documents) {
      ownerDetails.documents["proofIdentity"] = fileDetails;
    } else {
      ownerDetails["documents"] = [];
      ownerDetails.documents["proofIdentity"] = fileDetails;
    }
    onSelect("owner-details", {}, false, newIndex, true);
  }
  const checkMutatePT = window.location.href.includes("citizen/pt/property/property-mutation/") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 3
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? checkMutatePT : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    forcedError: t(multipleownererror),
    isDisabled: isUpdateProperty || isEditProperty ? false : multipleownererror || !uploadedFile || !dropdownValue || error,
    onAdd: onAdd,
    isMultipleAllow: (formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa3 = formData.ownershipCategory) === null || _formData$ownershipCa3 === void 0 ? void 0 : _formData$ownershipCa3.value) == "INDIVIDUAL.MULTIPLEOWNERS"
  }, /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_TYPES`)), /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_SIZE`)), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_CATEGORY_DOCUMENT_TYPE")}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: dropdownData,
    selected: dropdownValue,
    optionKey: "i18nKey",
    select: setTypeOfDropdownValue,
    placeholder: t(`PT_MUTATION_SELECT_DOC_LABEL`)
  }), /*#__PURE__*/React.createElement(UploadFile, {
    id: "pt-doc",
    extraStyleName: "propertyCreate",
    accept: ".jpg,.png,.pdf",
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
    },
    message: uploadedFile ? `1 ${t(`PT_ACTION_FILEUPLOADED`)}` : t(`PT_ACTION_NO_FILEUPLOADED`),
    error: error
  }), error ? /*#__PURE__*/React.createElement("div", {
    style: {
      height: "20px",
      width: "100%",
      fontSize: "20px",
      color: "red",
      marginTop: "5px"
    }
  }, error) : "", /*#__PURE__*/React.createElement("div", {
    style: {
      disabled: "true",
      height: "20px",
      width: "100%"
    }
  })));
};

const SelectSpecialOwnerCategoryType = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  ownerIndex
}) => {
  var _formData$owners$inde, _formData$owners;
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  const isMutation = url.includes("property-mutation");
  let index = isMutation ? ownerIndex : window.location.href.charAt(window.location.href.length - 1);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  const [ownerType, setOwnerType] = useState(formData.owners && formData.owners[index] && ((_formData$owners$inde = formData.owners[index]) === null || _formData$owners$inde === void 0 ? void 0 : _formData$owners$inde.ownerType) || ((_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.ownerType) || {});
  const {
    data: Menu,
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "OwnerType");
  Menu ? Menu.sort((a, b) => a.name.localeCompare(b.name)) : "";
  if ((Menu === null || Menu === void 0 ? void 0 : Menu.length) > 0) {
    Menu === null || Menu === void 0 ? void 0 : Menu.forEach((data, index) => {
      if (data.code == "NONE") data.order = 0;else data.order = index + 1;
    });
    Menu.sort(function (a, b) {
      return a.order - b.order;
    });
  }
  const onSkip = () => onSelect();
  function setTypeOfOwner(value) {
    setOwnerType(value);
  }
  function goNext() {
    let ownerDetails = formData.owners && formData.owners[index];
    ownerDetails["ownerType"] = ownerType;
    onSelect(config.key, ownerDetails, "", index);
  }
  useEffect(() => {
    if (userType === "employee") {
      onSelect(config.key, {
        ...formData[config.key],
        ownerType
      });
    }
  }, [ownerType]);
  const inputs = [{
    label: "PT_SPECIAL_OWNER_CATEGORY",
    type: "text",
    name: "ownerSpecialCategory",
    validation: {}
  }];
  if (isLoading) return /*#__PURE__*/React.createElement(Loader, null);
  if (userType === "employee") {
    return inputs === null || inputs === void 0 ? void 0 : inputs.map((input, index) => {
      return /*#__PURE__*/React.createElement(LabelFieldPair, {
        key: index
      }, /*#__PURE__*/React.createElement(CardLabel, {
        className: "card-label-smaller",
        style: editScreen ? {
          color: "#B1B4B6"
        } : {}
      }, t(input.label)), /*#__PURE__*/React.createElement(Dropdown, {
        className: "form-field",
        selected: (Menu === null || Menu === void 0 ? void 0 : Menu.length) === 1 ? Menu[0] : ownerType,
        disable: (Menu === null || Menu === void 0 ? void 0 : Menu.length) === 1 || editScreen,
        option: Menu,
        select: setTypeOfOwner,
        optionKey: "i18nKey",
        t: t
      }));
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? window.location.href.includes("/citizen/pt/property/property-mutation") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !ownerType
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: Menu || [],
    selectedOption: ownerType,
    onSelect: setTypeOfOwner,
    labelKey: "PROPERTYTAX_OWNERTYPE",
    isDependent: true,
    disabled: isUpdateProperty || isEditProperty
  }))));
};

const SelectSpecialProofIdentity = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  ownerIndex
}) => {
  var _formData$owners$inde4, _formData$owners$inde5, _formData$owners$inde6, _formData$owners$inde7, _formData$owners$inde8, _Documentsob$Property;
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  const isMutation = url.includes("property-mutation");
  let index = isMutation ? ownerIndex : window.location.href.charAt(window.location.href.length - 1);
  const [uploadedFile, setUploadedFile] = useState(() => {
    var _formData$owners$inde, _formData$owners$inde2, _formData$owners$inde3;
    return (formData === null || formData === void 0 ? void 0 : (_formData$owners$inde = formData.owners[index]) === null || _formData$owners$inde === void 0 ? void 0 : (_formData$owners$inde2 = _formData$owners$inde.documents) === null || _formData$owners$inde2 === void 0 ? void 0 : (_formData$owners$inde3 = _formData$owners$inde2.specialProofIdentity) === null || _formData$owners$inde3 === void 0 ? void 0 : _formData$owners$inde3.fileStoreId) || null;
  });
  const [file, setFile] = useState(formData === null || formData === void 0 ? void 0 : (_formData$owners$inde4 = formData.owners[index]) === null || _formData$owners$inde4 === void 0 ? void 0 : (_formData$owners$inde5 = _formData$owners$inde4.documents) === null || _formData$owners$inde5 === void 0 ? void 0 : _formData$owners$inde5.specialProofIdentity);
  const [error, setError] = useState(null);
  const cityDetails = Digit.ULBService.getCurrentUlb();
  const isUpdateProperty = (formData === null || formData === void 0 ? void 0 : formData.isUpdateProperty) || false;
  let isEditProperty = (formData === null || formData === void 0 ? void 0 : formData.isEditProperty) || false;
  const [dropdownValue, setDropdownValue] = useState(formData === null || formData === void 0 ? void 0 : (_formData$owners$inde6 = formData.owners[index]) === null || _formData$owners$inde6 === void 0 ? void 0 : (_formData$owners$inde7 = _formData$owners$inde6.documents) === null || _formData$owners$inde7 === void 0 ? void 0 : (_formData$owners$inde8 = _formData$owners$inde7.specialProofIdentity) === null || _formData$owners$inde8 === void 0 ? void 0 : _formData$owners$inde8.documentType);
  let dropdownData = [];
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Documentsob = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "Documents");
  const docs = Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property.Documents;
  const specialProofIdentity = Array.isArray(docs) && docs.filter(doc => doc.code.includes("SPECIALCATEGORYPROOF"));
  if (specialProofIdentity.length > 0) {
    var _specialProofIdentity, _dropdownData;
    dropdownData = (_specialProofIdentity = specialProofIdentity[0]) === null || _specialProofIdentity === void 0 ? void 0 : _specialProofIdentity.dropdownData;
    dropdownData.forEach(data => {
      data.i18nKey = stringReplaceAll(data.code, ".", "_");
    });
    dropdownData = (_dropdownData = dropdownData) === null || _dropdownData === void 0 ? void 0 : _dropdownData.filter(dropdown => {
      var _formData$owners$inde9, _formData$owners$inde10;
      return dropdown.parentValue.includes(formData === null || formData === void 0 ? void 0 : (_formData$owners$inde9 = formData.owners[index]) === null || _formData$owners$inde9 === void 0 ? void 0 : (_formData$owners$inde10 = _formData$owners$inde9.ownerType) === null || _formData$owners$inde10 === void 0 ? void 0 : _formData$owners$inde10.code);
    });
    if (dropdownData.length == 1 && dropdownValue != dropdownData[0]) {
      setTypeOfDropdownValue(dropdownData[0]);
    }
  }
  function setTypeOfDropdownValue(dropdownValue) {
    setDropdownValue(dropdownValue);
  }
  const handleSubmit = () => {
    let fileStoreId = uploadedFile;
    let fileDetails = file;
    if (fileDetails) {
      fileDetails.documentType = dropdownValue;
      fileDetails.fileStoreId = fileStoreId ? fileStoreId : null;
    }
    let ownerDetails = formData.owners && formData.owners[index];
    if (ownerDetails && ownerDetails.documents) {
      ownerDetails.documents["specialProofIdentity"] = fileDetails;
    } else {
      ownerDetails["documents"] = {};
      ownerDetails.documents["specialProofIdentity"] = fileDetails;
    }
    onSelect(config.key, ownerDetails, "", index);
  };
  const onSkip = () => onSelect();
  useEffect(() => {
    if (formData.owners && formData.owners[index] && formData.owners[index].ownerType.code === "NONE") onSelect("", {}, true, index);
  }, [formData.owners && formData.owners[index] && formData.owners[index].ownerType.code]);
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 2000000) {
          setError(t("PT_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("property-upload", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("PT_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {}
        }
      }
    })();
  }, [file]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? window.location.href.includes("/citizen/pt/property/property-mutation") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }) : /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 3
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    t: t,
    isDisabled: isUpdateProperty || isEditProperty ? false : !uploadedFile || !dropdownValue || error
  }, /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_TYPES`)), /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_SIZE`)), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_CATEGORY_DOCUMENT_TYPE")}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: dropdownData,
    selected: dropdownValue,
    optionKey: "i18nKey",
    select: setTypeOfDropdownValue,
    placeholder: t(`PT_MUTATION_SELECT_DOC_LABEL`)
  }), /*#__PURE__*/React.createElement(UploadFile, {
    id: "pt-doc",
    extraStyleName: "propertyCreate",
    accept: ".jpg,.png,.pdf",
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
    },
    message: uploadedFile ? `1 ${t(`PT_ACTION_FILEUPLOADED`)}` : t(`PT_ACTION_NO_FILEUPLOADED`),
    error: error
  }), error ? /*#__PURE__*/React.createElement("div", {
    style: {
      height: "20px",
      width: "100%",
      fontSize: "20px",
      color: "red",
      marginTop: "5px"
    }
  }, error) : "", /*#__PURE__*/React.createElement("div", {
    style: {
      disabled: "true",
      height: "20px",
      width: "100%"
    }
  })));
};

const Units = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  setError,
  formState,
  clearErrors
}) => {
  var _Menu$PropertyTax, _Menu$PropertyTax$Usa, _Menu$PropertyTax2, _Menu$PropertyTax4, _formData$PropertyTyp4, _formData$PropertyTyp5, _formData$usageCatego, _formState$errors2, _formState$errors2$co, _formState$errors3, _formState$errors4;
  const {
    pathname
  } = useLocation();
  const presentInModifyApplication = pathname.includes("modify");
  let isMobile = window.Digit.Utils.browser.isMobile();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [units, setUnits] = useState((formData === null || formData === void 0 ? void 0 : formData.units) || [{
    key: Date.now(),
    order: 1,
    floorNo: null,
    occupancyType: null,
    tenantId,
    usageCategory: null,
    builtUpArea: ""
  }]);
  const stateId = Digit.ULBService.getStateId();
  const [focusIndex, setFocusIndex] = useState({
    index: -1
  });
  const [loader, setLoader] = useState(true);
  const {
    data: Menu,
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", ["UsageCategory", "OccupancyType", "Floor", "OwnerType", "OwnerShipCategory", "Documents", "SubOwnerShipCategory", "OwnerShipCategory"]) || {};
  let usagecat = [];
  usagecat = (Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax = Menu.PropertyTax) === null || _Menu$PropertyTax === void 0 ? void 0 : (_Menu$PropertyTax$Usa = _Menu$PropertyTax.UsageCategory) === null || _Menu$PropertyTax$Usa === void 0 ? void 0 : _Menu$PropertyTax$Usa.filter(e => (e === null || e === void 0 ? void 0 : e.code) !== "MIXED")) || [];
  let floorlist = [];
  floorlist = Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax2 = Menu.PropertyTax) === null || _Menu$PropertyTax2 === void 0 ? void 0 : _Menu$PropertyTax2.Floor;
  let occupencyOptions = [];
  occupencyOptions = (Menu === null || Menu === void 0 ? void 0 : (_Menu$PropertyTax4 = Menu.PropertyTax) === null || _Menu$PropertyTax4 === void 0 ? void 0 : _Menu$PropertyTax4.OccupancyType.map(e => ({
    i18nKey: `PROPERTYTAX_OCCUPANCYTYPE_${e === null || e === void 0 ? void 0 : e.code}`,
    ...e
  }))) || [];
  let floorListData = [];
  function getfloorlistdata(floorlist) {
    floorListData = (floorlist === null || floorlist === void 0 ? void 0 : floorlist.map(floor => ({
      i18nKey: "PROPERTYTAX_FLOOR_" + stringReplaceAll(floor === null || floor === void 0 ? void 0 : floor.code, "-", "_"),
      code: floor === null || floor === void 0 ? void 0 : floor.code
    }))) || [];
    return floorListData;
  }
  useEffect(() => {
    if (!isLoading && presentInModifyApplication && Menu) {
      var _formData$originalDat, _formData$originalDat2, _formData$originalDat3;
      let defaultUnits = formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : (_formData$originalDat2 = _formData$originalDat.units) === null || _formData$originalDat2 === void 0 ? void 0 : (_formData$originalDat3 = _formData$originalDat2.filter(e => e.active)) === null || _formData$originalDat3 === void 0 ? void 0 : _formData$originalDat3.map((unit, index) => {
        let {
          occupancyType,
          usageCategory: uc,
          constructionDetail,
          floorNo,
          arv
        } = unit;
        occupancyType = occupencyOptions.filter(e => (e === null || e === void 0 ? void 0 : e.code) === occupancyType)[0];
        let usageCategory = usageCategoryMajorMenu(usagecat).filter(e => (e === null || e === void 0 ? void 0 : e.code) === uc)[0];
        floorNo = getfloorlistdata(floorlist).filter(e => (e === null || e === void 0 ? void 0 : e.code) == floorNo)[0];
        let key = Date.now() + index;
        let order = index + 1;
        let builtUpArea = constructionDetail.builtUpArea;
        return {
          floorNo,
          occupancyType,
          usageCategory,
          key,
          order,
          builtUpArea,
          existingUsageCategory: uc,
          arv
        };
      });
      setUnits(defaultUnits || []);
      setLoader(false);
    }
  }, [isLoading]);
  const calculateNumberOfFloors = () => {
    var _formData$PropertyTyp, _floorlist;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.code) !== "BUILTUP.INDEPENDENTPROPERTY") {
      var _formState$errors$con, _formData$PropertyTyp2;
      if (((_formState$errors$con = formState.errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.type) === "units_missing") clearErrors(config.key);
      if (formData !== null && formData !== void 0 && (_formData$PropertyTyp2 = formData.PropertyType) !== null && _formData$PropertyTyp2 !== void 0 && _formData$PropertyTyp2.code.includes("BUILTUP")) {
        let uniqueFloors = units.reduce((acc, unit) => !unit.floorNo ? acc : acc[unit.floorNo] ? acc : {
          ...acc,
          [unit.floorNo]: 1
        }, {});
        onSelect("noOfFloors", Object.keys(uniqueFloors).length);
        let _floorWiseAreas = units.reduce((acc, {
          floorNo,
          builtUpArea
        }) => {
          if (!floorNo) return acc;
          let area = Number(builtUpArea) || 0;
          if (isNaN(acc === null || acc === void 0 ? void 0 : acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code])) acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code] = area;else acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code] = acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code] + area;
          return acc;
        }, {});
        let _totalGroundFloorArea = Object.keys(_floorWiseAreas).reduce((acc, key) => _floorWiseAreas[key] <= acc ? acc : _floorWiseAreas[key], 0);
        if (_totalGroundFloorArea > Number(formData === null || formData === void 0 ? void 0 : formData.landarea)) {
          setError(config.key, {
            type: "landArea extended",
            message: t("PT_BUILTUPAREA_GRATER_THAN_LANDAREA")
          });
        } else clearErrors(config.key);
      }
      return;
    }
    if (!((_floorlist = floorlist) !== null && _floorlist !== void 0 && _floorlist.length)) return;
    let minFloor = units.reduce((min, unit) => {
      var _unit$floorNo;
      return Math.min(min, Number((_unit$floorNo = unit.floorNo) === null || _unit$floorNo === void 0 ? void 0 : _unit$floorNo.code) || Number(0));
    }, Number(0));
    let maxFloor = units.reduce((max, unit) => {
      var _unit$floorNo2;
      return Math.max(max, Number((_unit$floorNo2 = unit.floorNo) === null || _unit$floorNo2 === void 0 ? void 0 : _unit$floorNo2.code) || Number(0));
    }, Number(0));
    let floorWiseAreas = units.reduce((acc, {
      floorNo,
      builtUpArea
    }) => {
      if (!floorNo) return acc;
      let area = Number(builtUpArea) || 0;
      if (isNaN(acc === null || acc === void 0 ? void 0 : acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code])) acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code] = area;else acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code] = acc[floorNo === null || floorNo === void 0 ? void 0 : floorNo.code] + area;
      return acc;
    }, {});
    let totalGroundFloorArea = Object.keys(floorWiseAreas).reduce((acc, key) => floorWiseAreas[key] <= acc ? acc : floorWiseAreas[key], 0);
    const continuousFloorsArr = floorListData.filter(e => {
      let num = Number(e === null || e === void 0 ? void 0 : e.code);
      return num < maxFloor && num > minFloor || num === maxFloor || num === minFloor;
    });
    let unitsMissing = [...continuousFloorsArr];
    continuousFloorsArr.forEach(floor => {
      if (units.some(unit => {
        var _unit$floorNo3;
        return ((_unit$floorNo3 = unit.floorNo) === null || _unit$floorNo3 === void 0 ? void 0 : _unit$floorNo3.code) === (floor === null || floor === void 0 ? void 0 : floor.code);
      })) {
        unitsMissing = unitsMissing.filter(e => (e === null || e === void 0 ? void 0 : e.code) !== (floor === null || floor === void 0 ? void 0 : floor.code));
      } else if (!unitsMissing.some(e => (e === null || e === void 0 ? void 0 : e.code) === (floor === null || floor === void 0 ? void 0 : floor.code))) {
        unitsMissing.push(floor);
      }
    });
    if (unitsMissing.length && units.some(unit => {
      var _unit$floorNo4;
      return unit === null || unit === void 0 ? void 0 : (_unit$floorNo4 = unit.floorNo) === null || _unit$floorNo4 === void 0 ? void 0 : _unit$floorNo4.code;
    })) {
      setError(config.key, {
        type: "units_missing",
        message: `PT_FLOORS_MISSING_UNITS.${unitsMissing.map(e => e === null || e === void 0 ? void 0 : e.code).join()}`
      });
    } else if (totalGroundFloorArea > Number(formData === null || formData === void 0 ? void 0 : formData.landarea)) {
      setError(config.key, {
        type: "landArea extended",
        message: t("PT_BUILTUPAREA_GRATER_THAN_LANDAREA")
      });
    } else {
      clearErrors(config.key);
    }
    onSelect("noOfFloors", maxFloor + 1);
  };
  const usageCategoryMajorMenu = usagecat => {
    var _usagecat$filter;
    const catMenu = usagecat === null || usagecat === void 0 ? void 0 : (_usagecat$filter = usagecat.filter(e => (e === null || e === void 0 ? void 0 : e.code.split(".").length) <= 2 && (e === null || e === void 0 ? void 0 : e.code) !== "NONRESIDENTIAL")) === null || _usagecat$filter === void 0 ? void 0 : _usagecat$filter.map(item => {
      const arr = item === null || item === void 0 ? void 0 : item.code.split(".");
      if (arr.length == 2) return {
        i18nKey: "PROPERTYTAX_BILLING_SLAB_" + arr[1],
        code: item === null || item === void 0 ? void 0 : item.code
      };else return {
        i18nKey: "PROPERTYTAX_BILLING_SLAB_" + (item === null || item === void 0 ? void 0 : item.code),
        code: item === null || item === void 0 ? void 0 : item.code
      };
    });
    return catMenu;
  };
  const subUsageCategoryMenu = category => {
    const menu = usagecat.filter(cat => (cat === null || cat === void 0 ? void 0 : cat.code.includes(category === null || category === void 0 ? void 0 : category.code)) && (cat === null || cat === void 0 ? void 0 : cat.code.split(".").length) === 4).map(item => {
      const codeArr = item === null || item === void 0 ? void 0 : item.code.split(".");
      return {
        i18nKey: `COMMON_PROPSUBUSGTYPE_NONRESIDENTIAL_${codeArr[1]}_${codeArr[3]}`,
        code: item === null || item === void 0 ? void 0 : item.code
      };
    });
    return menu;
  };
  function goNext() {
    var _unitsData;
    let unitsData = units === null || units === void 0 ? void 0 : units.map(unit => {
      var _unit$occupancyType, _unit$floorNo5, _unit$usageCategory;
      return {
        occupancyType: unit === null || unit === void 0 ? void 0 : (_unit$occupancyType = unit.occupancyType) === null || _unit$occupancyType === void 0 ? void 0 : _unit$occupancyType.code,
        floorNo: unit === null || unit === void 0 ? void 0 : (_unit$floorNo5 = unit.floorNo) === null || _unit$floorNo5 === void 0 ? void 0 : _unit$floorNo5.code,
        constructionDetail: {
          builtUpArea: unit === null || unit === void 0 ? void 0 : unit.builtUpArea
        },
        tenantId: Digit.ULBService.getCurrentTenantId(),
        usageCategory: unit === null || unit === void 0 ? void 0 : (_unit$usageCategory = unit.usageCategory) === null || _unit$usageCategory === void 0 ? void 0 : _unit$usageCategory.code
      };
    });
    unitsData = (_unitsData = unitsData) === null || _unitsData === void 0 ? void 0 : _unitsData.map((unit, index) => {
      if (unit.occupancyType === "RENTED") return {
        ...unit,
        arv: units[index].arv
      };
      return unit;
    });
    onSelect(config.key, unitsData);
  }
  const reviseIndexKeys = () => {
    setUnits(prev => prev.map((unit, index) => ({
      ...unit,
      order: index + 1
    })));
  };
  const handleAddUnit = () => {
    setUnits(prev => [...prev, {
      key: Date.now(),
      floorNo: null,
      occupancyType: null,
      tenantId,
      usageCategory: null,
      builtUpArea: formData === null || formData === void 0 ? void 0 : formData.landarea,
      order: prev.length + 1
    }]);
    reviseIndexKeys();
  };
  const handleRemoveUnit = unit => {
    var _formState$errors, _formState$errors$uni;
    setUnits(prev => prev.filter(el => el.key !== unit.key));
    if (((_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$uni = _formState$errors.units) === null || _formState$errors$uni === void 0 ? void 0 : _formState$errors$uni.type) == unit.key) {
      clearErrors("units");
    }
    reviseIndexKeys();
  };
  useEffect(() => {
    var _formData$PropertyTyp3;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp3 = formData.PropertyType) === null || _formData$PropertyTyp3 === void 0 ? void 0 : _formData$PropertyTyp3.code) === "VACANT" && formState.errors[config.key]) {
      clearErrors(config.key);
    }
  }, [formData === null || formData === void 0 ? void 0 : formData.PropertyType]);
  useEffect(() => {
    goNext();
    calculateNumberOfFloors();
  }, [units, formData.PropertyType, formData.landarea]);
  if (loader && presentInModifyApplication) return /*#__PURE__*/React.createElement(Loader, null);
  return (formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp4 = formData.PropertyType) === null || _formData$PropertyTyp4 === void 0 ? void 0 : _formData$PropertyTyp4.code) === "VACANT" || !(formData !== null && formData !== void 0 && (_formData$PropertyTyp5 = formData.PropertyType) !== null && _formData$PropertyTyp5 !== void 0 && _formData$PropertyTyp5.code) || !(formData !== null && formData !== void 0 && (_formData$usageCatego = formData.usageCategoryMajor) !== null && _formData$usageCatego !== void 0 && _formData$usageCatego.code) ? null : /*#__PURE__*/React.createElement("div", null, units === null || units === void 0 ? void 0 : units.map((unit, index) => /*#__PURE__*/React.createElement(Unit, Object.assign({
    t: t,
    key: unit.key,
    unit: unit,
    allUnits: units,
    setUnits: setUnits,
    index: index,
    stateId: stateId,
    focusIndex: focusIndex,
    setFocusIndex: setFocusIndex,
    isMobile: isMobile,
    getfloorlistdata: getfloorlistdata,
    floorlist: floorlist,
    occupencyOptions: occupencyOptions,
    formData: formData,
    handleRemoveUnit: handleRemoveUnit
  }, {
    formState,
    setError,
    clearErrors,
    usageCategoryMajorMenu,
    subUsageCategoryMenu
  }))), /*#__PURE__*/React.createElement(LinkButton, {
    label: t("PT_ADD_UNIT"),
    onClick: handleAddUnit,
    style: {
      color: "orange",
      width: "175px"
    }
  }), ["units_missing", "landArea extended"].includes((_formState$errors2 = formState.errors) === null || _formState$errors2 === void 0 ? void 0 : (_formState$errors2$co = _formState$errors2[config.key]) === null || _formState$errors2$co === void 0 ? void 0 : _formState$errors2$co.type) ? /*#__PURE__*/React.createElement(CardLabelError, {
    style: {
      width: "70%",
      marginLeft: "30%",
      fontSize: "12px",
      marginTop: "-21px"
    }
  }, `${t((_formState$errors3 = formState.errors) === null || _formState$errors3 === void 0 ? void 0 : _formState$errors3[config.key].message.split(".")[0])}` + `-
           ${((_formState$errors4 = formState.errors) === null || _formState$errors4 === void 0 ? void 0 : _formState$errors4[config.key].message.split(".")[1]) || " "}`) : null);
};
function Unit({
  t,
  unit,
  allUnits,
  setUnits,
  index,
  focusIndex,
  setFocusIndex,
  getfloorlistdata,
  floorlist,
  occupencyOptions,
  formData,
  handleRemoveUnit,
  isMobile,
  stateId,
  formState,
  setError,
  clearErrors,
  usageCategoryMajorMenu,
  subUsageCategoryMenu
}) {
  var _usageMenu$PropertyTa, _usageMenu$PropertyTa2, _formData$usageCatego5, _errors$floorNo, _formData$usageCatego6, _subUsageCategoryMenu, _errors$usageCategory, _errors$occupancyType, _formValue$occupancyT, _errors$arv, _errors$builtUpArea;
  const {
    data: usageMenu = {},
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", ["UsageCategory", "OccupancyType", "Floor", "OwnerType", "OwnerShipCategory", "Documents", "SubOwnerShipCategory", "OwnerShipCategory"]);
  let usagecat = [];
  usagecat = (usageMenu === null || usageMenu === void 0 ? void 0 : (_usageMenu$PropertyTa = usageMenu.PropertyTax) === null || _usageMenu$PropertyTa === void 0 ? void 0 : (_usageMenu$PropertyTa2 = _usageMenu$PropertyTa.UsageCategory) === null || _usageMenu$PropertyTa2 === void 0 ? void 0 : _usageMenu$PropertyTa2.filter(e => (e === null || e === void 0 ? void 0 : e.code) !== "MIXED")) || [];
  const [usageType, setUsageType] = useState(() => {
    var _formData$usageCatego2, _formData$usageCatego3;
    const {
      existingUsageCategory
    } = unit;
    if ([existingUsageCategory, formData === null || formData === void 0 ? void 0 : (_formData$usageCatego2 = formData.usageCategoryMajor) === null || _formData$usageCatego2 === void 0 ? void 0 : _formData$usageCatego2.code].includes("RESIDENTIAL")) {
      return usageCategoryMajorMenu(usagecat).filter(e => (e === null || e === void 0 ? void 0 : e.code) === "RESIDENTIAL")[0];
    }
    if ((formData === null || formData === void 0 ? void 0 : (_formData$usageCatego3 = formData.usageCategoryMajor) === null || _formData$usageCatego3 === void 0 ? void 0 : _formData$usageCatego3.code) !== "MIXED") ; else if (existingUsageCategory) {
      const codeArr = existingUsageCategory === null || existingUsageCategory === void 0 ? void 0 : existingUsageCategory.split(".");
      const val = usageCategoryMajorMenu(usagecat).filter(e => (e === null || e === void 0 ? void 0 : e.code) === codeArr[0] + "." + codeArr[1])[0];
      return val;
    }
  });
  const {
    control,
    formState: localFormState,
    watch,
    setError: setLocalError,
    clearErrors: clearLocalErrors,
    setValue
  } = useForm();
  const formValue = watch();
  useEffect(() => {
    var _formData$usageCatego4;
    const code = formData === null || formData === void 0 ? void 0 : (_formData$usageCatego4 = formData.usageCategoryMajor) === null || _formData$usageCatego4 === void 0 ? void 0 : _formData$usageCatego4.code;
    if (code !== (usageType === null || usageType === void 0 ? void 0 : usageType.code) && code !== "MIXED") {
      setUsageType(formData === null || formData === void 0 ? void 0 : formData.usageCategoryMajor);
    }
  }, [formData === null || formData === void 0 ? void 0 : (_formData$usageCatego5 = formData.usageCategoryMajor) === null || _formData$usageCatego5 === void 0 ? void 0 : _formData$usageCatego5.code]);
  useEffect(() => {
    if ((usageType === null || usageType === void 0 ? void 0 : usageType.code) === "RESIDENTIAL") {
      setValue("usageCategory", usageType);
    } else {
      var _formValue$usageCateg;
      if (((_formValue$usageCateg = formValue.usageCategory) === null || _formValue$usageCateg === void 0 ? void 0 : _formValue$usageCateg.code) === "RESIDENTIAL") setValue("usageCategory", null);
    }
  }, [usageType]);
  useEffect(() => {
    var _formState$errors5, _formState$errors6, _formState$errors6$un;
    let keys = Object.keys(formValue);
    const part = {};
    keys.forEach(key => part[key] = unit[key]);
    if (!lodash.isEqual(formValue, part)) setUnits(prev => prev.map(item => item.key === unit.key ? {
      ...item,
      ...formValue
    } : item));
    for (let key in formValue) {
      if (!localFormState.errors[key]) {
        if (!formValue[key]) {
          setLocalError(key, {
            type: `${key.toUpperCase()}_REQUIRED`,
            message: t(`CORE_COMMON_REQUIRED_ERRMSG`)
          });
        } else if (["builtUpArea", "arv"].includes(key) && isNaN(formValue[key])) {
          setLocalError(key, {
            type: `${key.toUpperCase()}_INVALID`,
            message: t(`ERR_DEFAULT_INPUT_FIELD_MSG`)
          });
        }
      } else if (["builtUpArea", "arv"].includes(key) && !isNaN(formValue[key]) && localFormState.errors[key].type === `${key.toUpperCase()}_INVALID`) {
        clearLocalErrors([key]);
      } else if (formValue[key] && localFormState.errors[key].type === `${key.toUpperCase()}_REQUIRED`) {
        clearLocalErrors([key]);
      }
    }
    if (Object.keys(localFormState.errors).length && !(formState !== null && formState !== void 0 && (_formState$errors5 = formState.errors) !== null && _formState$errors5 !== void 0 && _formState$errors5.units)) {
      setError("units", {
        type: `${unit.key}`,
        message: Object.keys(localFormState.errors).join()
      });
    } else if ((formState === null || formState === void 0 ? void 0 : (_formState$errors6 = formState.errors) === null || _formState$errors6 === void 0 ? void 0 : (_formState$errors6$un = _formState$errors6.units) === null || _formState$errors6$un === void 0 ? void 0 : _formState$errors6$un.type) === `${unit.key}` && !Object.keys(localFormState.errors).length) {
      clearErrors("units");
    }
  }, [formValue]);
  const {
    errors
  } = localFormState;
  const errorStyle = isMobile ? {
    width: "70%",
    marginLeft: "4%",
    fontSize: "12px"
  } : {
    width: "70%",
    marginLeft: "30%",
    fontSize: "12px",
    marginTop: "-21px"
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: "16px"
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "label-field-pair"
  }, /*#__PURE__*/React.createElement("h2", {
    className: "card-label card-label-smaller",
    style: {
      color: "#505A5F"
    }
  }, "Unit ", unit === null || unit === void 0 ? void 0 : unit.order)), /*#__PURE__*/React.createElement("div", {
    style: {
      border: "1px solid #E3E3E3",
      padding: "16px",
      marginTop: "8px"
    }
  }, allUnits.length > 1 ? /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(DeleteIcon, {
      style: {
        float: "right",
        position: "relative",
        bottom: "5px"
      },
      fill: !(allUnits.length == 1) ? "#494848" : "#FAFAFA"
    }),
    style: {
      marginBottom: "16px",
      padding: "5px",
      cursor: "pointer",
      textAlign: "right"
    },
    onClick: e => handleRemoveUnit(unit)
  }) : null, /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "30px"
    }
  }, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM2_SELECT_FLOOR") + " *"), /*#__PURE__*/React.createElement(Controller, {
    name: "floorNo",
    defaultValue: unit.floorNo,
    control: control,
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      disable: false,
      option: getfloorlistdata(floorlist) || [],
      select: props.onChange,
      optionKey: "i18nKey",
      onBlur: props.onBlur,
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.floorNo ? errors === null || errors === void 0 ? void 0 : (_errors$floorNo = errors.floorNo) === null || _errors$floorNo === void 0 ? void 0 : _errors$floorNo.message : "")), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_PROPERTY_DETAILS_USAGE_TYPE_HEADER") + " *"), /*#__PURE__*/React.createElement(Dropdown, {
    className: "form-field",
    selected: usageType,
    disable: (formData === null || formData === void 0 ? void 0 : (_formData$usageCatego6 = formData.usageCategoryMajor) === null || _formData$usageCatego6 === void 0 ? void 0 : _formData$usageCatego6.code) !== "MIXED",
    option: usageCategoryMajorMenu(usagecat),
    select: setUsageType,
    optionKey: "i18nKey",
    t: t
  })), /*#__PURE__*/React.createElement(LabelFieldPair, {
    style: ["RESIDENTIAL"].includes(usageType === null || usageType === void 0 ? void 0 : usageType.code) ? {
      display: "none"
    } : {}
  }, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM2_USAGE_TYPE") + " *"), /*#__PURE__*/React.createElement(Controller, {
    name: "usageCategory",
    defaultValue: (_subUsageCategoryMenu = subUsageCategoryMenu(usageType)) === null || _subUsageCategoryMenu === void 0 ? void 0 : _subUsageCategoryMenu.filter(e => (e === null || e === void 0 ? void 0 : e.code) === unit.existingUsageCategory)[0],
    control: control,
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      disable: !(usageType !== null && usageType !== void 0 && usageType.code),
      option: subUsageCategoryMenu(usageType),
      select: props.onChange,
      optionKey: "i18nKey",
      onBlur: props.onBlur,
      t: t
    })
  })), !["RESIDENTIAL"].includes(usageType === null || usageType === void 0 ? void 0 : usageType.code) ? /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.usageCategory ? errors === null || errors === void 0 ? void 0 : (_errors$usageCategory = errors.usageCategory) === null || _errors$usageCategory === void 0 ? void 0 : _errors$usageCategory.message : "") : null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM2_OCCUPANCY") + " *"), /*#__PURE__*/React.createElement(Controller, {
    name: "occupancyType",
    defaultValue: unit === null || unit === void 0 ? void 0 : unit.occupancyType,
    control: control,
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      disable: (occupencyOptions === null || occupencyOptions === void 0 ? void 0 : occupencyOptions.length) === 1,
      option: occupencyOptions,
      select: props.onChange,
      optionKey: "i18nKey",
      onBlur: props.onBlur,
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.occupancyType ? errors === null || errors === void 0 ? void 0 : (_errors$occupancyType = errors.occupancyType) === null || _errors$occupancyType === void 0 ? void 0 : _errors$occupancyType.message : ""), ((_formValue$occupancyT = formValue.occupancyType) === null || _formValue$occupancyT === void 0 ? void 0 : _formValue$occupancyT.code) === "RENTED" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM2_TOTAL_ANNUAL_RENT") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    name: "arv",
    defaultValue: unit.arv,
    control: control,
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      type: "text",
      name: "unit-area",
      onChange: e => {
        props.onChange(e.target.value);
        setFocusIndex({
          index,
          type: "arv"
        });
      },
      value: props.value,
      autoFocus: focusIndex.index === index && focusIndex.type === "arv",
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.arv ? errors === null || errors === void 0 ? void 0 : (_errors$arv = errors.arv) === null || _errors$arv === void 0 ? void 0 : _errors$arv.message : "")) : null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM2_BUILT_AREA") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    name: "builtUpArea",
    defaultValue: unit === null || unit === void 0 ? void 0 : unit.builtUpArea,
    control: control,
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      type: "text",
      name: "unit-area",
      onChange: e => {
        props.onChange(e.target.value);
        setFocusIndex({
          index,
          type: "builtUpArea"
        });
      },
      value: props.value,
      autoFocus: focusIndex.index === index && focusIndex.type === "builtUpArea",
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.builtUpArea ? errors === null || errors === void 0 ? void 0 : (_errors$builtUpArea = errors.builtUpArea) === null || _errors$builtUpArea === void 0 ? void 0 : _errors$builtUpArea.message : "")));
}

const SelectAltContactNumber = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _formData$owners;
  const [altContactNumber, setAltContactNumber] = useState(formData === null || formData === void 0 ? void 0 : (_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.altContactNumber);
  const {
    pathname: url
  } = useLocation();
  const editScreen = url.includes("/modify-application/");
  const goNext = () => {
    onSelect(config.key, {
      ...formData[config.key],
      altContactNumber
    });
  };
  useEffect(() => {
    goNext();
  }, [altContactNumber]);
  return /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller",
    style: editScreen ? {
      color: "#B1B4B6"
    } : {}
  }, t("ES_PT_ALT_CONTACT_NUMBER")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(TextInput, {
    name: "altContactNumber",
    onChange: e => setAltContactNumber(e.target.value),
    value: altContactNumber,
    disable: editScreen
  })));
};

const SelectDocuments = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  setError: setFormError,
  clearErrors: clearFormErrors,
  formState
}) => {
  var _formData$documents, _data$PropertyTax, _data$PropertyTax2, _mutationDocs$map, _data$PropertyTax3;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const [documents, setDocuments] = useState((formData === null || formData === void 0 ? void 0 : (_formData$documents = formData.documents) === null || _formData$documents === void 0 ? void 0 : _formData$documents.documents) || []);
  const [error, setError] = useState(null);
  let action = "create";
  const {
    pathname
  } = useLocation();
  const isEditScreen = pathname.includes("/modify-application/");
  const isMutation = pathname.includes("/property-mutate/");
  if (isEditScreen) action = "update";
  const propertyInitialValues = JSON.parse(sessionStorage.getItem("PropertyInitials"));
  const {
    isLoading,
    data
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", ["UsageCategory", "OccupancyType", "Floor", "OwnerType", "OwnerShipCategory", "Documents", "SubOwnerShipCategory", "OwnerShipCategory", "MutationDocuments"]);
  const mutationDocs = data === null || data === void 0 ? void 0 : (_data$PropertyTax = data.PropertyTax) === null || _data$PropertyTax === void 0 ? void 0 : _data$PropertyTax.MutationDocuments;
  const commonDocs = data === null || data === void 0 ? void 0 : (_data$PropertyTax2 = data.PropertyTax) === null || _data$PropertyTax2 === void 0 ? void 0 : _data$PropertyTax2.Documents;
  const propertyTaxDocuments = isMutation ? mutationDocs === null || mutationDocs === void 0 ? void 0 : (_mutationDocs$map = mutationDocs.map) === null || _mutationDocs$map === void 0 ? void 0 : _mutationDocs$map.call(mutationDocs, doc => commonDocs.find(e => doc.code === e.code) || doc) : data === null || data === void 0 ? void 0 : (_data$PropertyTax3 = data.PropertyTax) === null || _data$PropertyTax3 === void 0 ? void 0 : _data$PropertyTax3.Documents;
  const goNext = () => {
    onSelect(config.key, {
      documents,
      propertyTaxDocumentsLength: propertyTaxDocuments === null || propertyTaxDocuments === void 0 ? void 0 : propertyTaxDocuments.length
    });
  };
  useEffect(() => {
    goNext();
  }, [documents]);
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement("div", null, isMutation ? /*#__PURE__*/React.createElement(CardSectionHeader, null, t("PT_MUTATION_DOCUMENTS_HEADER"), " ") : null, propertyTaxDocuments === null || propertyTaxDocuments === void 0 ? void 0 : propertyTaxDocuments.map((document, index) => {
    return /*#__PURE__*/React.createElement(SelectDocument, {
      key: index,
      document: document,
      action: action,
      t: t,
      id: `pt-document-${index}`,
      error: error,
      setError: setError,
      setDocuments: setDocuments,
      documents: documents,
      formData: formData,
      setFormError: setFormError,
      clearFormErrors: clearFormErrors,
      config: config,
      formState: formState,
      propertyInitialValues: propertyInitialValues
    });
  }), error && /*#__PURE__*/React.createElement(Toast, {
    label: error,
    onClose: () => setError(null),
    error: true
  }));
};
function SelectDocument({
  t,
  document: doc,
  setDocuments,
  error,
  setError,
  documents,
  action,
  formData,
  setFormError,
  clearFormErrors,
  config,
  formState,
  fromRawData,
  id,
  propertyInitialValues
}) {
  var _doc$dropdownData, _formData$additionalD3, _formData$additionalD4, _dropDownData, _dropDownData2;
  const filteredDocument = documents === null || documents === void 0 ? void 0 : documents.filter(item => {
    var _item$documentType;
    return item === null || item === void 0 ? void 0 : (_item$documentType = item.documentType) === null || _item$documentType === void 0 ? void 0 : _item$documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code);
  })[0];
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [selectedDocument, setSelectedDocument] = useState(filteredDocument ? {
    ...filteredDocument,
    active: (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.status) === "ACTIVE",
    code: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType
  } : (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData = doc.dropdownData) === null || _doc$dropdownData === void 0 ? void 0 : _doc$dropdownData.length) === 1 ? doc === null || doc === void 0 ? void 0 : doc.dropdownData[0] : {});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(() => (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.fileStoreId) || null);
  const handleSelectDocument = value => setSelectedDocument(value);
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  const {
    dropdownData
  } = doc;
  const {
    dropdownFilter,
    enabledActions,
    filterCondition
  } = (doc === null || doc === void 0 ? void 0 : doc.additionalDetails) || {};
  var dropDownData = dropdownData;
  const [isHidden, setHidden] = useState(false);
  const addError = () => {
    var _formState$errors, _formState$errors$con;
    let type = (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$con = _formState$errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.type;
    if (!Array.isArray(type)) type = [];
    if (!type.includes(doc.code)) {
      type.push(doc.code);
      setFormError(config.key, {
        type
      });
    }
  };
  const removeError = () => {
    var _formState$errors2, _formState$errors2$co;
    let type = (_formState$errors2 = formState.errors) === null || _formState$errors2 === void 0 ? void 0 : (_formState$errors2$co = _formState$errors2[config.key]) === null || _formState$errors2$co === void 0 ? void 0 : _formState$errors2$co.type;
    if (!Array.isArray(type)) type = [];
    if (type.includes(doc === null || doc === void 0 ? void 0 : doc.code)) {
      type = type.filter(e => e != (doc === null || doc === void 0 ? void 0 : doc.code));
      if (!type.length) {
        clearFormErrors(config.key);
      } else {
        setFormError(config.key, {
          type
        });
      }
    }
  };
  useEffect(() => {
    if (selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
      setDocuments(prev => {
        const filteredDocumentsByDocumentType = prev === null || prev === void 0 ? void 0 : prev.filter(item => (item === null || item === void 0 ? void 0 : item.documentType) !== (selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code));
        if ((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.length) === 0 || uploadedFile === null) {
          return filteredDocumentsByDocumentType;
        }
        const filteredDocumentsByFileStoreId = filteredDocumentsByDocumentType === null || filteredDocumentsByDocumentType === void 0 ? void 0 : filteredDocumentsByDocumentType.filter(item => (item === null || item === void 0 ? void 0 : item.fileStoreId) !== uploadedFile);
        return [...filteredDocumentsByFileStoreId, {
          documentType: selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code,
          fileStoreId: uploadedFile,
          documentUid: uploadedFile
        }];
      });
    }
    if (!isHidden) {
      if (!uploadedFile || !(selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code)) {
        addError();
      } else if (uploadedFile && selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
        removeError();
      }
    } else if (isHidden) {
      removeError();
    }
  }, [uploadedFile, selectedDocument, isHidden]);
  useEffect(() => {
    if (action === "update") {
      var _formData$originalDat, _formData$originalDat2;
      const originalDoc = formData === null || formData === void 0 ? void 0 : (_formData$originalDat = formData.originalData) === null || _formData$originalDat === void 0 ? void 0 : (_formData$originalDat2 = _formData$originalDat.documents) === null || _formData$originalDat2 === void 0 ? void 0 : _formData$originalDat2.filter(e => e.documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code))[0];
      const docType = dropDownData.filter(e => e.code === (originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc.documentType)).map(e => {
        var _e$code;
        return {
          ...e,
          i18nKey: e === null || e === void 0 ? void 0 : (_e$code = e.code) === null || _e$code === void 0 ? void 0 : _e$code.replaceAll(".", "_")
        };
      })[0];
      if (!docType) setHidden(true);else {
        setSelectedDocument(docType);
        setUploadedFile(originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc.fileStoreId);
      }
    }
  }, []);
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            setUploadedFile(null);
            const response = await Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  useEffect(() => {
    if (isHidden) setUploadedFile(null);
  }, [isHidden]);
  useEffect(() => {
    if (doc.code === "OWNER.TRANSFERREASONDOCUMENT") {
      var _selectedDocument$cod, _formData$additionalD, _formData$additionalD2;
      if ((selectedDocument === null || selectedDocument === void 0 ? void 0 : (_selectedDocument$cod = selectedDocument.code) === null || _selectedDocument$cod === void 0 ? void 0 : _selectedDocument$cod.split(".")[2]) !== (formData === null || formData === void 0 ? void 0 : (_formData$additionalD = formData.additionalDetails) === null || _formData$additionalD === void 0 ? void 0 : (_formData$additionalD2 = _formData$additionalD.reasonForTransfer) === null || _formData$additionalD2 === void 0 ? void 0 : _formData$additionalD2.code)) {
        setSelectedDocument(null);
        setUploadedFile(null);
      }
    }
  }, [formData === null || formData === void 0 ? void 0 : (_formData$additionalD3 = formData.additionalDetails) === null || _formData$additionalD3 === void 0 ? void 0 : (_formData$additionalD4 = _formData$additionalD3.reasonForTransfer) === null || _formData$additionalD4 === void 0 ? void 0 : _formData$additionalD4.code]);
  if (filterCondition) {
    const {
      filterValue,
      jsonPath,
      onArray,
      arrayAttribute,
      formDataPath,
      formArrayAttrPath
    } = filterCondition;
    if (action === "create") {
      const value = formDataPath === null || formDataPath === void 0 ? void 0 : formDataPath.reduce((acc, key) => {
        if (key.charAt(0).toUpperCase() + key.slice(1) === "PropertyType") return acc["PropertyType"];
        return acc === null || acc === void 0 ? void 0 : acc[key];
      }, formData);
      let hideInput;
      if (value) {
        if (onArray) {
          const valueArr = value === null || value === void 0 ? void 0 : value.map(e => formArrayAttrPath.reduce((acc, f) => acc === null || acc === void 0 ? void 0 : acc[f], e) || e);
          hideInput = valueArr === null || valueArr === void 0 ? void 0 : valueArr.every(e => filterValue.includes(e));
        } else {
          hideInput = filterValue === null || filterValue === void 0 ? void 0 : filterValue.includes(value);
        }
        if (hideInput !== isHidden) setHidden(hideInput);
        if (hideInput) return null;
      }
    }
    if (action === "update") {
      var _a$split;
      const a = fromRawData ? jsonPath : jsonPath === null || jsonPath === void 0 ? void 0 : jsonPath.split("Properties[0].propertyDetails[0].")[1];
      const keyArr = a === null || a === void 0 ? void 0 : (_a$split = a.split(".")) === null || _a$split === void 0 ? void 0 : _a$split.map(e => {
        var _e$split$;
        return e.includes("[") ? (_e$split$ = e.split("[")[1]) === null || _e$split$ === void 0 ? void 0 : _e$split$.split("]")[0] : e;
      });
      const value = keyArr.reduce((acc, curr) => acc[curr], formData === null || formData === void 0 ? void 0 : formData.originalData);
      const formDataValue = formDataPath === null || formDataPath === void 0 ? void 0 : formDataPath.reduce((acc, key) => {
        if (key.charAt(0).toUpperCase() + key.slice(1) === "PropertyType") return acc["PropertyType"];
        return acc === null || acc === void 0 ? void 0 : acc[key];
      }, formData);
      let hideInput;
      if (value) {
        if (onArray) {
          if (enabledActions !== null && enabledActions !== void 0 && enabledActions[action].disableUpload) {
            hideInput = value === null || value === void 0 ? void 0 : value.every(e => filterValue === null || filterValue === void 0 ? void 0 : filterValue.includes(e[arrayAttribute]));
          } else {
            const valueArr = formDataValue === null || formDataValue === void 0 ? void 0 : formDataValue.map(e => formArrayAttrPath.reduce((acc, f) => acc === null || acc === void 0 ? void 0 : acc[f], e) || e);
            hideInput = valueArr === null || valueArr === void 0 ? void 0 : valueArr.every(e => filterValue === null || filterValue === void 0 ? void 0 : filterValue.includes(e));
          }
        } else hideInput = filterValue === null || filterValue === void 0 ? void 0 : filterValue.includes(value);
        if (hideInput !== isHidden) setHidden(hideInput);
        if (hideInput) return null;
      }
    }
  }
  if (dropdownFilter) {
    const {
      formDataPath,
      formArrayAttrPath,
      onArray,
      parentJsonpath,
      arrayAttribute,
      parentArrayJsonPath
    } = dropdownFilter;
    if (["create", "update"].includes(action)) {
      if (enabledActions !== null && enabledActions !== void 0 && enabledActions[action].disableUpload) {
        if (onArray) {
          const keyForArr = parentArrayJsonPath === null || parentArrayJsonPath === void 0 ? void 0 : parentArrayJsonPath.split("Properties[0].propertyDetails[0].")[1].split(".");
          const arr = keyForArr.reduce((acc, key) => acc[key], formData === null || formData === void 0 ? void 0 : formData.originalData);
          const valueMap = arr.map(val => parentJsonpath.split(".").reduce((acc, key) => acc[key], val));
          dropDownData = dropdownData.filter(e => e.parentValue.some(val => valueMap.includes(val)));
        } else {
          const keyForArr = parentJsonpath === null || parentJsonpath === void 0 ? void 0 : parentJsonpath.split("Properties[0].propertyDetails[0].")[1].split(".");
          const value = keyForArr.reduce((acc, key) => acc[key], formData === null || formData === void 0 ? void 0 : formData.originalData);
          dropDownData = dropdownData.filter(e => e.parentValue.includes(value));
        }
      } else {
        const arr = formDataPath;
        const value = arr === null || arr === void 0 ? void 0 : arr.reduce((acc, key) => acc === null || acc === void 0 ? void 0 : acc[key], formData);
        const attrForFormArray = formArrayAttrPath;
        if (value) {
          if (!onArray) {
            dropDownData = dropdownData.filter(e => e.parentValue.includes(value));
          } else {
            const valueMap = value.map(e => (attrForFormArray === null || attrForFormArray === void 0 ? void 0 : attrForFormArray.reduce((acc, key) => acc[key], e)) || e);
            dropDownData = dropdownData.filter(e => e.parentValue.some(val => valueMap.includes(val)));
          }
        }
      }
    }
  }
  if (((_dropDownData = dropDownData) === null || _dropDownData === void 0 ? void 0 : _dropDownData.length) === 0) {
    removeError();
    return null;
  }
  if (doc.code === "OWNER.TRANSFERREASONDOCUMENT") {
    dropDownData = dropDownData.filter(e => {
      var _e$code2, _formData$additionalD5, _formData$additionalD6;
      return ((_e$code2 = e.code) === null || _e$code2 === void 0 ? void 0 : _e$code2.split(".")[2]) === (formData === null || formData === void 0 ? void 0 : (_formData$additionalD5 = formData.additionalDetails) === null || _formData$additionalD5 === void 0 ? void 0 : (_formData$additionalD6 = _formData$additionalD5.reasonForTransfer) === null || _formData$additionalD6 === void 0 ? void 0 : _formData$additionalD6.code);
    });
  }
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: "24px"
    }
  }, doc !== null && doc !== void 0 && doc.hasDropdown ? /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t(doc === null || doc === void 0 ? void 0 : doc.code.replaceAll(".", "_")) + "  *"), /*#__PURE__*/React.createElement(Dropdown, {
    className: "form-field",
    selected: selectedDocument,
    disable: ((_dropDownData2 = dropDownData) === null || _dropDownData2 === void 0 ? void 0 : _dropDownData2.length) === 0 || (propertyInitialValues !== null && propertyInitialValues !== void 0 && propertyInitialValues.documents && (propertyInitialValues === null || propertyInitialValues === void 0 ? void 0 : propertyInitialValues.documents.length) > 0 && (propertyInitialValues === null || propertyInitialValues === void 0 ? void 0 : propertyInitialValues.documents.filter(document => document.documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code)).length) > 0 ? enabledActions === null || enabledActions === void 0 ? void 0 : enabledActions[action].disableDropdown : false),
    option: dropDownData.map(e => {
      var _e$code3;
      return {
        ...e,
        i18nKey: (_e$code3 = e.code) === null || _e$code3 === void 0 ? void 0 : _e$code3.replaceAll(".", "_")
      };
    }),
    select: handleSelectDocument,
    optionKey: "i18nKey",
    t: t
  })) : null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(UploadFile, {
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
    },
    id: id,
    message: uploadedFile ? `1 ${t(`CS_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`),
    textStyles: {
      width: "100%"
    },
    inputStyles: {
      width: "280px"
    },
    disabled: (propertyInitialValues !== null && propertyInitialValues !== void 0 && propertyInitialValues.documents && (propertyInitialValues === null || propertyInitialValues === void 0 ? void 0 : propertyInitialValues.documents.length) > 0 && (propertyInitialValues === null || propertyInitialValues === void 0 ? void 0 : propertyInitialValues.documents.filter(document => document.documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code)).length) > 0 ? enabledActions === null || enabledActions === void 0 ? void 0 : enabledActions[action].disableUpload : false) || !(selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code),
    buttonType: "button",
    error: !uploadedFile
  }))));
}

const UnOccupiedArea = ({
  t,
  config,
  onSelect,
  value,
  userType,
  formData
}) => {
  let index = window.location.href.split("/").pop();
  const onSkip = () => onSelect();
  let UnOccupiedArea, setUnOccupiedArea;
  if (!isNaN(index)) {
    [UnOccupiedArea, setUnOccupiedArea] = useState(formData.units && formData.units[index] && formData.units[index].UnOccupiedArea);
  } else {
    var _formData$UnOccupiedA;
    [UnOccupiedArea, setUnOccupiedArea] = useState(formData === null || formData === void 0 ? void 0 : (_formData$UnOccupiedA = formData.UnOccupiedArea) === null || _formData$UnOccupiedA === void 0 ? void 0 : _formData$UnOccupiedA.UnOccupiedArea);
  }
  let validation = {};
  const [unitareaerror, setunitareaerror] = useState(null);
  const [areanotzeroerror, setareanotzeroerror] = useState(null);
  function setPropertyUnOccupiedArea(e) {
    var _formData$PropertyTyp, _formData$PropertyTyp2, _formData$floordetail, _formData$landarea, _formData$Constructio, _formData$PropertyTyp3, _formData$selfOccupie, _formData$floordetail2;
    setUnOccupiedArea(e.target.value);
    setunitareaerror(null);
    setareanotzeroerror(null);
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.code) === "BUILTUP.INDEPENDENTPROPERTY") {
      var _formData$units$index, _formData$units$index2, _formData$units$index3, _formData$units$index4, _formData$units$index5, _formData$units$index6;
      let totalarea = parseInt((formData === null || formData === void 0 ? void 0 : (_formData$units$index = formData.units[index]) === null || _formData$units$index === void 0 ? void 0 : _formData$units$index.floorarea) || 0) + parseInt((formData === null || formData === void 0 ? void 0 : (_formData$units$index2 = formData.units[index]) === null || _formData$units$index2 === void 0 ? void 0 : _formData$units$index2.RentArea) || 0) + parseInt(e.target.value);
      if (parseInt(formData === null || formData === void 0 ? void 0 : (_formData$units$index3 = formData.units[index]) === null || _formData$units$index3 === void 0 ? void 0 : _formData$units$index3.builtUpArea) < totalarea) {
        setunitareaerror("PT_TOTUNITAREA_LESS_THAN_BUILTUP_ERR_MSG");
      } else if ((formData === null || formData === void 0 ? void 0 : (_formData$units$index4 = formData.units[index]) === null || _formData$units$index4 === void 0 ? void 0 : (_formData$units$index5 = _formData$units$index4.selfOccupied) === null || _formData$units$index5 === void 0 ? void 0 : _formData$units$index5.i18nKey) === "PT_YES_IT_IS_SELFOCCUPIED" && parseInt(formData === null || formData === void 0 ? void 0 : (_formData$units$index6 = formData.units[index]) === null || _formData$units$index6 === void 0 ? void 0 : _formData$units$index6.builtUpArea) == parseInt(e.target.value)) {
        setunitareaerror("PT_BUILTUP_UNOCCUPIED_AREA_NOT_SAME");
      }
    }
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp2 = formData.PropertyType) === null || _formData$PropertyTyp2 === void 0 ? void 0 : _formData$PropertyTyp2.code) === "BUILTUP.SHAREDPROPERTY" && parseInt(formData === null || formData === void 0 ? void 0 : (_formData$floordetail = formData.floordetails) === null || _formData$floordetail === void 0 ? void 0 : _formData$floordetail.builtUpArea) < parseInt(e.target.value) + parseInt((formData === null || formData === void 0 ? void 0 : (_formData$landarea = formData.landarea) === null || _formData$landarea === void 0 ? void 0 : _formData$landarea.floorarea) || "0") + parseInt((formData === null || formData === void 0 ? void 0 : (_formData$Constructio = formData.Constructiondetails) === null || _formData$Constructio === void 0 ? void 0 : _formData$Constructio.RentArea) || "0")) {
      setunitareaerror("PT_TOTUNITAREA_LESS_THAN_BUILTUP_ERR_MSG");
    } else if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp3 = formData.PropertyType) === null || _formData$PropertyTyp3 === void 0 ? void 0 : _formData$PropertyTyp3.code) === "BUILTUP.SHAREDPROPERTY" && (formData === null || formData === void 0 ? void 0 : (_formData$selfOccupie = formData.selfOccupied) === null || _formData$selfOccupie === void 0 ? void 0 : _formData$selfOccupie.i18nKey) === "PT_YES_IT_IS_SELFOCCUPIED" && parseInt(formData === null || formData === void 0 ? void 0 : (_formData$floordetail2 = formData.floordetails) === null || _formData$floordetail2 === void 0 ? void 0 : _formData$floordetail2.builtUpArea) == parseInt(e.target.value)) {
      setunitareaerror("PT_BUILTUP_UNOCCUPIED_AREA_NOT_SAME");
    }
    if (parseInt(e.target.value) == 0) {
      setareanotzeroerror("PT_AREA_NOT_0_MSG");
    }
  }
  const getheaderCaption = () => {
    var _formData$PropertyTyp4;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp4 = formData.PropertyType) === null || _formData$PropertyTyp4 === void 0 ? void 0 : _formData$PropertyTyp4.i18nKey) === "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY") {
      return "PT_FLOOR_DETAILS_HEADER";
    } else {
      return `PROPERTYTAX_FLOOR_${index}_DETAILS`;
    }
  };
  const goNext = () => {
    if (!isNaN(index)) {
      var _formData$noOfFloors, _formData$noOfFloors2, _formData$noOofBaseme, _formData$noOofBaseme2, _formData$noOofBaseme3;
      let unit = formData.units && formData.units[index];
      let floordet = {
        ...unit,
        UnOccupiedArea
      };
      onSelect(config.key, floordet, false, index);
      if ((formData === null || formData === void 0 ? void 0 : (_formData$noOfFloors = formData.noOfFloors) === null || _formData$noOfFloors === void 0 ? void 0 : _formData$noOfFloors.i18nKey) === "PT_GROUND_PLUS_ONE_OPTION" && index < 1 && index > -1) {
        let newIndex1 = parseInt(index) + 1;
        onSelect("floordetails", {}, true, newIndex1, true);
      } else if ((formData === null || formData === void 0 ? void 0 : (_formData$noOfFloors2 = formData.noOfFloors) === null || _formData$noOfFloors2 === void 0 ? void 0 : _formData$noOfFloors2.i18nKey) === "PT_GROUND_PLUS_TWO_OPTION" && index < 2 && index > -1) {
        let newIndex2 = parseInt(index) + 1;
        onSelect("floordetails", {}, true, newIndex2, true);
      } else if (((formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme = formData.noOofBasements) === null || _formData$noOofBaseme === void 0 ? void 0 : _formData$noOofBaseme.i18nKey) === "PT_ONE_BASEMENT_OPTION" || (formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme2 = formData.noOofBasements) === null || _formData$noOofBaseme2 === void 0 ? void 0 : _formData$noOofBaseme2.i18nKey) === "PT_TWO_BASEMENT_OPTION") && index > -1) {
        onSelect("floordetails", {}, true, "-1", true);
      } else if ((formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme3 = formData.noOofBasements) === null || _formData$noOofBaseme3 === void 0 ? void 0 : _formData$noOofBaseme3.i18nKey) === "PT_TWO_BASEMENT_OPTION" && index != -2) {
        onSelect("floordetails", {}, true, "-2", true);
      }
    } else {
      onSelect("UnOccupiedArea", {
        UnOccupiedArea
      });
    }
  };
  function onChange(e) {
    if (e.target.value.length > 1024) {
      setError("CS_COMMON_LANDMARK_MAX_LENGTH");
    } else {
      setError(null);
      setUnOccupiedArea(e.target.value);
      if (userType === "employee") {
        var _e$target, _e$target2;
        const value = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value;
        const key = e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.id;
        onSelect(key, value);
      }
    }
  }
  return /*#__PURE__*/React.createElement(FormStep, {
    config: (config.texts.headerCaption = getheaderCaption(), config),
    onChange: onChange,
    onSelect: goNext,
    forcedError: t(unitareaerror) || t(areanotzeroerror),
    onSkip: onSkip,
    t: t,
    isDisabled: unitareaerror || areanotzeroerror || !UnOccupiedArea,
    showErrorBelowChildren: true
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_UNOCCUPIED_AREA_SQ_FEET_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    isMandatory: false,
    type: "number",
    optionKey: "i18nKey",
    name: "RentArea",
    value: UnOccupiedArea,
    onChange: setPropertyUnOccupiedArea
  }, validation = {
    pattern: "^([0-9]){0,8}$",
    type: "number",
    title: t("PT_BUILT_AREA_ERROR_MESSAGE")
  })));
};

const createOwnerDetails = () => ({
  name: "",
  mobileNumber: "",
  fatherOrHusbandName: "",
  emailId: "",
  permanentAddress: "",
  relationship: "",
  ownerType: "",
  gender: "",
  isCorrespondenceAddress: false,
  key: Date.now()
});
const PTEmployeeOwnershipDetails = ({
  config,
  onSelect,
  userType,
  formData,
  setError,
  formState,
  clearErrors
}) => {
  var _formData$ownershipCa, _formData$ownershipCa2, _formData$ownershipCa3;
  const {
    t
  } = useTranslation();
  const {
    pathname
  } = useLocation();
  const isEditScreen = pathname.includes("/modify-application/");
  const [owners, setOwners] = useState((formData === null || formData === void 0 ? void 0 : formData.owners) || [createOwnerDetails()]);
  const [focusIndex, setFocusIndex] = useState({
    index: -1,
    type: ""
  });
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: mdmsData,
    isLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", ["UsageCategory", "OccupancyType", "Floor", "OwnerType", "OwnerShipCategory", "Documents", "SubOwnerShipCategory", "OwnerShipCategory"]);
  const {
    data: Menu
  } = Digit.Hooks.pt.usePTGenderMDMS(stateId, "common-masters", "GenderType");
  let menu = [];
  Menu && Menu.map(formGender => {
    menu.push({
      i18nKey: `PT_FORM3_${formGender.code}`,
      code: `${formGender.code}`,
      value: `${formGender.code}`
    });
  });
  const addNewOwner = () => {
    const newOwner = createOwnerDetails();
    setOwners(prev => [...prev, newOwner]);
  };
  const removeOwner = owner => {
    setOwners(prev => prev.filter(o => o.key != owner.key));
  };
  useEffect(() => {
    onSelect(config === null || config === void 0 ? void 0 : config.key, owners);
  }, [owners]);
  useEffect(() => {
    if (!(formData !== null && formData !== void 0 && formData.owners)) {
      setOwners([createOwnerDetails()]);
    }
  }, [formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa = formData.ownershipCategory) === null || _formData$ownershipCa === void 0 ? void 0 : _formData$ownershipCa.code]);
  const commonProps = {
    focusIndex,
    allOwners: owners,
    setFocusIndex,
    removeOwner,
    formData,
    formState,
    setOwners,
    mdmsData,
    t,
    setError,
    clearErrors,
    config,
    menu,
    isEditScreen
  };
  return formData !== null && formData !== void 0 && (_formData$ownershipCa2 = formData.ownershipCategory) !== null && _formData$ownershipCa2 !== void 0 && _formData$ownershipCa2.code ? /*#__PURE__*/React.createElement(React.Fragment, null, owners.map((owner, index) => /*#__PURE__*/React.createElement(OwnerForm, Object.assign({
    key: owner.key,
    index: index,
    owner: owner
  }, commonProps))), !isEditScreen && (formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa3 = formData.ownershipCategory) === null || _formData$ownershipCa3 === void 0 ? void 0 : _formData$ownershipCa3.code) === "INDIVIDUAL.MULTIPLEOWNERS" ? /*#__PURE__*/React.createElement(LinkButton, {
    label: "Add Owner",
    onClick: addNewOwner,
    style: {
      color: "orange"
    }
  }) : null) : null;
};
const OwnerForm = _props => {
  var _owner$institution, _formValue$institutio, _formValue$institutio2, _formValue$institutio3, _institution$type, _formValue$institutio4, _formValue$institutio5, _formValue$institutio6, _formValue$institutio7, _formData$ownershipCa5, _formData$ownershipCa7, _formData$ownershipCa8, _localFormState$touch, _localFormState$touch2, _errors$institution, _errors$institution$n, _localFormState$touch3, _localFormState$touch4, _errors$institution2, _errors$institution2$, _errors$name, _errors$gender, _errors$altContactNum, _errors$mobileNumber, _errors$fatherOrHusba, _errors$relationship, _errors$ownerType, _errors$designation, _formValue$ownerType2, _formValue$ownerType3, _owner$documents, _localFormState$touch5, _errors$documents, _errors$documents$doc, _owner$documents2, _localFormState$touch6, _errors$documents2, _errors$documents2$do, _errors$emailId, _errors$correspondenc;
  const {
    owner,
    index,
    focusIndex,
    allOwners,
    setFocusIndex,
    removeOwner,
    setOwners,
    t,
    mdmsData,
    formData,
    config,
    setError,
    clearErrors,
    formState,
    menu,
    isEditScreen
  } = _props;
  const {
    originalData = {}
  } = formData;
  const {
    institution = {}
  } = originalData;
  const {
    control,
    formState: localFormState,
    watch,
    setError: setLocalError,
    clearErrors: clearLocalErrors,
    setValue,
    trigger
  } = useForm();
  const formValue = watch();
  const {
    errors
  } = localFormState;
  owner["institution"] = {
    name: owner !== null && owner !== void 0 && (_owner$institution = owner.institution) !== null && _owner$institution !== void 0 && _owner$institution.name ? formValue === null || formValue === void 0 ? void 0 : (_formValue$institutio = formValue.institution) === null || _formValue$institutio === void 0 ? void 0 : _formValue$institutio.name : institution === null || institution === void 0 ? void 0 : institution.name
  };
  owner["institution"].type = {
    active: true,
    code: (formValue === null || formValue === void 0 ? void 0 : (_formValue$institutio2 = formValue.institution) === null || _formValue$institutio2 === void 0 ? void 0 : (_formValue$institutio3 = _formValue$institutio2.type) === null || _formValue$institutio3 === void 0 ? void 0 : _formValue$institutio3.code) || (institution === null || institution === void 0 ? void 0 : (_institution$type = institution.type) === null || _institution$type === void 0 ? void 0 : _institution$type.code),
    i18nKey: `COMMON_MASTERS_OWNERSHIPCATEGORY_${stringReplaceAll((formValue === null || formValue === void 0 ? void 0 : (_formValue$institutio4 = formValue.institution) === null || _formValue$institutio4 === void 0 ? void 0 : (_formValue$institutio5 = _formValue$institutio4.type) === null || _formValue$institutio5 === void 0 ? void 0 : _formValue$institutio5.code) || (institution === null || institution === void 0 ? void 0 : institution.type) || "")}`,
    name: t(`COMMON_MASTERS_OWNERSHIPCATEGORY_${stringReplaceAll((formValue === null || formValue === void 0 ? void 0 : (_formValue$institutio6 = formValue.institution) === null || _formValue$institutio6 === void 0 ? void 0 : (_formValue$institutio7 = _formValue$institutio6.type) === null || _formValue$institutio7 === void 0 ? void 0 : _formValue$institutio7.code) || (institution === null || institution === void 0 ? void 0 : institution.type) || "")}`)
  };
  owner.designation = owner !== null && owner !== void 0 && owner.designation ? formValue === null || formValue === void 0 ? void 0 : formValue.designation : institution === null || institution === void 0 ? void 0 : institution.designation;
  const specialDocsMenu = useMemo(() => {
    var _mdmsData$PropertyTax, _mdmsData$PropertyTax2, _mdmsData$PropertyTax3, _mdmsData$PropertyTax4, _mdmsData$PropertyTax5, _mdmsData$PropertyTax6;
    return (mdmsData === null || mdmsData === void 0 ? void 0 : (_mdmsData$PropertyTax = mdmsData.PropertyTax) === null || _mdmsData$PropertyTax === void 0 ? void 0 : (_mdmsData$PropertyTax2 = _mdmsData$PropertyTax.Documents) === null || _mdmsData$PropertyTax2 === void 0 ? void 0 : (_mdmsData$PropertyTax3 = _mdmsData$PropertyTax2.filter(e => e.code === "OWNER.SPECIALCATEGORYPROOF")) === null || _mdmsData$PropertyTax3 === void 0 ? void 0 : (_mdmsData$PropertyTax4 = _mdmsData$PropertyTax3[0].dropdownData) === null || _mdmsData$PropertyTax4 === void 0 ? void 0 : (_mdmsData$PropertyTax5 = (_mdmsData$PropertyTax6 = _mdmsData$PropertyTax4.filter(e => {
      var _formValue$ownerType;
      return e.parentValue.includes(formValue === null || formValue === void 0 ? void 0 : (_formValue$ownerType = formValue.ownerType) === null || _formValue$ownerType === void 0 ? void 0 : _formValue$ownerType.code);
    })).map) === null || _mdmsData$PropertyTax5 === void 0 ? void 0 : _mdmsData$PropertyTax5.call(_mdmsData$PropertyTax6, e => {
      var _e$code;
      return {
        i18nKey: (_e$code = e.code) === null || _e$code === void 0 ? void 0 : _e$code.replaceAll(".", "_"),
        code: e.code
      };
    })) || [];
  }, [mdmsData, formValue]);
  const ownerTypesMenu = useMemo(() => {
    var _mdmsData$PropertyTax7, _mdmsData$PropertyTax8, _mdmsData$PropertyTax9;
    return (mdmsData === null || mdmsData === void 0 ? void 0 : (_mdmsData$PropertyTax7 = mdmsData.PropertyTax) === null || _mdmsData$PropertyTax7 === void 0 ? void 0 : (_mdmsData$PropertyTax8 = _mdmsData$PropertyTax7.OwnerType) === null || _mdmsData$PropertyTax8 === void 0 ? void 0 : (_mdmsData$PropertyTax9 = _mdmsData$PropertyTax8.map) === null || _mdmsData$PropertyTax9 === void 0 ? void 0 : _mdmsData$PropertyTax9.call(_mdmsData$PropertyTax8, e => ({
      i18nKey: `${e.code.replaceAll("PROPERTY", "COMMON_MASTERS").replaceAll(".", "_")}`,
      code: e.code
    }))) || [];
  }, [mdmsData]);
  if ((ownerTypesMenu === null || ownerTypesMenu === void 0 ? void 0 : ownerTypesMenu.length) > 0) {
    ownerTypesMenu ? ownerTypesMenu.sort((a, b) => a.code.localeCompare(b.code)) : "";
    ownerTypesMenu === null || ownerTypesMenu === void 0 ? void 0 : ownerTypesMenu.forEach((data, index) => {
      if (data.code == "NONE") data.order = 0;else data.order = index + 1;
    });
    ownerTypesMenu.sort(function (a, b) {
      return a.order - b.order;
    });
  }
  const isIndividualTypeOwner = useMemo(() => {
    var _formData$ownershipCa4;
    return formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa4 = formData.ownershipCategory) === null || _formData$ownershipCa4 === void 0 ? void 0 : _formData$ownershipCa4.code.includes("INDIVIDUAL");
  }, [formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa5 = formData.ownershipCategory) === null || _formData$ownershipCa5 === void 0 ? void 0 : _formData$ownershipCa5.code]);
  const institutionTypeMenu = useMemo(() => {
    var _formData$ownershipCa6, _mdmsData$PropertyTax10, _mdmsData$PropertyTax11;
    const code = formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa6 = formData.ownershipCategory) === null || _formData$ownershipCa6 === void 0 ? void 0 : _formData$ownershipCa6.code;
    const arr = mdmsData === null || mdmsData === void 0 ? void 0 : (_mdmsData$PropertyTax10 = mdmsData.PropertyTax) === null || _mdmsData$PropertyTax10 === void 0 ? void 0 : (_mdmsData$PropertyTax11 = _mdmsData$PropertyTax10.SubOwnerShipCategory) === null || _mdmsData$PropertyTax11 === void 0 ? void 0 : _mdmsData$PropertyTax11.filter(e => {
      var _e$ownerShipCategory;
      return e === null || e === void 0 ? void 0 : (_e$ownerShipCategory = e.ownerShipCategory) === null || _e$ownerShipCategory === void 0 ? void 0 : _e$ownerShipCategory.includes(code);
    });
    return arr === null || arr === void 0 ? void 0 : arr.map(e => {
      var _e$code2;
      return {
        ...e,
        i18nKey: `COMMON_MASTERS_OWNERSHIPCATEGORY_${(_e$code2 = e.code) === null || _e$code2 === void 0 ? void 0 : _e$code2.replaceAll(".", "_")}`
      };
    });
  }, [mdmsData, formData === null || formData === void 0 ? void 0 : formData.ownershipCategory]);
  useEffect(() => {
    trigger();
  }, []);
  const [part, setPart] = React.useState({});
  useEffect(() => {
    let _ownerType = isIndividualTypeOwner ? {} : {
      ownerType: {
        code: "NONE"
      }
    };
    if (!lodash.isEqual(part, formValue)) {
      setPart({
        ...formValue
      });
      setOwners(prev => prev.map(o => o.key && o.key === owner.key ? {
        ...o,
        ...formValue,
        ..._ownerType
      } : {
        ...o
      }));
      trigger();
    }
  }, [formValue]);
  useEffect(() => {
    var _formState$errors$con;
    if (Object.keys(errors).length && !lodash.isEqual(((_formState$errors$con = formState.errors[config.key]) === null || _formState$errors$con === void 0 ? void 0 : _formState$errors$con.type) || {}, errors)) setError(config.key, {
      type: errors
    });else if (!Object.keys(errors).length && formState.errors[config.key]) clearErrors(config.key);
  }, [errors]);
  const errorStyle = {
    width: "70%",
    marginLeft: "30%",
    fontSize: "12px",
    marginTop: "-21px"
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: "16px"
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "label-field-pair"
  }, /*#__PURE__*/React.createElement("h2", {
    className: "card-label card-label-smaller",
    style: {
      color: "#505A5F"
    }
  }, isIndividualTypeOwner ? `Owner ${formData !== null && formData !== void 0 && (_formData$ownershipCa7 = formData.ownershipCategory) !== null && _formData$ownershipCa7 !== void 0 && (_formData$ownershipCa8 = _formData$ownershipCa7.code) !== null && _formData$ownershipCa8 !== void 0 && _formData$ownershipCa8.includes("MULTIPLE") ? index + 1 : ""}` : "Authorised Person Details")), /*#__PURE__*/React.createElement("div", {
    style: {
      border: "1px solid #E3E3E3",
      padding: "16px",
      marginTop: "8px"
    }
  }, (allOwners === null || allOwners === void 0 ? void 0 : allOwners.length) > 2 ? /*#__PURE__*/React.createElement("div", {
    onClick: () => removeOwner(owner),
    style: {
      marginBottom: "16px",
      padding: "5px",
      cursor: "pointer",
      textAlign: "right"
    }
  }, "X") : null, !isIndividualTypeOwner ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_INSTITUTION_NAME") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "institution.name",
    defaultValue: isEditScreen ? institution !== null && institution !== void 0 && institution.name ? institution.name : owner === null || owner === void 0 ? void 0 : owner.name : null,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG"),
      validate: {
        pattern: v => /^[a-zA-Z_@./()#&+-\s]*$/.test(v) ? true : t("ERR_DEFAULT_INPUT_FIELD_MSG")
      }
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      name: "institution.name",
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "institution.name",
      onChange: e => {
        props.onChange(e.target.value);
        setFocusIndex({
          index: owner.key,
          type: "institution.name"
        });
      },
      onBlur: e => {
        setFocusIndex({
          index: -1
        });
        props.onBlur(e);
      }
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, (_localFormState$touch = localFormState.touched) !== null && _localFormState$touch !== void 0 && (_localFormState$touch2 = _localFormState$touch.institution) !== null && _localFormState$touch2 !== void 0 && _localFormState$touch2.name ? errors === null || errors === void 0 ? void 0 : (_errors$institution = errors.institution) === null || _errors$institution === void 0 ? void 0 : (_errors$institution$n = _errors$institution.name) === null || _errors$institution$n === void 0 ? void 0 : _errors$institution$n.message : ""), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_INSTITUTION_TYPE") + " *"), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "institution.type",
    defaultValue: isEditScreen ? {
      active: true,
      code: institution === null || institution === void 0 ? void 0 : institution.type,
      i18nKey: `COMMON_MASTERS_OWNERSHIPCATEGORY_${stringReplaceAll((institution === null || institution === void 0 ? void 0 : institution.type) || "")}`,
      name: t(`COMMON_MASTERS_OWNERSHIPCATEGORY_${stringReplaceAll((institution === null || institution === void 0 ? void 0 : institution.type) || "")}`)
    } : null,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      option: institutionTypeMenu,
      optionKey: "i18nKey",
      disable: isEditScreen,
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, (_localFormState$touch3 = localFormState.touched) !== null && _localFormState$touch3 !== void 0 && (_localFormState$touch4 = _localFormState$touch3.institution) !== null && _localFormState$touch4 !== void 0 && _localFormState$touch4.type ? errors === null || errors === void 0 ? void 0 : (_errors$institution2 = errors.institution) === null || _errors$institution2 === void 0 ? void 0 : (_errors$institution2$ = _errors$institution2.type) === null || _errors$institution2$ === void 0 ? void 0 : _errors$institution2$.message : "")) : null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_OWNER_NAME") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "name",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.name,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG"),
      validate: {
        pattern: val => /^[a-zA-Z\s]*$/.test(val) ? true : t("ERR_DEFAULT_INPUT_FIELD_MSG")
      }
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "name",
      onChange: e => {
        props.onChange(e.target.value);
        setFocusIndex({
          index: owner.key,
          type: "name"
        });
      },
      onBlur: e => {
        setFocusIndex({
          index: -1
        });
        props.onBlur(e);
      }
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.name ? errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message : ""), isIndividualTypeOwner ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM3_GENDER") + " *"), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "gender",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.gender,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      select: props.onChange,
      disable: isEditScreen,
      onBlur: props.onBlur,
      option: menu,
      optionKey: "i18nKey",
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.gender ? errors === null || errors === void 0 ? void 0 : (_errors$gender = errors.gender) === null || _errors$gender === void 0 ? void 0 : _errors$gender.message : "")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_LANDLINE_NUMBER_FLOATING_LABEL") + (isIndividualTypeOwner ? "" : " *")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "altContactNumber",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.altContactNumber,
    rules: isIndividualTypeOwner ? {} : {
      required: t("CORE_COMMON_REQUIRED_ERRMSG"),
      validate: {
        pattern: e => /^[0-9]{11}$/i.test(e) ? true : t("ERR_DEFAULT_INPUT_FIELD_MSG")
      }
    },
    render: props => /*#__PURE__*/React.createElement(MobileNumber, {
      value: props.value,
      hideSpan: true,
      disable: isEditScreen,
      maxLength: 11,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "altContactNumber",
      onChange: e => {
        props.onChange(e);
        setFocusIndex({
          index: owner.key,
          type: "altContactNumber"
        });
      },
      labelStyle: {
        marginTop: "unset"
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.altContactNumber ? errors === null || errors === void 0 ? void 0 : (_errors$altContactNum = errors.altContactNumber) === null || _errors$altContactNum === void 0 ? void 0 : _errors$altContactNum.message : "")), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM3_MOBILE_NUMBER") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "mobileNumber",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.mobileNumber,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG"),
      validate: v => /^[6789]\d{9}$/.test(v) ? true : t("ERR_DEFAULT_INPUT_FIELD_MSG")
    },
    render: props => /*#__PURE__*/React.createElement(MobileNumber, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "mobileNumber",
      onChange: e => {
        props.onChange(e);
        setFocusIndex({
          index: owner.key,
          type: "mobileNumber"
        });
      },
      labelStyle: {
        marginTop: "unset"
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.mobileNumber ? errors === null || errors === void 0 ? void 0 : (_errors$mobileNumber = errors.mobileNumber) === null || _errors$mobileNumber === void 0 ? void 0 : _errors$mobileNumber.message : ""), isIndividualTypeOwner ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_SEARCHPROPERTY_TABEL_GUARDIANNAME") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "fatherOrHusbandName",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG"),
      validate: {
        pattern: val => /^\w+( +\w+)*$/.test(val) ? true : t("ERR_DEFAULT_INPUT_FIELD_MSG")
      }
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "fatherOrHusbandName",
      onChange: e => {
        props.onChange(e.target.value);
        setFocusIndex({
          index: owner.key,
          type: "fatherOrHusbandName"
        });
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.fatherOrHusbandName ? errors === null || errors === void 0 ? void 0 : (_errors$fatherOrHusba = errors.fatherOrHusbandName) === null || _errors$fatherOrHusba === void 0 ? void 0 : _errors$fatherOrHusba.message : ""), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM3_RELATIONSHIP") + " *"), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "relationship",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.relationship,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      disable: isEditScreen,
      option: [{
        i18nKey: "PT_FORM3_FATHER",
        code: "FATHER"
      }, {
        i18nKey: "PT_FORM3_HUSBAND",
        code: "HUSBAND"
      }],
      optionKey: "i18nKey",
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.relationship ? errors === null || errors === void 0 ? void 0 : (_errors$relationship = errors.relationship) === null || _errors$relationship === void 0 ? void 0 : _errors$relationship.message : ""), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_FORM3_SPECIAL_CATEGORY") + " *"), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "ownerType",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.ownerType,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      option: ownerTypesMenu,
      disable: isEditScreen,
      optionKey: "i18nKey",
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.ownerType ? errors === null || errors === void 0 ? void 0 : (_errors$ownerType = errors.ownerType) === null || _errors$ownerType === void 0 ? void 0 : _errors$ownerType.message : "")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("TL_NEW_DESIG_OWNER_LABEL") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "designation",
    defaultValue: isEditScreen ? (institution === null || institution === void 0 ? void 0 : institution.designation) || "" : null,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "designation",
      onChange: e => {
        props.onChange(e.target.value);
        setFocusIndex({
          index: owner.key,
          type: "designation"
        });
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.designation ? errors === null || errors === void 0 ? void 0 : (_errors$designation = errors.designation) === null || _errors$designation === void 0 ? void 0 : _errors$designation.message : "")), (_formValue$ownerType2 = formValue.ownerType) !== null && _formValue$ownerType2 !== void 0 && _formValue$ownerType2.code && ((_formValue$ownerType3 = formValue.ownerType) === null || _formValue$ownerType3 === void 0 ? void 0 : _formValue$ownerType3.code) !== "NONE" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_OWNERSHIP_DOCUMENT_TYPE") + " *"), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "documents.documentType",
    defaultValue: owner === null || owner === void 0 ? void 0 : (_owner$documents = owner.documents) === null || _owner$documents === void 0 ? void 0 : _owner$documents.documentType,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      className: "form-field",
      selected: props.value,
      select: props.onChange,
      disable: isEditScreen,
      onBlur: props.onBlur,
      option: specialDocsMenu,
      optionKey: "i18nKey",
      t: t
    })
  })), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, (_localFormState$touch5 = localFormState.touched.documents) !== null && _localFormState$touch5 !== void 0 && _localFormState$touch5.documentType ? errors === null || errors === void 0 ? void 0 : (_errors$documents = errors.documents) === null || _errors$documents === void 0 ? void 0 : (_errors$documents$doc = _errors$documents.documentType) === null || _errors$documents$doc === void 0 ? void 0 : _errors$documents$doc.message : ""), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_OWNERSHIP_DOCUMENT_ID") + " *"), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "documents.documentUid",
    defaultValue: owner === null || owner === void 0 ? void 0 : (_owner$documents2 = owner.documents) === null || _owner$documents2 === void 0 ? void 0 : _owner$documents2.documentUid,
    rules: {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "documents.documentUid",
      onChange: e => {
        props.onChange(e);
        setFocusIndex({
          index: owner.key,
          type: "documents.documentUid"
        });
      },
      labelStyle: {
        marginTop: "unset"
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, (_localFormState$touch6 = localFormState.touched.documents) !== null && _localFormState$touch6 !== void 0 && _localFormState$touch6.documentUid ? errors === null || errors === void 0 ? void 0 : (_errors$documents2 = errors.documents) === null || _errors$documents2 === void 0 ? void 0 : (_errors$documents2$do = _errors$documents2.documentUid) === null || _errors$documents2$do === void 0 ? void 0 : _errors$documents2$do.message : ""), " ") : null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_OWNERSHIP_INFO_EMAIL_ID")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "emailId",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.emailId,
    rules: {
      validate: e => e && /^[^\s@]+@[^\s@]+$/.test(e) || !e ? true : t("ERR_DEFAULT_INPUT_FIELD_MSG")
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "emailId",
      onChange: e => {
        props.onChange(e);
        setFocusIndex({
          index: owner.key,
          type: "emailId"
        });
      },
      labelStyle: {
        marginTop: "unset"
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.emailId ? errors === null || errors === void 0 ? void 0 : (_errors$emailId = errors.emailId) === null || _errors$emailId === void 0 ? void 0 : _errors$emailId.message : ""), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller"
  }, t("PT_OWNERSHIP_INFO_CORR_ADDR") + (isIndividualTypeOwner ? "" : " *")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "correspondenceAddress",
    defaultValue: owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress,
    rules: isIndividualTypeOwner ? {} : {
      required: t("CORE_COMMON_REQUIRED_ERRMSG")
    },
    render: props => /*#__PURE__*/React.createElement(TextInput, {
      value: props.value,
      disable: isEditScreen,
      autoFocus: focusIndex.index === (owner === null || owner === void 0 ? void 0 : owner.key) && focusIndex.type === "correspondenceAddress",
      onChange: e => {
        props.onChange(e);
        setFocusIndex({
          index: owner.key,
          type: "correspondenceAddress"
        });
      },
      onBlur: props.onBlur
    })
  }))), /*#__PURE__*/React.createElement(CardLabelError, {
    style: errorStyle
  }, localFormState.touched.correspondenceAddress ? errors === null || errors === void 0 ? void 0 : (_errors$correspondenc = errors.correspondenceAddress) === null || _errors$correspondenc === void 0 ? void 0 : _errors$correspondenc.message : ""))));
};

const PTSearchFields = {
  searchId: {
    propertyIds: {
      type: "text",
      label: "PT_PROPERTY_UNIQUE_ID",
      placeHolder: "PT_PROPERTY_UNIQUE_ID_PLACEHOLDER",
      validation: {
        pattern: {
          value: /[A-Za-z]{2}\-[A-Za-z]{2}\-[0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[0-9]{6}/,
          message: "ERR_INVALID_PROPERTY_ID"
        }
      }
    },
    oldPropertyId: {
      type: "text",
      label: "PT_EXISTING_PROPERTY_ID",
      placeholder: "PT_EXISTING_PROPERTY_ID_PLACEHOLDER",
      validation: {
        pattern: {
          value: /[A-Za-z]{2}\-[A-Za-z]{2}\-[0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[0-9]{6}/,
          message: "ERR_INVALID_PROPERTY_ID"
        }
      }
    },
    mobileNumber: {
      type: "number",
      label: "PT_HOME_SEARCH_RESULTS_OWN_MOB_LABEL",
      placeHolder: "PT_HOME_SEARCH_RESULTS_OWN_MOB_PLACEHOLDER",
      validation: {
        minLength: {
          value: 10,
          message: "CORE_COMMON_MOBILE_ERROR"
        },
        maxLength: {
          value: 10,
          message: "CORE_COMMON_MOBILE_ERROR"
        },
        pattern: {
          value: /[6789][0-9]{9}/,
          message: "CORE_COMMON_MOBILE_ERROR"
        }
      }
    }
  },
  searchDetail: {
    locality: {
      type: "custom",
      label: "PT_SEARCH_LOCALITY",
      placeHolder: "PT_SEARCH_LOCALITY_PLACEHOLDER",
      validation: {
        required: "PTLOCALITYMANDATORY"
      },
      customComponent: Localities,
      customCompProps: {
        boundaryType: "revenue",
        keepNull: false,
        optionCardStyles: {
          height: "600px",
          overflow: "auto",
          zIndex: "10"
        },
        disableLoader: true
      }
    },
    doorNo: {
      type: "text",
      label: "PT_SEARCHPROPERTY_TABEL_DOOR_NO",
      placeHolder: "PT_SEARCH_DOOR_NO_PLACEHOLDER",
      validation: {
        pattern: {
          value: "[A-Za-z0-9#,/ -()]{1,63}",
          message: "ERR_INVALID_DOOR_NO"
        }
      }
    },
    name: {
      type: "text",
      label: "PT_SEARCHPROPERTY_TABEL_OWNERNAME",
      placeHolder: "PT_SEARCH_OWNER_NAME_PLACEHOLDER",
      validation: {
        minLength: {
          value: 3,
          message: "PT_MIN_3CHAR"
        },
        pattern: {
          value: "[A-Za-z .`'-]{3,63}",
          message: "PAYMENT_INVALID_NAME"
        }
      }
    }
  }
};
const defaultValues = {
  propertyIds: "",
  mobileNumber: "",
  oldPropertyId: "",
  locality: "",
  name: "",
  doorNo: ""
};
const Search = () => {
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [payload, setPayload] = useState({});
  const [formData, setFormData] = useState(defaultValues);
  const [searchBy, setSearchBy] = useState("searchId");
  const [showToast, setShowToast] = useState(null);
  const SearchComponent = memo(Digit.ComponentRegistryService.getComponent("PropertySearchForm"));
  const SearchResultComponent = memo(Digit.ComponentRegistryService.getComponent("PropertySearchResults"));
  const {
    data: ptSearchConfig,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "DIGIT-UI", "HelpText", {
    select: data => {
      var _data$DIGITUI, _data$DIGITUI$HelpTex, _data$DIGITUI$HelpTex2;
      return data === null || data === void 0 ? void 0 : (_data$DIGITUI = data["DIGIT-UI"]) === null || _data$DIGITUI === void 0 ? void 0 : (_data$DIGITUI$HelpTex = _data$DIGITUI["HelpText"]) === null || _data$DIGITUI$HelpTex === void 0 ? void 0 : (_data$DIGITUI$HelpTex2 = _data$DIGITUI$HelpTex[0]) === null || _data$DIGITUI$HelpTex2 === void 0 ? void 0 : _data$DIGITUI$HelpTex2.PT;
    }
  });
  const onReset = useCallback(() => {
    setFormData(defaultValues);
    setPayload({});
    setShowToast(null);
  });
  useEffect(() => {
    if (sessionStorage.getItem("searchDetailValue") == 1 && searchBy === "searchId") {
      setSearchBy("searchDetail");
    }
  }, [searchBy]);
  const onSubmit = useCallback(_data => {
    setFormData(_data);
    if (Object.keys(_data).filter(k => _data[k] && typeof _data[k] !== "object").length > 0) {
      setPayload(Object.keys(_data).filter(k => _data[k]).reduce((acc, key) => ({
        ...acc,
        [key]: typeof _data[key] === "object" ? _data[key].code : _data[key]
      }), {}));
      setShowToast(null);
    } else {
      setShowToast({
        warning: true,
        label: "ERR_PT_FILL_VALID_FIELDS"
      });
    }
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, t("SEARCH_PROPERTY")), /*#__PURE__*/React.createElement(SearchComponent, {
    t: t,
    payload: formData,
    searchBy: searchBy,
    setSearchBy: setSearchBy,
    PTSearchFields: PTSearchFields,
    tenantId: tenantId,
    onSubmit: onSubmit,
    onReset: onReset
  }), Object.keys(payload).length > 0 && /*#__PURE__*/React.createElement(SearchResultComponent, {
    t: t,
    showToast: showToast,
    setShowToast: setShowToast,
    tenantId: tenantId,
    payload: payload,
    ptSearchConfig: {
      ...ptSearchConfig
    }
  }), showToast && /*#__PURE__*/React.createElement(Toast, {
    error: showToast.error,
    warning: showToast.warning,
    label: t(showToast.label),
    onClose: () => {
      setShowToast(null);
    }
  }));
};

const PTPayments = ({
  application
}) => {
  var _application$paymentD, _application$paymentD2, _application$paymentD3, _application$paymentD4, _application$paymentD5, _application$owners, _application$paymentD6, _application$paymentD7, _application$paymentD8, _application$paymentD9;
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(KeyNote, {
    noteStyle: {
      fontSize: "24px",
      fontWeight: "700"
    },
    keyValue: t("CS_PAYMENT_AMOUNT_PAID_WITHOUT_SYMBOL"),
    note: `₹ ${application === null || application === void 0 ? void 0 : (_application$paymentD = application.paymentDetails) === null || _application$paymentD === void 0 ? void 0 : (_application$paymentD2 = _application$paymentD[0]) === null || _application$paymentD2 === void 0 ? void 0 : _application$paymentD2.totalAmountPaid}`
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_SEARCHPROPERTY_TABEL_PID"),
    note: t(application === null || application === void 0 ? void 0 : (_application$paymentD3 = application.paymentDetails) === null || _application$paymentD3 === void 0 ? void 0 : (_application$paymentD4 = _application$paymentD3[0]) === null || _application$paymentD4 === void 0 ? void 0 : (_application$paymentD5 = _application$paymentD4.bill) === null || _application$paymentD5 === void 0 ? void 0 : _application$paymentD5.consumerCode)
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_OWNERS_NAME"),
    note: application === null || application === void 0 ? void 0 : (_application$owners = application.owners) === null || _application$owners === void 0 ? void 0 : _application$owners.map(owner => owner === null || owner === void 0 ? void 0 : owner.name).join(",")
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_RECEIPT_DATE_LABEL"),
    note: convertEpochToDate(application === null || application === void 0 ? void 0 : (_application$paymentD6 = application.paymentDetails) === null || _application$paymentD6 === void 0 ? void 0 : (_application$paymentD7 = _application$paymentD6[0]) === null || _application$paymentD7 === void 0 ? void 0 : _application$paymentD7.receiptDate) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_RECEIPT_NO_LABEL"),
    note: t(application === null || application === void 0 ? void 0 : (_application$paymentD8 = application.paymentDetails) === null || _application$paymentD8 === void 0 ? void 0 : (_application$paymentD9 = _application$paymentD8[0]) === null || _application$paymentD9 === void 0 ? void 0 : _application$paymentD9.receiptNumber)
  }), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_DOWNLOAD_RECEIPT"),
    onSubmit: e => {
      var _application$paymentD10, _application$paymentD11, _application$paymentD12;
      return DownloadReceipt(application === null || application === void 0 ? void 0 : (_application$paymentD10 = application.paymentDetails) === null || _application$paymentD10 === void 0 ? void 0 : (_application$paymentD11 = _application$paymentD10[0]) === null || _application$paymentD11 === void 0 ? void 0 : (_application$paymentD12 = _application$paymentD11.bill) === null || _application$paymentD12 === void 0 ? void 0 : _application$paymentD12.consumerCode, application === null || application === void 0 ? void 0 : application.tenantId, "PT");
    }
  }));
};

const PTMyPayments = () => {
  var _result$data, _result$data$Properti, _result$data2, _result$data3;
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const result = Digit.Hooks.pt.usePropertySearch({});
  const consumerCode = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$Properti = _result$data.Properties) === null || _result$data$Properti === void 0 ? void 0 : _result$data$Properti.map(a => a.propertyId).join(",");
  const {
    data,
    isLoading,
    error
  } = Digit.Hooks.pt.useMyPropertyPayments({
    tenantId: tenantId,
    filters: {
      consumerCodes: consumerCode
    }
  }, {
    enabled: (result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : _result$data2.Properties.length) > 0 ? true : false,
    propertyData: result === null || result === void 0 ? void 0 : (_result$data3 = result.data) === null || _result$data3 === void 0 ? void 0 : _result$data3.Properties
  });
  if (isLoading || result !== null && result !== void 0 && result.isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const applicationsList = data && (data === null || data === void 0 ? void 0 : data.Payments) || [];
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, `${t("PT_MY_PAYMENTS_HEADER")} ${applicationsList ? `(${applicationsList.length})` : ""}`), /*#__PURE__*/React.createElement("div", null, (applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.length) > 0 && applicationsList.map((application, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(PTPayments, {
    application: application
  }))), !(applicationsList !== null && applicationsList !== void 0 && applicationsList.length) > 0 && /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_NO_APPLICATION_FOUND_MSG"))));
};

const hideBackButtonConfig = [{
  screenPath: "property/new-application/acknowledgement"
}, {
  screenPath: "property/edit-application/acknowledgement"
}];
const App = () => {
  var _Digit, _Digit$ComponentRegis, _Digit2, _Digit2$ComponentRegi, _Digit3, _Digit3$ComponentRegi, _Digit4, _Digit4$ComponentRegi, _Digit5, _Digit5$ComponentRegi, _Digit6, _Digit6$ComponentRegi, _Digit7, _Digit7$ComponentRegi, _Digit8, _Digit8$ComponentRegi, _Digit9, _Digit9$ComponentRegi, _Digit10, _Digit10$ComponentReg;
  const {
    path,
    url,
    ...match
  } = useRouteMatch();
  const {
    t
  } = useTranslation();
  const CreateProperty = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("PTCreateProperty");
  const EditProperty = (_Digit2 = Digit) === null || _Digit2 === void 0 ? void 0 : (_Digit2$ComponentRegi = _Digit2.ComponentRegistryService) === null || _Digit2$ComponentRegi === void 0 ? void 0 : _Digit2$ComponentRegi.getComponent("PTEditProperty");
  const SearchPropertyComponent = (_Digit3 = Digit) === null || _Digit3 === void 0 ? void 0 : (_Digit3$ComponentRegi = _Digit3.ComponentRegistryService) === null || _Digit3$ComponentRegi === void 0 ? void 0 : _Digit3$ComponentRegi.getComponent("PTSearchPropertyComponent");
  const SearchResultsComponent = (_Digit4 = Digit) === null || _Digit4 === void 0 ? void 0 : (_Digit4$ComponentRegi = _Digit4.ComponentRegistryService) === null || _Digit4$ComponentRegi === void 0 ? void 0 : _Digit4$ComponentRegi.getComponent("PTSearchResultsComponent");
  const PTApplicationDetails = (_Digit5 = Digit) === null || _Digit5 === void 0 ? void 0 : (_Digit5$ComponentRegi = _Digit5.ComponentRegistryService) === null || _Digit5$ComponentRegi === void 0 ? void 0 : _Digit5$ComponentRegi.getComponent("PTApplicationDetails");
  const PTMyApplications = (_Digit6 = Digit) === null || _Digit6 === void 0 ? void 0 : (_Digit6$ComponentRegi = _Digit6.ComponentRegistryService) === null || _Digit6$ComponentRegi === void 0 ? void 0 : _Digit6$ComponentRegi.getComponent("PTMyApplications");
  const MyProperties = (_Digit7 = Digit) === null || _Digit7 === void 0 ? void 0 : (_Digit7$ComponentRegi = _Digit7.ComponentRegistryService) === null || _Digit7$ComponentRegi === void 0 ? void 0 : _Digit7$ComponentRegi.getComponent("PTMyProperties");
  const MutateProperty = (_Digit8 = Digit) === null || _Digit8 === void 0 ? void 0 : (_Digit8$ComponentRegi = _Digit8.ComponentRegistryService) === null || _Digit8$ComponentRegi === void 0 ? void 0 : _Digit8$ComponentRegi.getComponent("PTMutateProperty");
  const PropertyInformation = (_Digit9 = Digit) === null || _Digit9 === void 0 ? void 0 : (_Digit9$ComponentRegi = _Digit9.ComponentRegistryService) === null || _Digit9$ComponentRegi === void 0 ? void 0 : _Digit9$ComponentRegi.getComponent("PropertyInformation");
  const PropertyOwnerHistory = (_Digit10 = Digit) === null || _Digit10 === void 0 ? void 0 : (_Digit10$ComponentReg = _Digit10.ComponentRegistryService) === null || _Digit10$ComponentReg === void 0 ? void 0 : _Digit10$ComponentReg.getComponent("PropertyOwnerHistory");
  return /*#__PURE__*/React.createElement("span", {
    className: "pt-citizen"
  }, /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(AppContainer, null, !shouldHideBackButton(hideBackButtonConfig) ? /*#__PURE__*/React.createElement(BackButton, null, "Back") : "", /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/new-application`,
    component: CreateProperty
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/edit-application`,
    component: EditProperty
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${path}/property/citizen-search`,
    component: SearchPropertyComponent
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${path}/property/search-results`,
    component: SearchResultsComponent
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/application/:acknowledgementIds/:tenantId`,
    component: PTApplicationDetails
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/my-applications`,
    component: PTMyApplications
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/my-properties`,
    component: MyProperties
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/my-payments`,
    component: PTMyPayments
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/property-mutation`,
    component: MutateProperty
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/properties/:propertyIds`,
    component: PropertyInformation
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/owner-history/:tenantId/:propertyIds`,
    component: PropertyOwnerHistory
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property/search`,
    component: props => /*#__PURE__*/React.createElement(Search, Object.assign({}, props, {
      t: t,
      parentRoute: path
    }))
  }))));
};

var b = "function" === typeof Symbol && Symbol.for,
  c = b ? Symbol.for("react.element") : 60103,
  d = b ? Symbol.for("react.portal") : 60106,
  e = b ? Symbol.for("react.fragment") : 60107,
  f = b ? Symbol.for("react.strict_mode") : 60108,
  g = b ? Symbol.for("react.profiler") : 60114,
  h = b ? Symbol.for("react.provider") : 60109,
  k = b ? Symbol.for("react.context") : 60110,
  l = b ? Symbol.for("react.async_mode") : 60111,
  m = b ? Symbol.for("react.concurrent_mode") : 60111,
  n = b ? Symbol.for("react.forward_ref") : 60112,
  p = b ? Symbol.for("react.suspense") : 60113,
  q = b ? Symbol.for("react.suspense_list") : 60120,
  r = b ? Symbol.for("react.memo") : 60115,
  t = b ? Symbol.for("react.lazy") : 60116,
  v = b ? Symbol.for("react.block") : 60121,
  w = b ? Symbol.for("react.fundamental") : 60117,
  x = b ? Symbol.for("react.responder") : 60118,
  y = b ? Symbol.for("react.scope") : 60119;
function z(a) {
  if ("object" === typeof a && null !== a) {
    var u = a.$$typeof;
    switch (u) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t:
              case r:
              case h:
                return a;
              default:
                return u;
            }
        }
      case d:
        return u;
    }
  }
}
function A(a) {
  return z(a) === m;
}
var AsyncMode = l;
var ConcurrentMode = m;
var ContextConsumer = k;
var ContextProvider = h;
var Element = c;
var ForwardRef = n;
var Fragment = e;
var Lazy = t;
var Memo = r;
var Portal = d;
var Profiler = g;
var StrictMode = f;
var Suspense = p;
var isAsyncMode = function (a) {
  return A(a) || z(a) === l;
};
var isConcurrentMode = A;
var isContextConsumer = function (a) {
  return z(a) === k;
};
var isContextProvider = function (a) {
  return z(a) === h;
};
var isElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};
var isForwardRef = function (a) {
  return z(a) === n;
};
var isFragment = function (a) {
  return z(a) === e;
};
var isLazy = function (a) {
  return z(a) === t;
};
var isMemo = function (a) {
  return z(a) === r;
};
var isPortal = function (a) {
  return z(a) === d;
};
var isProfiler = function (a) {
  return z(a) === g;
};
var isStrictMode = function (a) {
  return z(a) === f;
};
var isSuspense = function (a) {
  return z(a) === p;
};
var isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};
var typeOf = z;
var reactIs_production_min = {
  AsyncMode: AsyncMode,
  ConcurrentMode: ConcurrentMode,
  ContextConsumer: ContextConsumer,
  ContextProvider: ContextProvider,
  Element: Element,
  ForwardRef: ForwardRef,
  Fragment: Fragment,
  Lazy: Lazy,
  Memo: Memo,
  Portal: Portal,
  Profiler: Profiler,
  StrictMode: StrictMode,
  Suspense: Suspense,
  isAsyncMode: isAsyncMode,
  isConcurrentMode: isConcurrentMode,
  isContextConsumer: isContextConsumer,
  isContextProvider: isContextProvider,
  isElement: isElement,
  isForwardRef: isForwardRef,
  isFragment: isFragment,
  isLazy: isLazy,
  isMemo: isMemo,
  isPortal: isPortal,
  isProfiler: isProfiler,
  isStrictMode: isStrictMode,
  isSuspense: isSuspense,
  isValidElementType: isValidElementType,
  typeOf: typeOf
};

var reactIs_development = createCommonjsModule(function (module, exports) {

  if (process.env.NODE_ENV !== "production") {
    (function () {
      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return undefined;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
});

var reactIs = createCommonjsModule(function (module) {

  if (process.env.NODE_ENV === 'production') {
    module.exports = reactIs_production_min;
  } else {
    module.exports = reactIs_development;
  }
});

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String('abc');
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var has = Function.call.bind(Object.prototype.hasOwnProperty);

var printWarning = function () {};
if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has$1 = has;
  printWarning = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
}
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has$1(typeSpecs, typeSpecName)) {
        var error;
        try {
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}
checkPropTypes.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};
var checkPropTypes_1 = checkPropTypes;

var printWarning$1 = function () {};
if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
}
function emptyFunctionThatReturnsNull() {
  return null;
}
var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  var ANONYMOUS = '<<anonymous>>';
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data : {};
    this.stack = '';
  }
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
          expectedType: expectedType
        });
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }
    if (!propValue) {
      return false;
    }
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
  if (process.env.NODE_ENV !== 'production') {
    var ReactIs = reactIs;
    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  } else {
    module.exports = factoryWithThrowingShims();
  }
});

const description = {
  description: "PT_SEARCH_OR_DESC",
  descriptionStyles: {
    fontWeight: "300  ",
    color: "#505A5F",
    marginTop: "0px",
    textAlign: "center",
    marginBottom: "20px",
    maxWidth: "540px"
  }
};
const SearchProperty = ({
  config: propsConfig,
  onSelect
}) => {
  var _Digit$Hooks$pt$useTe, _searchData$filters2, _Object$keys2;
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const {
    action = 0
  } = Digit.Hooks.useQueryParams();
  const [searchData, setSearchData] = useState({});
  const [showToast, setShowToast] = useState(null);
  const allCities = (_Digit$Hooks$pt$useTe = Digit.Hooks.pt.useTenants()) === null || _Digit$Hooks$pt$useTe === void 0 ? void 0 : _Digit$Hooks$pt$useTe.sort((a, b) => {
    var _a$i18nKey, _a$i18nKey$localeComp;
    return a === null || a === void 0 ? void 0 : (_a$i18nKey = a.i18nKey) === null || _a$i18nKey === void 0 ? void 0 : (_a$i18nKey$localeComp = _a$i18nKey.localeCompare) === null || _a$i18nKey$localeComp === void 0 ? void 0 : _a$i18nKey$localeComp.call(_a$i18nKey, b === null || b === void 0 ? void 0 : b.i18nKey);
  });
  const [cityCode, setCityCode] = useState();
  const [formValue, setFormValue] = useState();
  const [errorShown, seterrorShown] = useState(false);
  const {
    data: propertyData,
    isLoading: propertyDataLoading,
    error,
    isSuccess,
    billData
  } = Digit.Hooks.pt.usePropertySearchWithDue({
    tenantId: searchData === null || searchData === void 0 ? void 0 : searchData.city,
    filters: searchData === null || searchData === void 0 ? void 0 : searchData.filters,
    auth: true,
    configs: {
      enabled: Object.keys(searchData).length > 0,
      retry: false,
      retryOnMount: false,
      staleTime: Infinity
    }
  });
  const isMobile = window.Digit.Utils.browser.isMobile();
  useEffect(() => {
    var _searchData$filters, _Object$keys;
    if (!(searchData !== null && searchData !== void 0 && (_searchData$filters = searchData.filters) !== null && _searchData$filters !== void 0 && _searchData$filters.mobileNumber && ((_Object$keys = Object.keys(searchData === null || searchData === void 0 ? void 0 : searchData.filters)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length) == 1) && (propertyData === null || propertyData === void 0 ? void 0 : propertyData.Properties.length) > 0 && ptSearchConfig.maxResultValidation && (propertyData === null || propertyData === void 0 ? void 0 : propertyData.Properties.length) > ptSearchConfig.maxPropertyResult && !errorShown) {
      setShowToast({
        error: true,
        warning: true,
        label: "ERR_PLEASE_REFINED_UR_SEARCH"
      });
    }
  }, [propertyData]);
  useEffect(() => {
    showToast && (showToast === null || showToast === void 0 ? void 0 : showToast.label) !== "ERR_PLEASE_REFINED_UR_SEARCH" && setShowToast(null);
  }, [action, propertyDataLoading]);
  useLayoutEffect(() => {
    const getActionBar = () => {
      let el = document.querySelector("div.action-bar-wrap");
      if (el) {
        el.style.position = "static";
        el.style.padding = "8px 0";
        el.style.boxShadow = "none";
        el.style.marginBottom = "16px";
        el.style.textAlign = "left";
      } else {
        setTimeout(() => {
          getActionBar();
        }, 100);
      }
    };
    getActionBar();
  }, []);
  const {
    data: ptSearchConfig,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "DIGIT-UI", "HelpText", {
    select: data => {
      var _data$DIGITUI, _data$DIGITUI$HelpTex, _data$DIGITUI$HelpTex2;
      return data === null || data === void 0 ? void 0 : (_data$DIGITUI = data["DIGIT-UI"]) === null || _data$DIGITUI === void 0 ? void 0 : (_data$DIGITUI$HelpTex = _data$DIGITUI["HelpText"]) === null || _data$DIGITUI$HelpTex === void 0 ? void 0 : (_data$DIGITUI$HelpTex2 = _data$DIGITUI$HelpTex[0]) === null || _data$DIGITUI$HelpTex2 === void 0 ? void 0 : _data$DIGITUI$HelpTex2.PT;
    }
  });
  const [mobileNumber, property, oldProperty, name, doorNo] = propsConfig.inputs;
  const config = [{
    body: [{
      type: "custom",
      populators: {
        name: "addParam",
        defaultValue: {
          code: 0,
          name: "PT_KNOW_PT_ID"
        },
        customProps: {
          t,
          isMandatory: true,
          optionsKey: "name",
          options: [{
            code: 0,
            name: "PT_KNOW_PT_ID"
          }, {
            code: 1,
            name: "PT_KNOW_PT_DETAIL"
          }]
        },
        component: (props, customProps) => /*#__PURE__*/React.createElement(RadioButtons, Object.assign({}, customProps, {
          selectedOption: props.value,
          onSelect: d => {
            props === null || props === void 0 ? void 0 : props.setValue("city", {});
            props === null || props === void 0 ? void 0 : props.setValue("locality", {});
            props === null || props === void 0 ? void 0 : props.setValue("mobileNumber", "");
            props === null || props === void 0 ? void 0 : props.setValue("propertyIds", "");
            props === null || props === void 0 ? void 0 : props.setValue("doorNo", "");
            props === null || props === void 0 ? void 0 : props.setValue("oldPropertyId", "");
            props === null || props === void 0 ? void 0 : props.setValue("name", "");
            history.replace(`${history.location.pathname}?action=${action == 0 ? 1 : 0}`);
          }
        }))
      }
    }, {
      label: "PT_SELECT_CITY",
      isMandatory: true,
      type: "custom",
      populators: {
        name: "city",
        defaultValue: null,
        rules: {
          required: true
        },
        customProps: {
          t,
          isMandatory: true,
          option: [...allCities],
          optionKey: "i18nKey"
        },
        component: (props, customProps) => /*#__PURE__*/React.createElement(Dropdown, Object.assign({}, customProps, {
          selected: props.value,
          select: d => {
            var _props$value, _props$value2;
            Digit.LocalizationService.getLocale({
              modules: [`rainmaker-${props === null || props === void 0 ? void 0 : (_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.code}`],
              locale: Digit.StoreData.getCurrentLanguage(),
              tenantId: `${props === null || props === void 0 ? void 0 : (_props$value2 = props.value) === null || _props$value2 === void 0 ? void 0 : _props$value2.code}`
            });
            if (d.code !== cityCode) props.setValue("locality", null);
            props.onChange(d);
          }
        }))
      }
    }, {
      label: t("PT_PROVIDE_ONE_MORE_PARAM"),
      isInsideBox: true,
      placementinbox: 0,
      isSectionText: true
    }, {
      label: mobileNumber.label,
      type: mobileNumber.type,
      populators: {
        defaultValue: "",
        name: mobileNumber.name,
        validation: mobileNumber === null || mobileNumber === void 0 ? void 0 : mobileNumber.validation
      },
      ...description,
      isMandatory: false,
      isInsideBox: true,
      placementinbox: 1
    }, {
      label: property.label,
      labelChildren: /*#__PURE__*/React.createElement("div", {
        className: "tooltip",
        style: {
          paddingLeft: "10px",
          marginBottom: "-3px"
        }
      }, "  ", /*#__PURE__*/React.createElement(InfoBannerIcon, {
        fill: "#0b0c0c"
      }), /*#__PURE__*/React.createElement("span", {
        className: "tooltiptext",
        style: {
          width: "150px",
          left: "230%",
          fontSize: "14px"
        }
      }, t(property.description) + " " + (ptSearchConfig === null || ptSearchConfig === void 0 ? void 0 : ptSearchConfig.propertyIdFormat))),
      type: property.type,
      populators: {
        name: property.name,
        defaultValue: "",
        validation: property === null || property === void 0 ? void 0 : property.validation
      },
      ...description,
      isMandatory: false,
      isInsideBox: true,
      placementinbox: 1
    }, {
      label: oldProperty.label,
      type: oldProperty.type,
      populators: {
        name: oldProperty.name,
        defaultValue: "",
        validation: oldProperty === null || oldProperty === void 0 ? void 0 : oldProperty.validation
      },
      isMandatory: false,
      isInsideBox: true,
      placementinbox: 2
    }],
    body1: [{
      type: "custom",
      populators: {
        name: "addParam1",
        defaultValue: {
          code: 1,
          name: "PT_KNOW_PT_DETAIL"
        },
        customProps: {
          t,
          isMandatory: true,
          optionsKey: "name",
          options: [{
            code: 0,
            name: "PT_KNOW_PT_ID"
          }, {
            code: 1,
            name: "PT_KNOW_PT_DETAIL"
          }]
        },
        component: (props, customProps) => /*#__PURE__*/React.createElement(RadioButtons, Object.assign({}, customProps, {
          selectedOption: props.value,
          onSelect: d => {
            props === null || props === void 0 ? void 0 : props.setValue("city", {});
            props === null || props === void 0 ? void 0 : props.setValue("locality", {});
            props === null || props === void 0 ? void 0 : props.setValue("mobileNumber", "");
            props === null || props === void 0 ? void 0 : props.setValue("propertyIds", "");
            props === null || props === void 0 ? void 0 : props.setValue("doorNo", "");
            props === null || props === void 0 ? void 0 : props.setValue("oldPropertyId", "");
            props === null || props === void 0 ? void 0 : props.setValue("name", "");
            history.replace(`${history.location.pathname}?action=${action == 0 ? 1 : 0}`);
          }
        }))
      }
    }, {
      label: "PT_SELECT_CITY",
      isMandatory: true,
      type: "custom",
      populators: {
        name: "city",
        defaultValue: null,
        rules: {
          required: true
        },
        customProps: {
          t,
          isMandatory: true,
          option: [...allCities],
          optionKey: "i18nKey"
        },
        component: (props, customProps) => /*#__PURE__*/React.createElement(Dropdown, Object.assign({}, customProps, {
          selected: props.value,
          select: d => {
            var _props$value3, _props$value4;
            Digit.LocalizationService.getLocale({
              modules: [`rainmaker-${props === null || props === void 0 ? void 0 : (_props$value3 = props.value) === null || _props$value3 === void 0 ? void 0 : _props$value3.code}`],
              locale: Digit.StoreData.getCurrentLanguage(),
              tenantId: `${props === null || props === void 0 ? void 0 : (_props$value4 = props.value) === null || _props$value4 === void 0 ? void 0 : _props$value4.code}`
            });
            if (d.code !== cityCode) props.setValue("locality", null);
            props.onChange(d);
          }
        }))
      }
    }, {
      label: "PT_SELECT_LOCALITY",
      type: "custom",
      isMandatory: true,
      populators: {
        name: "locality",
        defaultValue: "",
        rules: {
          required: true
        },
        customProps: {},
        component: (props, customProps) => /*#__PURE__*/React.createElement(Localities, {
          selectLocality: d => {
            props.onChange(d);
          },
          tenantId: cityCode,
          boundaryType: "revenue",
          keepNull: false,
          optionCardStyles: {
            height: "600px",
            overflow: "auto",
            zIndex: "10"
          },
          selected: formValue === null || formValue === void 0 ? void 0 : formValue.locality,
          disable: !cityCode,
          disableLoader: true
        })
      }
    }, {
      label: t("PT_PROVIDE_ONE_MORE_PARAM"),
      isInsideBox: true,
      placementinbox: 0,
      isSectionText: true
    }, {
      label: doorNo.label,
      type: doorNo.type,
      populators: {
        defaultValue: "",
        name: doorNo.name,
        validation: doorNo === null || doorNo === void 0 ? void 0 : doorNo.validation
      },
      isMandatory: false,
      isInsideBox: true,
      placementinbox: 1
    }, {
      label: name.label,
      type: name.type,
      populators: {
        defaultValue: "",
        name: name.name,
        validation: name === null || name === void 0 ? void 0 : name.validation
      },
      isMandatory: false,
      isInsideBox: true,
      placementinbox: 2
    }]
  }];
  const onPropertySearch = async data => {
    var _data$city;
    if (ptSearchConfig.maxResultValidation && (propertyData === null || propertyData === void 0 ? void 0 : propertyData.Properties.length) > 0 && (propertyData === null || propertyData === void 0 ? void 0 : propertyData.Properties.length) > ptSearchConfig.maxPropertyResult && errorShown) {
      seterrorShown(true);
      return;
    }
    if (!(data !== null && data !== void 0 && (_data$city = data.city) !== null && _data$city !== void 0 && _data$city.code)) {
      setShowToast({
        warning: true,
        label: "ERR_PT_FILL_VALID_FIELDS"
      });
      return;
    }
    if (action == 0) {
      var _data$mobileNumber, _mobileNumber$validat, _mobileNumber$validat2, _data$propertyIds, _property$validation, _property$validation$, _data$oldPropertyId, _oldProperty$validati, _oldProperty$validati2;
      if (!(data !== null && data !== void 0 && data.mobileNumber || data !== null && data !== void 0 && data.propertyIds || data !== null && data !== void 0 && data.oldPropertyId)) {
        setShowToast({
          warning: true,
          label: "ERR_PT_FILL_VALID_FIELDS"
        });
        return;
      }
      if (data !== null && data !== void 0 && data.mobileNumber && !((_data$mobileNumber = data.mobileNumber) !== null && _data$mobileNumber !== void 0 && _data$mobileNumber.match(mobileNumber === null || mobileNumber === void 0 ? void 0 : (_mobileNumber$validat = mobileNumber.validation) === null || _mobileNumber$validat === void 0 ? void 0 : (_mobileNumber$validat2 = _mobileNumber$validat.pattern) === null || _mobileNumber$validat2 === void 0 ? void 0 : _mobileNumber$validat2.value))) {
        var _mobileNumber$validat3, _mobileNumber$validat4;
        setShowToast({
          warning: true,
          label: mobileNumber === null || mobileNumber === void 0 ? void 0 : (_mobileNumber$validat3 = mobileNumber.validation) === null || _mobileNumber$validat3 === void 0 ? void 0 : (_mobileNumber$validat4 = _mobileNumber$validat3.pattern) === null || _mobileNumber$validat4 === void 0 ? void 0 : _mobileNumber$validat4.message
        });
        return;
      }
      if (data !== null && data !== void 0 && data.propertyIds && !((_data$propertyIds = data.propertyIds) !== null && _data$propertyIds !== void 0 && _data$propertyIds.match(property === null || property === void 0 ? void 0 : (_property$validation = property.validation) === null || _property$validation === void 0 ? void 0 : (_property$validation$ = _property$validation.pattern) === null || _property$validation$ === void 0 ? void 0 : _property$validation$.value))) {
        var _property$validation2, _property$validation3;
        setShowToast({
          warning: true,
          label: property === null || property === void 0 ? void 0 : (_property$validation2 = property.validation) === null || _property$validation2 === void 0 ? void 0 : (_property$validation3 = _property$validation2.pattern) === null || _property$validation3 === void 0 ? void 0 : _property$validation3.message
        });
        return;
      }
      if (data !== null && data !== void 0 && data.oldPropertyId && !((_data$oldPropertyId = data.oldPropertyId) !== null && _data$oldPropertyId !== void 0 && _data$oldPropertyId.match(oldProperty === null || oldProperty === void 0 ? void 0 : (_oldProperty$validati = oldProperty.validation) === null || _oldProperty$validati === void 0 ? void 0 : (_oldProperty$validati2 = _oldProperty$validati.pattern) === null || _oldProperty$validati2 === void 0 ? void 0 : _oldProperty$validati2.value))) {
        var _oldProperty$validati3, _oldProperty$validati4;
        setShowToast({
          warning: true,
          label: oldProperty === null || oldProperty === void 0 ? void 0 : (_oldProperty$validati3 = oldProperty.validation) === null || _oldProperty$validati3 === void 0 ? void 0 : (_oldProperty$validati4 = _oldProperty$validati3.pattern) === null || _oldProperty$validati4 === void 0 ? void 0 : _oldProperty$validati4.message
        });
        return;
      }
    } else {
      var _data$locality, _data$name, _name$validation, _name$validation$patt, _data$doorNo, _doorNo$validation, _doorNo$validation$pa;
      if (!(data !== null && data !== void 0 && (_data$locality = data.locality) !== null && _data$locality !== void 0 && _data$locality.code)) {
        setShowToast({
          warning: true,
          label: "ERR_PT_FILL_VALID_FIELDS"
        });
        return;
      }
      if (!(data !== null && data !== void 0 && data.doorNo || data !== null && data !== void 0 && data.name)) {
        setShowToast({
          warning: true,
          label: "ERR_PT_FILL_VALID_FIELDS"
        });
        return;
      }
      if (data !== null && data !== void 0 && data.name && !((_data$name = data.name) !== null && _data$name !== void 0 && _data$name.match(name === null || name === void 0 ? void 0 : (_name$validation = name.validation) === null || _name$validation === void 0 ? void 0 : (_name$validation$patt = _name$validation.pattern) === null || _name$validation$patt === void 0 ? void 0 : _name$validation$patt.value))) {
        var _name$validation2, _name$validation2$pat;
        setShowToast({
          warning: true,
          label: name === null || name === void 0 ? void 0 : (_name$validation2 = name.validation) === null || _name$validation2 === void 0 ? void 0 : (_name$validation2$pat = _name$validation2.pattern) === null || _name$validation2$pat === void 0 ? void 0 : _name$validation2$pat.message
        });
        return;
      }
      if (data !== null && data !== void 0 && data.doorNo && !((_data$doorNo = data.doorNo) !== null && _data$doorNo !== void 0 && _data$doorNo.match(doorNo === null || doorNo === void 0 ? void 0 : (_doorNo$validation = doorNo.validation) === null || _doorNo$validation === void 0 ? void 0 : (_doorNo$validation$pa = _doorNo$validation.pattern) === null || _doorNo$validation$pa === void 0 ? void 0 : _doorNo$validation$pa.value))) {
        var _doorNo$validation2, _doorNo$validation2$p;
        setShowToast({
          warning: true,
          label: doorNo === null || doorNo === void 0 ? void 0 : (_doorNo$validation2 = doorNo.validation) === null || _doorNo$validation2 === void 0 ? void 0 : (_doorNo$validation2$p = _doorNo$validation2.pattern) === null || _doorNo$validation2$p === void 0 ? void 0 : _doorNo$validation2$p.message
        });
        return;
      }
    }
    if ((showToast === null || showToast === void 0 ? void 0 : showToast.label) !== "ERR_PLEASE_REFINED_UR_SEARCH") setShowToast(null);
    if (data !== null && data !== void 0 && data.doorNo && (data === null || data === void 0 ? void 0 : data.doorNo) !== "" && (data === null || data === void 0 ? void 0 : data.propertyIds) !== "") {
      data["propertyIds"] = "";
    }
    let tempObject = Object.keys(data).filter(k => data[k]).reduce((acc, key) => ({
      ...acc,
      [key]: typeof data[key] === "object" ? data[key].code : data[key]
    }), {});
    let city = tempObject.city;
    delete tempObject.addParam;
    delete tempObject.addParam1;
    delete tempObject.city;
    setSearchData({
      city: city,
      filters: tempObject
    });
    return;
  };
  const onFormValueChange = (setValue, data, formState) => {
    if (data !== null && data !== void 0 && data.doorNo && (data === null || data === void 0 ? void 0 : data.doorNo) !== "" && (data === null || data === void 0 ? void 0 : data.propertyIds) !== "") {
      data["propertyIds"] = "";
    }
    const city = data === null || data === void 0 ? void 0 : data.city;
    const locality = data === null || data === void 0 ? void 0 : data.locality;
    if ((city === null || city === void 0 ? void 0 : city.code) !== cityCode) {
      setCityCode(city === null || city === void 0 ? void 0 : city.code);
    }
    if (!lodash.isEqual(data, formValue)) {
      setFormValue(data);
    }
    if (!locality || !city) {
      return;
    }
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  let validation = ptSearchConfig.maxResultValidation && !(searchData !== null && searchData !== void 0 && (_searchData$filters2 = searchData.filters) !== null && _searchData$filters2 !== void 0 && _searchData$filters2.mobileNumber && ((_Object$keys2 = Object.keys(searchData === null || searchData === void 0 ? void 0 : searchData.filters)) === null || _Object$keys2 === void 0 ? void 0 : _Object$keys2.length) == 1) ? (propertyData === null || propertyData === void 0 ? void 0 : propertyData.Properties.length) < ptSearchConfig.maxPropertyResult && (showToast == null || showToast !== null && !(showToast !== null && showToast !== void 0 && showToast.error)) : true;
  if (propertyData && !propertyDataLoading && !error && validation) {
    var _searchData$filters3, _Object$keys3, _searchData$filters4, _propertyDataLoading$;
    let qs = {};
    qs = {
      ...searchData.filters,
      city: searchData.city
    };
    if (!(searchData !== null && searchData !== void 0 && (_searchData$filters3 = searchData.filters) !== null && _searchData$filters3 !== void 0 && _searchData$filters3.mobileNumber && ((_Object$keys3 = Object.keys(searchData === null || searchData === void 0 ? void 0 : searchData.filters)) === null || _Object$keys3 === void 0 ? void 0 : _Object$keys3.length) == 1) && ptSearchConfig !== null && ptSearchConfig !== void 0 && ptSearchConfig.ptSearchCount && searchData !== null && searchData !== void 0 && (_searchData$filters4 = searchData.filters) !== null && _searchData$filters4 !== void 0 && _searchData$filters4.locality && propertyDataLoading && propertyDataLoading !== null && propertyDataLoading !== void 0 && (_propertyDataLoading$ = propertyDataLoading.Properties) !== null && _propertyDataLoading$ !== void 0 && _propertyDataLoading$.length && propertyDataLoading.Properties.length > ptSearchConfig.ptSearchCount) {
      !showToast && setShowToast({
        error: true,
        label: "PT_MODIFY_SEARCH_CRITERIA"
      });
    } else if (propsConfig.action === "MUTATION") {
      onSelect(propsConfig.key, qs, null, null, null, {
        queryParams: {
          ...qs
        }
      });
    } else {
      history.push(`/digit-ui/citizen/pt/property/search-results?${Object.keys(qs).map(key => `${key}=${qs[key]}`).join("&")}`);
    }
  }
  if (error) {
    var _error$response, _error$response$data, _error$response$data$, _error$response$data$2;
    !showToast && setShowToast({
      error: true,
      label: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.Errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.code) || error
    });
  }
  if (action == 1) {
    config[0].body = [...config[0].body1];
  }
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "16px",
      marginBottom: "16px",
      backgroundColor: "white",
      maxWidth: "960px"
    }
  }, /*#__PURE__*/React.createElement(FormComposer, {
    onSubmit: onPropertySearch,
    noBoxShadow: true,
    inline: true,
    config: config,
    label: propsConfig.texts.submitButtonLabel,
    heading: t(propsConfig.texts.header),
    text: t(propsConfig.texts.text),
    headingStyle: {
      fontSize: "32px",
      marginBottom: "16px",
      fontFamily: "Roboto Condensed,sans-serif"
    },
    onFormValueChange: onFormValueChange,
    cardStyle: {
      marginBottom: "0"
    }
  }), /*#__PURE__*/React.createElement("span", {
    className: "link",
    style: {
      display: "flex",
      justifyContent: isMobile ? "center" : "left",
      paddingBottom: "16px",
      paddingLeft: "24px",
      marginTop: "-24px"
    }
  }, /*#__PURE__*/React.createElement(Link, {
    to: "/digit-ui/citizen/pt/property/new-application"
  }, t("CPT_REG_NEW_PROPERTY"))), showToast && /*#__PURE__*/React.createElement(Toast, {
    error: showToast.error,
    isDleteBtn: true,
    warning: showToast.warning,
    label: t(showToast.label),
    onClose: () => {
      setShowToast(null);
      seterrorShown(false);
    }
  }));
};
SearchProperty.propTypes = {
  loginParams: propTypes.any
};
SearchProperty.defaultProps = {
  loginParams: null
};

const config = [{
  texts: {
    header: "CS_SEARCH_RESULTS",
    actionButtonLabel: "CS_VIEW_DETAILS"
  },
  labels: [{
    label: "PT_TOTAL_DUES",
    key: "total_due",
    noteStyle: {
      fontSize: "24px",
      fontWeight: "bold"
    },
    notePrefix: "₹ "
  }, {
    label: "PT_PROPERTY_PTUID",
    key: "property_id"
  }, {
    label: "PT_OWNERSHIP_INFO_NAME",
    key: "owner_name"
  }, {
    label: "PT_PROPERTY_ADDRESS_SUB_HEADER",
    key: "property_address"
  }, {
    label: "PT_DUE_DATE",
    key: "bil_due__date"
  }]
}];

const PropertySearchResults = ({
  template,
  header,
  actionButtonLabel,
  isMutation,
  onSelect,
  config,
  clearParams: _clearParams = () => {}
}) => {
  var _result$data, _result$data$Properti, _paymentDetails$data, _paymentDetails$data$, _result$data3, _result$data3$Propert, _result$data4, _modalData$total_due;
  const {
    t
  } = useTranslation();
  const modalRef = useRef();
  const {
    mobileNumber,
    propertyIds,
    oldPropertyIds,
    locality,
    city,
    doorNo,
    name,
    PToffset
  } = Digit.Hooks.useQueryParams();
  let filters = {};
  const [modalData, setShowModal] = useState(false);
  let OfsetForSearch = PToffset;
  let t1;
  let off;
  if (!isNaN(parseInt(OfsetForSearch))) {
    off = OfsetForSearch;
    t1 = parseInt(OfsetForSearch) + 5;
  } else {
    t1 = 5;
  }
  let filter1 = !isNaN(parseInt(OfsetForSearch)) ? {
    limit: "50",
    sortOrder: "ASC",
    sortBy: "createdTime",
    offset: off
  } : {
    limit: "5",
    sortOrder: "ASC",
    sortBy: "createdTime",
    offset: "0"
  };
  const closeModal = () => {
    setShowModal(false);
  };
  Digit.Hooks.useClickOutside(modalRef, closeModal, modalData);
  if (mobileNumber) filters.mobileNumber = mobileNumber;
  if (propertyIds) filters.propertyIds = propertyIds;
  if (oldPropertyIds) filters.oldPropertyIds = oldPropertyIds;
  if (locality) filters.locality = locality;
  if (doorNo) filters.doorNo = doorNo;
  if (name) filters.name = name;
  filters.limit = filter1.limit;
  filters.sortOrder = filter1.sortOrder;
  filters.sortBy = filter1.sortBy;
  filters.offset = filter1.offset;
  const [owners, setOwners, clearOwners] = Digit.Hooks.useSessionStorage("PT_MUTATE_MULTIPLE_OWNERS", null);
  const [lastPath, setLastPath, clearLastPath] = Digit.Hooks.useSessionStorage("PT_MUTATE_MULTIPLE_OWNERS_LAST_PATH", null);
  useEffect(() => {
    setOwners([]);
    _clearParams();
    setLastPath("");
  }, []);
  const auth = true;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const searchArgs = city ? {
    tenantId: city,
    filters,
    auth
  } : {
    filters,
    auth
  };
  const result = Digit.Hooks.pt.usePropertySearch(searchArgs);
  const consumerCode = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$Properti = _result$data.Properties) === null || _result$data$Properti === void 0 ? void 0 : _result$data$Properti.map(a => a.propertyId).join(",");
  let fetchBillParams = mobileNumber ? {
    mobileNumber,
    consumerCode
  } : {
    consumerCode
  };
  if (window.location.href.includes("/search-results")) fetchBillParams = {
    consumerCode
  };
  const paymentDetails = Digit.Hooks.useFetchBillsForBuissnessService({
    businessService: "PT",
    ...fetchBillParams,
    tenantId: city
  }, {
    enabled: consumerCode ? true : false,
    retry: false
  });
  const history = useHistory();
  const proceedToPay = data => {
    history.push(`/digit-ui/citizen/payment/my-bills/PT/${data.property_id}`, {
      tenantId
    });
  };
  if (paymentDetails.isLoading || result.isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if (result.error || !consumerCode) {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        height: "150px"
      }
    }, /*#__PURE__*/React.createElement(Card, {
      style: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100%"
      }
    }, t("CS_PT_NO_PROPERTIES_FOUND")));
  }
  const onSubmit = data => {
    if (isMutation) {
      var _result$data2, _result$data2$Propert, _result$data2$Propert2;
      let property = result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$Propert = _result$data2.Properties) === null || _result$data2$Propert === void 0 ? void 0 : (_result$data2$Propert2 = _result$data2$Propert.filter) === null || _result$data2$Propert2 === void 0 ? void 0 : _result$data2$Propert2.call(_result$data2$Propert, e => e.propertyId === data.property_id)[0];
      if (Number(data.total_due) > 0) {
        setShowModal(data);
      } else onSelect(config.key, {
        data,
        property
      });
    } else history.push(`/digit-ui/citizen/payment/my-bills/PT/${data.property_id}`, {
      tenantId
    });
  };
  const payment = {};
  paymentDetails === null || paymentDetails === void 0 ? void 0 : (_paymentDetails$data = paymentDetails.data) === null || _paymentDetails$data === void 0 ? void 0 : (_paymentDetails$data$ = _paymentDetails$data.Bill) === null || _paymentDetails$data$ === void 0 ? void 0 : _paymentDetails$data$.forEach(element => {
    if (element !== null && element !== void 0 && element.consumerCode) {
      var _element$billDetails, _element$billDetails$;
      payment[element === null || element === void 0 ? void 0 : element.consumerCode] = {
        total_due: element === null || element === void 0 ? void 0 : element.totalAmount,
        bil_due__date: new Date(element === null || element === void 0 ? void 0 : (_element$billDetails = element.billDetails) === null || _element$billDetails === void 0 ? void 0 : (_element$billDetails$ = _element$billDetails[0]) === null || _element$billDetails$ === void 0 ? void 0 : _element$billDetails$.expiryDate).toDateString()
      };
    }
  });
  const arr = isMutation ? result === null || result === void 0 ? void 0 : (_result$data3 = result.data) === null || _result$data3 === void 0 ? void 0 : (_result$data3$Propert = _result$data3.Properties) === null || _result$data3$Propert === void 0 ? void 0 : _result$data3$Propert.filter(e => e.status === "ACTIVE") : result === null || result === void 0 ? void 0 : (_result$data4 = result.data) === null || _result$data4 === void 0 ? void 0 : _result$data4.Properties;
  const searchResults = arr === null || arr === void 0 ? void 0 : arr.map(property => {
    var _ref, _addr$locality, _payment$property$pro, _payment$property$pro2;
    let addr = (property === null || property === void 0 ? void 0 : property.address) || {};
    return {
      property_id: property === null || property === void 0 ? void 0 : property.propertyId,
      owner_name: (_ref = (property === null || property === void 0 ? void 0 : property.owners) || []) === null || _ref === void 0 ? void 0 : _ref.map(o => o === null || o === void 0 ? void 0 : o.name).join(","),
      property_address: [addr.doorNo || "", addr.buildingName || "", addr.street || "", ((_addr$locality = addr.locality) === null || _addr$locality === void 0 ? void 0 : _addr$locality.name) || "", addr.city || ""].filter(a => a).join(", "),
      total_due: ((_payment$property$pro = payment[property === null || property === void 0 ? void 0 : property.propertyId]) === null || _payment$property$pro === void 0 ? void 0 : _payment$property$pro.total_due) || 0,
      bil_due__date: ((_payment$property$pro2 = payment[property === null || property === void 0 ? void 0 : property.propertyId]) === null || _payment$property$pro2 === void 0 ? void 0 : _payment$property$pro2.bil_due__date) || t("N/A")
    };
  });
  return /*#__PURE__*/React.createElement("div", {
    className: "static",
    style: {
      marginTop: "16px"
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "static-wrapper"
  }, header && /*#__PURE__*/React.createElement(Header, {
    style: {
      marginLeft: "8px"
    }
  }, t(header), " (", searchResults === null || searchResults === void 0 ? void 0 : searchResults.length, ")"), /*#__PURE__*/React.createElement(ResponseComposer, {
    data: searchResults,
    template: template,
    actionButtonLabel: actionButtonLabel,
    onSubmit: onSubmit
  })), modalData ? /*#__PURE__*/React.createElement(Modal, {
    hideSubmit: true,
    isDisabled: false,
    popupStyles: {
      width: "319px",
      height: "250px",
      margin: "auto"
    },
    formId: "modal-action"
  }, /*#__PURE__*/React.createElement("div", {
    ref: modalRef
  }, /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_AMOUNT_DUE"),
    note: `₹ ${modalData === null || modalData === void 0 ? void 0 : (_modalData$total_due = modalData.total_due) === null || _modalData$total_due === void 0 ? void 0 : _modalData$total_due.toLocaleString("en-IN")}`,
    noteStyle: {
      fontSize: "24px",
      fontWeight: "bold"
    }
  }), /*#__PURE__*/React.createElement("p", null, t("PT_YOU_HAVE") + " " + "₹" + " " + (modalData === null || modalData === void 0 ? void 0 : modalData.total_due.toLocaleString("en-IN")) + " " + t("PT_PENDING_AMOUNT") + " " + t("PT_INORDER_TO_TRANSFER")), /*#__PURE__*/React.createElement(SubmitBar, {
    submit: false,
    onSubmit: () => proceedToPay(modalData),
    style: {
      marginTop: "14px",
      width: "100%"
    },
    label: t("PT_PROCEED_PAYMENT")
  }))) : null, !(searchResults !== null && searchResults !== void 0 && searchResults.length) > 0 && /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_NO_PROP_FOUND_MSG")), (searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) !== 0 && ((searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) == 5 || (searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) == 50) && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_LOAD_MORE_MSG"), " ", /*#__PURE__*/React.createElement("span", {
    className: "link"
  }, /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen/pt/property/search-results?mobileNumber=${mobileNumber ? mobileNumber : ""}&propertyIds=${propertyIds ? propertyIds : ""}&oldPropertyIds=${oldPropertyIds ? oldPropertyIds : ""}&doorNo=${doorNo ? doorNo : ""}&name=${name ? name : ""}&city=${city ? city : ""}&locality=${locality ? locality : ""}&PToffset=${t1}`
  }, t("PT_COMMON_CLICK_HERE"))))), isMutation && (searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) !== 0 ? /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    info: t("CS_FILE_APPLICATION_INFO_LABEL"),
    text: t("PT_CANNOT_TRANSFER_IF_AMOUNT_PENDING")
  }) : null);
};
PropertySearchResults.propTypes = {
  template: propTypes.any,
  header: propTypes.string,
  actionButtonLabel: propTypes.string
};
PropertySearchResults.defaultProps = {
  template: [],
  header: null,
  actionButtonLabel: null
};

const CitizenSearchResults = props => {
  const {
    config: propConfig,
    onSelect,
    clearParams
  } = props;
  const {
    t
  } = useTranslation();
  const {
    path
  } = useRouteMatch();
  let config$1 = propConfig ? [propConfig] : config;
  const params = useMemo(() => {
    var _config$map;
    return config$1 === null || config$1 === void 0 ? void 0 : (_config$map = config$1.map) === null || _config$map === void 0 ? void 0 : _config$map.call(config$1, step => {
      const texts = {};
      for (const key in step.texts) {
        texts[key] = t(step.texts[key]);
      }
      return {
        ...step,
        texts
      };
    });
  }, [config$1]);
  return /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(Route, {
    path: `${path}`,
    exact: true
  }, /*#__PURE__*/React.createElement(PropertySearchResults, {
    template: params[0].labels,
    header: params[0].texts.header,
    actionButtonLabel: params[0].texts.actionButtonLabel,
    t: t,
    isMutation: (propConfig === null || propConfig === void 0 ? void 0 : propConfig.action) === "MUTATION",
    onSelect: onSelect,
    config: propConfig,
    clearParams: clearParams
  })));
};

const ActionButton = ({
  jumpTo
}) => {
  const {
    t
  } = useTranslation();
  const history = useHistory();
  function routeTo() {
    history.push(jumpTo);
  }
  return /*#__PURE__*/React.createElement(LinkButton, {
    label: t("CS_COMMON_CHANGE"),
    className: "check-page-link-button",
    onClick: routeTo
  });
};
const CheckPage = ({
  onSubmit,
  value: _value = {}
}) => {
  var _address$documents, _address$documents$Pr;
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const {
    address,
    isResdential,
    PropertyType,
    noOfFloors,
    noOofBasements,
    units = [{}],
    landarea,
    landArea,
    UnOccupiedArea,
    city_complaint,
    locality_complaint,
    street,
    doorNo,
    landmark,
    ownerType,
    Floorno,
    ownershipCategory,
    Constructiondetails,
    IsAnyPartOfThisFloorUnOccupied,
    propertyArea,
    selfOccupied,
    floordetails,
    owners,
    isEditProperty,
    isUpdateProperty
  } = _value;
  const typeOfApplication = !isEditProperty && !isUpdateProperty ? `new-application` : `edit-application`;
  if (isPropertyselfoccupied(selfOccupied === null || selfOccupied === void 0 ? void 0 : selfOccupied.i18nKey)) {
    if (ispropertyunoccupied(IsAnyPartOfThisFloorUnOccupied === null || IsAnyPartOfThisFloorUnOccupied === void 0 ? void 0 : IsAnyPartOfThisFloorUnOccupied.i18nKey)) ;
  } else {
    if (!ispropertyunoccupied(IsAnyPartOfThisFloorUnOccupied === null || IsAnyPartOfThisFloorUnOccupied === void 0 ? void 0 : IsAnyPartOfThisFloorUnOccupied.i18nKey)) ;
  }
  if (isPropertyIndependent(PropertyType === null || PropertyType === void 0 ? void 0 : PropertyType.i18nKey)) ;
  const [agree, setAgree] = useState(false);
  const setdeclarationhandler = () => {
    setAgree(!agree);
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 4
  }) : null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardHeader, null, t("PT_CHECK_CHECK_YOUR_ANSWERS")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardText, null, t("PT_CHECK_CHECK_YOUR_ANSWERS_TEXT")), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_PROPERTY_ADDRESS_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PROPERTY_ADDRESS_SUB_HEADER"),
    text: `${address !== null && address !== void 0 && address.doorNo ? `${address === null || address === void 0 ? void 0 : address.doorNo}, ` : ""} ${address !== null && address !== void 0 && address.street ? `${address === null || address === void 0 ? void 0 : address.street}, ` : ""}${address !== null && address !== void 0 && address.landmark ? `${address === null || address === void 0 ? void 0 : address.landmark}, ` : ""}${t(address === null || address === void 0 ? void 0 : address.locality.code)}, ${t(address === null || address === void 0 ? void 0 : address.city.code)},${t(address === null || address === void 0 ? void 0 : address.pincode) ? `${address.pincode}` : " "}`,
    actionButton: /*#__PURE__*/React.createElement(ActionButton, {
      jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/pincode`
    })
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PROOF_OF_ADDRESS_SUB_HEADER"),
    text: `${(address === null || address === void 0 ? void 0 : (_address$documents = address.documents) === null || _address$documents === void 0 ? void 0 : (_address$documents$Pr = _address$documents.ProofOfAddress) === null || _address$documents$Pr === void 0 ? void 0 : _address$documents$Pr.name) && getFixedFilename(address.documents.ProofOfAddress.name) || "na"}`,
    actionButton: /*#__PURE__*/React.createElement(ActionButton, {
      jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/proof`
    })
  })), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_OWNERSHIP_DETAILS_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_OWNERSHIP_TYPE"),
    text: t(checkForNA(`PT_OWNERSHIP_${ownershipCategory === null || ownershipCategory === void 0 ? void 0 : ownershipCategory.code}`)),
    actionButton: /*#__PURE__*/React.createElement(ActionButton, {
      jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/owner-ship-details@0`
    })
  })), /*#__PURE__*/React.createElement("div", null, owners && owners.map && owners.map((owner, index) => {
    var _owner$inistitutetype, _owner$documents$proo, _owner$gender, _owner$relationship, _owner$ownerType, _owner$ownerType2, _owner$documents$spec, _owner$documents$proo2;
    return /*#__PURE__*/React.createElement("div", {
      key: index
    }, owners.length != 1 && /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1), (ownershipCategory === null || ownershipCategory === void 0 ? void 0 : ownershipCategory.value) == "INSTITUTIONALPRIVATE" || (ownershipCategory === null || ownershipCategory === void 0 ? void 0 : ownershipCategory.value) == "INSTITUTIONALGOVERNMENT" ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      label: t("PT_COMMON_INSTITUTION_NAME"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.inistitutionName))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_TYPE_OF_INSTITUTION"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : (_owner$inistitutetype = owner.inistitutetype) === null || _owner$inistitutetype === void 0 ? void 0 : _owner$inistitutetype.code))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_OWNER_NAME"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.name))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_COMMON_AUTHORISED_PERSON_DESIGNATION")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.designation))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_FORM3_MOBILE_NUMBER")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.mobileNumber))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_OWNERSHIP_INFO_TEL_PHONE_NO")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.altContactNumber))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_FORM3_EMAIL_ID")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.emailId))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/inistitution-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_OWNERSHIP_INFO_CORR_ADDR")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.permanentAddress))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/institutional-owner-address/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_COMMON_SAME_AS_PROPERTY_ADDRESS")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.isCorrespondenceAddress))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/institutional-owner-address/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_PROOF_IDENTITY_HEADER"),
      text: `${(owner === null || owner === void 0 ? void 0 : (_owner$documents$proo = owner.documents["proofIdentity"]) === null || _owner$documents$proo === void 0 ? void 0 : _owner$documents$proo.name) && getFixedFilename(owner.documents["proofIdentity"].name) || "na"}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/institutional-proof-of-identity/`}${index}`
      })
    }))) : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      label: t("PT_OWNER_NAME"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.name))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_FORM3_GENDER"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : (_owner$gender = owner.gender) === null || _owner$gender === void 0 ? void 0 : _owner$gender.code))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_FORM3_MOBILE_NUMBER")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.mobileNumber))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_FORM3_GUARDIAN_NAME"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_FORM3_RELATIONSHIP"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : (_owner$relationship = owner.relationship) === null || _owner$relationship === void 0 ? void 0 : _owner$relationship.code))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-details/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_SPECIAL_OWNER_CATEGORY"),
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : (_owner$ownerType = owner.ownerType) === null || _owner$ownerType === void 0 ? void 0 : _owner$ownerType.code))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/special-owner-category/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_OWNERS_ADDRESS")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.permanentAddress))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-address/`}${index}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: `${t("PT_COMMON_SAME_AS_PROPERTY_ADDRESS")}`,
      text: `${t(checkForNA(owner === null || owner === void 0 ? void 0 : owner.isCorrespondenceAddress))}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/owner-address/`}${index}`
      })
    }), (owner === null || owner === void 0 ? void 0 : (_owner$ownerType2 = owner.ownerType) === null || _owner$ownerType2 === void 0 ? void 0 : _owner$ownerType2.code) !== "NONE" ? /*#__PURE__*/React.createElement(Row, {
      label: t("PT_SPECIAL_OWNER_CATEGORY_PROOF_HEADER"),
      text: `${(owner === null || owner === void 0 ? void 0 : (_owner$documents$spec = owner.documents["specialProofIdentity"]) === null || _owner$documents$spec === void 0 ? void 0 : _owner$documents$spec.name) && getFixedFilename(owner.documents["specialProofIdentity"].name) || "na"}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/special-owner-category-proof/`}${index}`
      })
    }) : "", /*#__PURE__*/React.createElement(Row, {
      label: t("PT_PROOF_IDENTITY_HEADER"),
      text: `${(owner === null || owner === void 0 ? void 0 : (_owner$documents$proo2 = owner.documents["proofIdentity"]) === null || _owner$documents$proo2 === void 0 ? void 0 : _owner$documents$proo2.name) && getFixedFilename(owner.documents["proofIdentity"].name) || "na"}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `${`/digit-ui/citizen/pt/property/${typeOfApplication}/proof-of-identity/`}${index}`
      })
    }))));
  })), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_ASSESMENT_INFO_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_ASSESMENT1_PROPERTY_TYPE"),
    text: `${t(checkForNA(PropertyType === null || PropertyType === void 0 ? void 0 : PropertyType.i18nKey))}`,
    actionButton: /*#__PURE__*/React.createElement(ActionButton, {
      jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/property-type`
    })
  }), (PropertyType === null || PropertyType === void 0 ? void 0 : PropertyType.code) !== "VACANT" && /*#__PURE__*/React.createElement(Row, {
    label: t("PT_ASSESMENT1_PLOT_SIZE"),
    text: `${landArea === null || landArea === void 0 ? void 0 : landArea.floorarea}`,
    actionButton: /*#__PURE__*/React.createElement(ActionButton, {
      jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/landarea`
    })
  }), (PropertyType === null || PropertyType === void 0 ? void 0 : PropertyType.code) === "VACANT" && /*#__PURE__*/React.createElement(Row, {
    label: t("PT_ASSESMENT1_PLOT_SIZE"),
    text: `${landarea === null || landarea === void 0 ? void 0 : landarea.floorarea}`,
    actionButton: /*#__PURE__*/React.createElement(ActionButton, {
      jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
    })
  }), (PropertyType === null || PropertyType === void 0 ? void 0 : PropertyType.code) !== "VACANT" && units.sort((x, y) => x.floorNo - y.floorNo).map((unit, unitIndex) => {
    var _unit$constructionDet, _unit$usageCategory, _unit$usageCategory2, _unit$usageCategory3;
    return /*#__PURE__*/React.createElement("div", null, units.length > 1 && /*#__PURE__*/React.createElement(CardSubHeader, null, t(`PT_UNIT`), "-", unitIndex), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_BUILT_UP_AREA"),
      text: `${unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_ASSESMENT_INFO_OCCUPLANCY"),
      text: t(`PROPERTYTAX_OCCUPANCYTYPE_${unit === null || unit === void 0 ? void 0 : unit.occupancyType}`),
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_FORM2_USAGE_TYPE"),
      text: t(`PROPERTYTAX_BILLING_SLAB_${(unit === null || unit === void 0 ? void 0 : (_unit$usageCategory = unit.usageCategory) === null || _unit$usageCategory === void 0 ? void 0 : _unit$usageCategory.split(".").length) > 2 ? unit === null || unit === void 0 ? void 0 : (_unit$usageCategory2 = unit.usageCategory) === null || _unit$usageCategory2 === void 0 ? void 0 : _unit$usageCategory2.split(".")[1] : unit === null || unit === void 0 ? void 0 : (_unit$usageCategory3 = unit.usageCategory) === null || _unit$usageCategory3 === void 0 ? void 0 : _unit$usageCategory3.split(".")[0]}`),
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
      })
    }), " ", (unit === null || unit === void 0 ? void 0 : unit.unitType) && /*#__PURE__*/React.createElement(Row, {
      label: t("PT_FORM2_SUB_USAGE_TYPE"),
      text: t(`PROPERTYTAX_BILLING_SLAB_${unit === null || unit === void 0 ? void 0 : unit.unitType}`),
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      label: t("PT_FLOOR_NO"),
      text: `${unit === null || unit === void 0 ? void 0 : unit.floorNo}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
      })
    }), (unit === null || unit === void 0 ? void 0 : unit.arv) && /*#__PURE__*/React.createElement(Row, {
      label: t("PT_PROPERTY_ANNUAL_RENT_LABEL"),
      text: `${unit === null || unit === void 0 ? void 0 : unit.arv}`,
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        jumpTo: `/digit-ui/citizen/pt/property/${typeOfApplication}/PtUnits`
      })
    }));
  })), /*#__PURE__*/React.createElement(CheckBox, {
    label: t("PT_FINAL_DECLARATION_MESSAGE"),
    onChange: setdeclarationhandler,
    styles: {
      height: "auto"
    }
  })), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_COMMON_BUTTON_SUBMIT"),
    onSubmit: onSubmit,
    disabled: !agree
  })));
};

const capitalize = text => text.substr(0, 1).toUpperCase() + text.substr(1);
const ulbCamel = ulb => ulb.toLowerCase().split(" ").map(capitalize).join(" ");
const getOwner = (application, t, customTitle) => {
  let owners = [];
  if (customTitle && customTitle.includes("TRANSFEROR")) {
    if (application !== null && application !== void 0 && application.isTransferor && application !== null && application !== void 0 && application.transferorDetails) {
      var _application$transfer, _application$transfer2;
      application.ownershipCategory = application === null || application === void 0 ? void 0 : (_application$transfer = application.transferorDetails) === null || _application$transfer === void 0 ? void 0 : _application$transfer.ownershipCategory;
      owners = [...((application === null || application === void 0 ? void 0 : (_application$transfer2 = application.transferorDetails) === null || _application$transfer2 === void 0 ? void 0 : _application$transfer2.owners) || [])];
    } else {
      owners = [...((application === null || application === void 0 ? void 0 : application.owners.filter(owner => owner.status == "INACTIVE")) || [])];
    }
  } else owners = [...((application === null || application === void 0 ? void 0 : application.owners.filter(owner => owner.status == "ACTIVE")) || [])];
  if ((application === null || application === void 0 ? void 0 : application.ownershipCategory) == "INDIVIDUAL.SINGLEOWNER") {
    var _owners$, _owners$2, _owners$3, _owners$4, _owners$5, _owners$6, _owners$7;
    return {
      title: t(customTitle || "PT_OWNERSHIP_INFO_SUB_HEADER"),
      values: [{
        title: t("PT_OWNERSHIP_INFO_NAME"),
        value: ((_owners$ = owners[0]) === null || _owners$ === void 0 ? void 0 : _owners$.name) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_MOBILE_NO"),
        value: ((_owners$2 = owners[0]) === null || _owners$2 === void 0 ? void 0 : _owners$2.mobileNumber) || t("CS_NA")
      }, {
        title: t("PT_SEARCHPROPERTY_TABEL_GUARDIANNAME"),
        value: ((_owners$3 = owners[0]) === null || _owners$3 === void 0 ? void 0 : _owners$3.fatherOrHusbandName) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_GENDER"),
        value: t((_owners$4 = owners[0]) === null || _owners$4 === void 0 ? void 0 : _owners$4.gender) || t("CS_NA")
      }, {
        title: t("PT_FORM3_OWNERSHIP_TYPE"),
        value: t(application === null || application === void 0 ? void 0 : application.ownershipCategory) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_EMAIL_ID"),
        value: ((_owners$5 = owners[0]) === null || _owners$5 === void 0 ? void 0 : _owners$5.emailId) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_USER_CATEGORY"),
        value: t(getPropertyOwnerTypeLocale((_owners$6 = owners[0]) === null || _owners$6 === void 0 ? void 0 : _owners$6.ownerType)) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
        value: ((_owners$7 = owners[0]) === null || _owners$7 === void 0 ? void 0 : _owners$7.permanentAddress) || t("CS_NA")
      }]
    };
  } else if (application !== null && application !== void 0 && application.ownershipCategory.includes("INDIVIDUAL")) {
    let values = [];
    owners.map(owner => {
      let doc = [{
        title: t("PT_OWNERSHIP_INFO_NAME"),
        value: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_MOBILE_NO"),
        value: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
      }, {
        title: t("PT_SEARCHPROPERTY_TABEL_GUARDIANNAME"),
        value: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_GENDER"),
        value: t(owner === null || owner === void 0 ? void 0 : owner.gender) || t("CS_NA")
      }, {
        title: t("PT_FORM3_OWNERSHIP_TYPE"),
        value: t(application === null || application === void 0 ? void 0 : application.ownershipCategory) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_EMAIL_ID"),
        value: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_USER_CATEGORY"),
        value: t(getPropertyOwnerTypeLocale(owner === null || owner === void 0 ? void 0 : owner.ownerType)) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
        value: (owner === null || owner === void 0 ? void 0 : owner.permanentAddress) || t("CS_NA")
      }];
      values.push(...doc);
    });
    return {
      title: t(customTitle || "PT_OWNERSHIP_INFO_SUB_HEADER"),
      values: values
    };
  } else if (application !== null && application !== void 0 && application.ownershipCategory.includes("INSTITUTIONAL")) {
    var _application$institut, _application$institut2, _application$institut3, _application$institut4, _owners$8, _owners$9, _owners$10;
    return {
      title: t("PT_OWNERSHIP_INFO_SUB_HEADER"),
      values: [{
        title: t("PT_COMMON_INSTITUTION_NAME"),
        value: (application === null || application === void 0 ? void 0 : (_application$institut = application.institution) === null || _application$institut === void 0 ? void 0 : _application$institut.name) || t("CS_NA")
      }, {
        title: t("PT_TYPE_OF_INSTITUTION"),
        value: (application === null || application === void 0 ? void 0 : (_application$institut2 = application.institution) === null || _application$institut2 === void 0 ? void 0 : _application$institut2.type) || t("CS_NA")
      }, {
        title: t("PT_OWNER_NAME"),
        value: (application === null || application === void 0 ? void 0 : (_application$institut3 = application.institution) === null || _application$institut3 === void 0 ? void 0 : _application$institut3.nameOfAuthorizedPerson) || t("CS_NA")
      }, {
        title: t("PT_COMMON_AUTHORISED_PERSON_DESIGNATION"),
        value: (application === null || application === void 0 ? void 0 : (_application$institut4 = application.institution) === null || _application$institut4 === void 0 ? void 0 : _application$institut4.designation) || t("CS_NA")
      }, {
        title: t("PT_FORM3_MOBILE_NUMBER"),
        value: ((_owners$8 = owners[0]) === null || _owners$8 === void 0 ? void 0 : _owners$8.mobileNumber) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_TEL_PHONE_NO"),
        value: ((_owners$9 = owners[0]) === null || _owners$9 === void 0 ? void 0 : _owners$9.altContactNumber) || t("CS_NA")
      }, {
        title: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
        value: ((_owners$10 = owners[0]) === null || _owners$10 === void 0 ? void 0 : _owners$10.correspondenceAddress) || t("CS_NA")
      }, {
        title: t("PT_FORM3_OWNERSHIP_TYPE"),
        value: t(application === null || application === void 0 ? void 0 : application.ownershipCategory) || t("CS_NA")
      }]
    };
  } else {
    return {
      title: t("PT_OWNERSHIP_INFO_SUB_HEADER"),
      values: [{
        title: t("PT_NO_OWNERS"),
        value: t("CS_NA")
      }]
    };
  }
};
const getAssessmentInfo = (application, t) => {
  var _application$usageCat, _application$usageCat2, _application$units, _application$units$;
  let values = [{
    title: t("PT_ASSESMENT_INFO_USAGE_TYPE"),
    value: application !== null && application !== void 0 && application.usageCategory ? `${t(((application === null || application === void 0 ? void 0 : application.usageCategory) !== "RESIDENTIAL" ? "COMMON_PROPUSGTYPE_NONRESIDENTIAL_" : "COMMON_PROPSUBUSGTYPE_") + (application !== null && application !== void 0 && (_application$usageCat = application.usageCategory) !== null && _application$usageCat !== void 0 && _application$usageCat.split(".")[1] ? application === null || application === void 0 ? void 0 : (_application$usageCat2 = application.usageCategory) === null || _application$usageCat2 === void 0 ? void 0 : _application$usageCat2.split(".")[1] : application === null || application === void 0 ? void 0 : application.usageCategory))}` : t("CS_NA")
  }, {
    title: t("PT_ASSESMENT_INFO_TYPE_OF_BUILDING"),
    value: t(getPropertyTypeLocale(application === null || application === void 0 ? void 0 : application.propertyType)) || t("CS_NA")
  }, {
    title: t("PT_ASSESMENT_INFO_PLOT_SIZE"),
    value: t(application === null || application === void 0 ? void 0 : application.landArea) || t("CS_NA")
  }, {
    title: t("PT_ASSESMENT_INFO_NO_OF_FLOOR"),
    value: t(application === null || application === void 0 ? void 0 : application.noOfFloors) || t("CS_NA")
  }];
  application.units = (application === null || application === void 0 ? void 0 : (_application$units = application.units) === null || _application$units === void 0 ? void 0 : _application$units.filter(unit => unit.active == true)) || [];
  let flrno,
    i = 0;
  flrno = application.units && ((_application$units$ = application.units[0]) === null || _application$units$ === void 0 ? void 0 : _application$units$.floorNo);
  application.units.map(unit => {
    var _unit$constructionDet;
    let doc = [{
      title: (flrno !== (unit === null || unit === void 0 ? void 0 : unit.floorNo) ? i = 1 : i = i + 1) && i === 1 ? t(`PROPERTYTAX_FLOOR_${unit === null || unit === void 0 ? void 0 : unit.floorNo}`) : ""
    }, {
      title: t("")
    }, {
      title: t("")
    }, {
      title: t("")
    }, {
      title: t("PT_UNIT") + " " + i
    }, {
      title: t("")
    }, {
      title: t("")
    }, {
      title: t("")
    }, {
      title: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t("PT_ASSESSMENT_UNIT_USAGE_TYPE") : "",
      value: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t(getPropertySubUsageTypeLocale(unit === null || unit === void 0 ? void 0 : unit.usageCategory)) || t("CS_NA") : ""
    }, {
      title: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t("PT_ASSESMENT_INFO_OCCUPLANCY") : "",
      value: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t(getPropertyOccupancyTypeLocale(unit === null || unit === void 0 ? void 0 : unit.occupancyType)) || t("CS_NA") : ""
    }, {
      title: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t("PT_FORM2_BUILT_AREA") : "",
      value: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t(unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea) || t("CS_NA") : ""
    }, {
      title: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t(getPropertyOccupancyTypeLocale(unit === null || unit === void 0 ? void 0 : unit.occupancyType)) === "Rented" ? t("PT_FORM2_TOTAL_ANNUAL_RENT") : t("") : "",
      value: (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 ? t(getPropertyOccupancyTypeLocale(unit === null || unit === void 0 ? void 0 : unit.occupancyType)) === "Rented" ? (unit === null || unit === void 0 ? void 0 : unit.arv) && `₹${t(unit === null || unit === void 0 ? void 0 : unit.arv)}` || "NA" : t("") : ""
    }];
    values.push(...doc);
  });
  return {
    title: t("PT_ASSESMENT_INFO_SUB_HEADER"),
    values: values
  };
};
const getMutationDetails = (application, t) => {
  var _application$addition, _application$addition2, _application$addition3, _application$addition4, _application$addition5;
  return {
    title: t("PT_MUTATION_DETAILS"),
    values: [{
      title: t("PT_MUTATION_COURT_PENDING_OR_NOT"),
      value: application !== null && application !== void 0 && (_application$addition = application.additionalDetails) !== null && _application$addition !== void 0 && _application$addition.isMutationInCourt ? t(`PT_MUTATION_PENDING_${application === null || application === void 0 ? void 0 : application.additionalDetails.isMutationInCourt}`) : t("CS_NA")
    }, {
      title: t("PT_MUTATION_COURT_CASE_DETAILS"),
      value: (application === null || application === void 0 ? void 0 : (_application$addition2 = application.additionalDetails) === null || _application$addition2 === void 0 ? void 0 : _application$addition2.caseDetails) || t("CS_NA")
    }, {
      title: t("PT_MUTATION_STATE_ACQUISITION"),
      value: application !== null && application !== void 0 && (_application$addition3 = application.additionalDetails) !== null && _application$addition3 !== void 0 && _application$addition3.isPropertyUnderGovtPossession ? t(`PT_MUTATION_STATE_ACQUISITION_${application === null || application === void 0 ? void 0 : (_application$addition4 = application.additionalDetails) === null || _application$addition4 === void 0 ? void 0 : _application$addition4.isPropertyUnderGovtPossession}`) : t("CS_NA")
    }, {
      title: t("PT_MUTATION_GOVT_ACQUISITION_DETAILS"),
      value: (application === null || application === void 0 ? void 0 : (_application$addition5 = application.additionalDetails) === null || _application$addition5 === void 0 ? void 0 : _application$addition5.govtAcquisitionDetails) || t("CS_NA")
    }]
  };
};
const mutationRegistrationDetails = (application, t) => {
  var _application$addition6, _application$addition7, _application$addition8, _application$addition9, _application$addition10, _application$addition11, _application$addition12;
  return {
    title: t("PT_MUTATION_REGISTRATION_DETAILS"),
    values: [{
      title: t("PT_MUTATION_TRANSFER_REASON"),
      value: t(`PROPERTYTAX_REASONFORTRANSFER_${application === null || application === void 0 ? void 0 : (_application$addition6 = application.additionalDetails) === null || _application$addition6 === void 0 ? void 0 : _application$addition6.reasonForTransfer.replaceAll(".", "_")}`)
    }, {
      title: t("PT_MUTATION_MARKET_VALUE"),
      value: (application === null || application === void 0 ? void 0 : (_application$addition7 = application.additionalDetails) === null || _application$addition7 === void 0 ? void 0 : _application$addition7.marketValue) || t("CS_NA")
    }, {
      title: t("PT_MUTATION_DOCUMENT_NO"),
      value: (application === null || application === void 0 ? void 0 : (_application$addition8 = application.additionalDetails) === null || _application$addition8 === void 0 ? void 0 : _application$addition8.documentNumber) || t("CS_NA")
    }, {
      title: t("PT_MUTATION_DOCUMENT_VALUE"),
      value: (application === null || application === void 0 ? void 0 : (_application$addition9 = application.additionalDetails) === null || _application$addition9 === void 0 ? void 0 : _application$addition9.documentValue) || t("CS_NA")
    }, {
      title: t("PT_MUTATION_DOCUMENT_ISSUE_DATE"),
      value: application !== null && application !== void 0 && (_application$addition10 = application.additionalDetails) !== null && _application$addition10 !== void 0 && _application$addition10.documentDate ? new Date(application === null || application === void 0 ? void 0 : (_application$addition11 = application.additionalDetails) === null || _application$addition11 === void 0 ? void 0 : _application$addition11.documentDate).toDateString() : t("CS_NA")
    }, {
      title: t("")
    }, {
      title: t("PT_MUTATION_REMARKS"),
      value: (application === null || application === void 0 ? void 0 : (_application$addition12 = application.additionalDetails) === null || _application$addition12 === void 0 ? void 0 : _application$addition12.remarks) || t("CS_NA")
    }]
  };
};
const getPTAcknowledgementData = async (application, tenantInfo, t) => {
  var _application$document, _tenantInfo$city2, _application$auditDet2, _application$address7, _application$address8, _application$address9, _application$address10, _application$address11, _application$address12;
  const filesArray = application === null || application === void 0 ? void 0 : (_application$document = application.documents) === null || _application$document === void 0 ? void 0 : _application$document.map(value => value === null || value === void 0 ? void 0 : value.fileStoreId);
  const res = (filesArray === null || filesArray === void 0 ? void 0 : filesArray.length) > 0 && (await Digit.UploadServices.Filefetch(filesArray, Digit.ULBService.getStateId()));
  if (application.creationReason === "MUTATION") {
    var _tenantInfo$city, _application$auditDet, _application$address, _application$address2, _application$address3, _application$address4, _application$address5, _application$address6;
    return {
      t: t,
      tenantId: tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.code,
      name: `${t(tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.i18nKey)} ${ulbCamel(t(`ULBGRADE_${tenantInfo === null || tenantInfo === void 0 ? void 0 : (_tenantInfo$city = tenantInfo.city) === null || _tenantInfo$city === void 0 ? void 0 : _tenantInfo$city.ulbGrade.toUpperCase().replace(" ", "_").replace(".", "_")}`))}`,
      email: tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.emailId,
      phoneNumber: tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.contactNumber,
      heading: t("PT_ACKNOWLEDGEMENT"),
      details: [{
        title: t("CS_TITLE_APPLICATION_DETAILS"),
        values: [{
          title: t("PT_APPLICATION_NO"),
          value: application === null || application === void 0 ? void 0 : application.acknowldgementNumber
        }, {
          title: t("PT_PROPERRTYID"),
          value: application === null || application === void 0 ? void 0 : application.propertyId
        }, {
          title: t("CS_APPLICATION_DETAILS_APPLICATION_DATE"),
          value: Digit.DateUtils.ConvertTimestampToDate(application === null || application === void 0 ? void 0 : (_application$auditDet = application.auditDetails) === null || _application$auditDet === void 0 ? void 0 : _application$auditDet.createdTime, "dd/MM/yyyy")
        }]
      }, {
        title: t("PT_PROPERTY_ADDRESS_SUB_HEADER"),
        values: [{
          title: t("PT_PROPERTY_ADDRESS_PINCODE"),
          value: (application === null || application === void 0 ? void 0 : (_application$address = application.address) === null || _application$address === void 0 ? void 0 : _application$address.pincode) || t("CS_NA")
        }, {
          title: t("PT_PROPERTY_ADDRESS_CITY"),
          value: t(getCityLocale(application === null || application === void 0 ? void 0 : application.tenantId)) || t("CS_NA")
        }, {
          title: t("PT_PROPERTY_ADDRESS_MOHALLA"),
          value: t(`${getMohallaLocale(application === null || application === void 0 ? void 0 : (_application$address2 = application.address) === null || _application$address2 === void 0 ? void 0 : (_application$address3 = _application$address2.locality) === null || _application$address3 === void 0 ? void 0 : _application$address3.code, application === null || application === void 0 ? void 0 : application.tenantId)}`) || t("CS_NA")
        }, {
          title: t("PT_PROPERTY_ADDRESS_STREET_NAME"),
          value: (application === null || application === void 0 ? void 0 : (_application$address4 = application.address) === null || _application$address4 === void 0 ? void 0 : _application$address4.street) || t("CS_NA")
        }, {
          title: t("PT_PROPERTY_ADDRESS_HOUSE_NO"),
          value: (application === null || application === void 0 ? void 0 : (_application$address5 = application.address) === null || _application$address5 === void 0 ? void 0 : _application$address5.doorNo) || t("CS_NA")
        }, {
          title: t("PT_PROPERTY_ADDRESS_LANDMARK"),
          value: (application === null || application === void 0 ? void 0 : (_application$address6 = application.address) === null || _application$address6 === void 0 ? void 0 : _application$address6.landmark) || t("CS_NA")
        }]
      }, getOwner(application, t, "PT_MUTATION_TRANSFEROR_DETAILS"), getOwner(application, t, "PT_MUTATION_TRANSFEREE_DETAILS_HEADER"), getMutationDetails(application, t), mutationRegistrationDetails(application, t)]
    };
  }
  return {
    t: t,
    tenantId: tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.code,
    name: `${t(tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.i18nKey)} ${ulbCamel(t(`ULBGRADE_${tenantInfo === null || tenantInfo === void 0 ? void 0 : (_tenantInfo$city2 = tenantInfo.city) === null || _tenantInfo$city2 === void 0 ? void 0 : _tenantInfo$city2.ulbGrade.toUpperCase().replace(" ", "_").replace(".", "_")}`))}`,
    email: tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.emailId,
    phoneNumber: tenantInfo === null || tenantInfo === void 0 ? void 0 : tenantInfo.contactNumber,
    heading: t("PT_ACKNOWLEDGEMENT"),
    details: [{
      title: t("CS_TITLE_APPLICATION_DETAILS"),
      values: [{
        title: t("PT_APPLICATION_NO"),
        value: application === null || application === void 0 ? void 0 : application.acknowldgementNumber
      }, {
        title: t("PT_PROPERRTYID"),
        value: application === null || application === void 0 ? void 0 : application.propertyId
      }, {
        title: t("CS_APPLICATION_DETAILS_APPLICATION_DATE"),
        value: Digit.DateUtils.ConvertTimestampToDate(application === null || application === void 0 ? void 0 : (_application$auditDet2 = application.auditDetails) === null || _application$auditDet2 === void 0 ? void 0 : _application$auditDet2.createdTime, "dd/MM/yyyy")
      }]
    }, getOwner(application, t), getAssessmentInfo(application, t), {
      title: t("PT_PROPERTY_ADDRESS_SUB_HEADER"),
      values: [{
        title: t("PT_PROPERTY_ADDRESS_PINCODE"),
        value: (application === null || application === void 0 ? void 0 : (_application$address7 = application.address) === null || _application$address7 === void 0 ? void 0 : _application$address7.pincode) || t("CS_NA")
      }, {
        title: t("PT_PROPERTY_ADDRESS_CITY"),
        value: t(getCityLocale(application === null || application === void 0 ? void 0 : application.tenantId)) || t("CS_NA")
      }, {
        title: t("PT_PROPERTY_ADDRESS_MOHALLA"),
        value: t(`${getMohallaLocale(application === null || application === void 0 ? void 0 : (_application$address8 = application.address) === null || _application$address8 === void 0 ? void 0 : (_application$address9 = _application$address8.locality) === null || _application$address9 === void 0 ? void 0 : _application$address9.code, application === null || application === void 0 ? void 0 : application.tenantId)}`) || t("CS_NA")
      }, {
        title: t("PT_PROPERTY_ADDRESS_STREET_NAME"),
        value: (application === null || application === void 0 ? void 0 : (_application$address10 = application.address) === null || _application$address10 === void 0 ? void 0 : _application$address10.street) || t("CS_NA")
      }, {
        title: t("PT_PROPERTY_ADDRESS_HOUSE_NO"),
        value: (application === null || application === void 0 ? void 0 : (_application$address11 = application.address) === null || _application$address11 === void 0 ? void 0 : _application$address11.doorNo) || t("CS_NA")
      }, (application === null || application === void 0 ? void 0 : application.channel) === "CITIZEN" ? {
        title: t("PT_PROPERTY_ADDRESS_LANDMARK"),
        value: (application === null || application === void 0 ? void 0 : (_application$address12 = application.address) === null || _application$address12 === void 0 ? void 0 : _application$address12.landmark) || t("CS_NA")
      } : {}]
    }, {
      title: t("PT_COMMON_DOCS"),
      values: application.documents && application.documents.length > 0 ? application.documents.map((document, index) => {
        let documentLink = pdfDownloadLink(res === null || res === void 0 ? void 0 : res.data, document === null || document === void 0 ? void 0 : document.fileStoreId);
        return {
          title: t((document === null || document === void 0 ? void 0 : document.documentType) || t("CS_NA")),
          value: pdfDocumentName(documentLink, index) || t("CS_NA")
        };
      }) : {
        title: t("PT_NO_DOCUMENTS"),
        value: " "
      }
    }]
  };
};

const GetActionMessage = props => {
  const {
    t
  } = useTranslation();
  if (props.isSuccess) {
    return !window.location.href.includes("edit-application") ? t("CS_PROPERTY_APPLICATION_SUCCESS") : t("CS_PROPERTY_UPDATE_APPLICATION_SUCCESS");
  } else if (props.isLoading) {
    return !window.location.href.includes("edit-application") ? t("CS_PROPERTY_APPLICATION_PENDING") : t("CS_PROPERTY_UPDATE_APPLICATION_PENDING");
  } else if (!props.isSuccess) {
    return !window.location.href.includes("edit-application") ? t("CS_PROPERTY_APPLICATION_FAILED") : t("CS_PROPERTY_UPDATE_APPLICATION_FAILED");
  }
};
const rowContainerStyle = {
  padding: "4px 0px",
  justifyContent: "space-between"
};
const BannerPicker = props => {
  var _props$data;
  return /*#__PURE__*/React.createElement(Banner, {
    message: GetActionMessage(props),
    applicationNumber: (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.Properties[0].acknowldgementNumber,
    info: props.isSuccess ? props.t("PT_APPLICATION_NO") : "",
    successful: props.isSuccess,
    style: {
      width: "100%"
    }
  });
};
const PTAcknowledgement = ({
  data,
  onSuccess
}) => {
  var _data$address, _data$address2, _data$address2$city, _mutation$data, _mutation$data$Proper;
  const {
    t
  } = useTranslation();
  const isPropertyMutation = window.location.href.includes("property-mutation");
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const mutation = Digit.Hooks.pt.usePropertyAPI(data !== null && data !== void 0 && (_data$address = data.address) !== null && _data$address !== void 0 && _data$address.city ? (_data$address2 = data.address) === null || _data$address2 === void 0 ? void 0 : (_data$address2$city = _data$address2.city) === null || _data$address2$city === void 0 ? void 0 : _data$address2$city.code : tenantId, !window.location.href.includes("edit-application") && !isPropertyMutation);
  const {
    data: storeData
  } = Digit.Hooks.useStore.getInitData();
  const match = useRouteMatch();
  const {
    tenants
  } = storeData || {};
  useEffect(() => {
    try {
      var _data$Property, _data$address3, _data$address4, _data$address4$city, _formdata$Property;
      let tenantId = isPropertyMutation ? (_data$Property = data.Property) === null || _data$Property === void 0 ? void 0 : _data$Property.address.tenantId : data !== null && data !== void 0 && (_data$address3 = data.address) !== null && _data$address3 !== void 0 && _data$address3.city ? (_data$address4 = data.address) === null || _data$address4 === void 0 ? void 0 : (_data$address4$city = _data$address4.city) === null || _data$address4$city === void 0 ? void 0 : _data$address4$city.code : tenantId;
      data.tenantId = tenantId;
      let formdata = !window.location.href.includes("edit-application") ? isPropertyMutation ? data : convertToProperty(data) : convertToUpdateProperty(data, t);
      formdata.Property.tenantId = (formdata === null || formdata === void 0 ? void 0 : (_formdata$Property = formdata.Property) === null || _formdata$Property === void 0 ? void 0 : _formdata$Property.tenantId) || tenantId;
      mutation.mutate(formdata, {
        onSuccess
      });
    } catch (err) {}
  }, []);
  const handleDownloadPdf = async () => {
    var _propertyDetails$Prop, _propertyDetails$Prop2, _propertyDetails$Prop3;
    const {
      Properties = []
    } = mutation.data;
    let Property = Properties && Properties[0] || {};
    const tenantInfo = tenants.find(tenant => tenant.code === Property.tenantId);
    let tenantId = Property.tenantId || tenantId;
    const propertyDetails = await Digit.PTService.search({
      tenantId,
      filters: {
        propertyIds: Property === null || Property === void 0 ? void 0 : Property.propertyId,
        status: "INACTIVE"
      }
    });
    Property.transferorDetails = (propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$Prop = propertyDetails.Properties) === null || _propertyDetails$Prop === void 0 ? void 0 : _propertyDetails$Prop[0]) || [];
    Property.isTransferor = true;
    Property.transferorOwnershipCategory = propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$Prop2 = propertyDetails.Properties) === null || _propertyDetails$Prop2 === void 0 ? void 0 : (_propertyDetails$Prop3 = _propertyDetails$Prop2[0]) === null || _propertyDetails$Prop3 === void 0 ? void 0 : _propertyDetails$Prop3.ownershipCategory;
    const data = await getPTAcknowledgementData({
      ...Property
    }, tenantInfo, t);
    Digit.Utils.pdf.generate(data);
  };
  return mutation.isLoading || mutation.isIdle ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(BannerPicker, {
    t: t,
    data: mutation.data,
    isSuccess: mutation.isSuccess,
    isLoading: mutation.isIdle || mutation.isLoading
  }), mutation.isSuccess && /*#__PURE__*/React.createElement(CardText, null, t("CS_FILE_PROPERTY_RESPONSE")), !mutation.isSuccess && /*#__PURE__*/React.createElement(CardText, null, t("CS_FILE_PROPERTY_FAILED_RESPONSE")), /*#__PURE__*/React.createElement(StatusTable, null, mutation.isSuccess && /*#__PURE__*/React.createElement(Row, {
    rowContainerStyle: rowContainerStyle,
    last: true,
    label: t("PT_COMMON_TABLE_COL_PT_ID"),
    text: mutation === null || mutation === void 0 ? void 0 : (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$Proper = _mutation$data.Properties[0]) === null || _mutation$data$Proper === void 0 ? void 0 : _mutation$data$Proper.propertyId,
    textStyle: {
      whiteSpace: "pre",
      width: "60%"
    }
  })), mutation.isSuccess && /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_DOWNLOAD_ACK_FORM"),
    onSubmit: handleDownloadPdf
  }), /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen`
  }, /*#__PURE__*/React.createElement(LinkButton, {
    label: t("CORE_COMMON_GO_TO_HOME")
  })));
};

const SwitchComponent = props => {
  let searchBy = props.searchBy;
  return /*#__PURE__*/React.createElement("div", {
    className: "w-fullwidth PropertySearchFormSwitcher"
  }, props.keys.map(key => /*#__PURE__*/React.createElement("span", {
    key: key,
    className: searchBy === key ? "selected" : "non-selected",
    onClick: () => {
      key === "searchDetail" && !sessionStorage.getItem("searchDetailValue") ? sessionStorage.setItem("searchDetailValue", 1) : "";
      key === "searchId" && sessionStorage.getItem("searchDetailValue") == 1 ? sessionStorage.setItem("searchDetailValue", 2) : "";
      props.onSwitch(key);
      props.onReset();
    }
  }, props.t(`PT_SEARCH_BY_${key === null || key === void 0 ? void 0 : key.toUpperCase()}`))));
};
const SearchPTID = ({
  tenantId,
  t,
  onSubmit,
  onReset,
  searchBy,
  PTSearchFields,
  setSearchBy,
  payload
}) => {
  const {
    register,
    control,
    handleSubmit,
    setValue,
    watch,
    getValues,
    reset,
    formState
  } = useForm({
    defaultValues: {
      ...payload
    }
  });
  const formValue = watch();
  const fields = (PTSearchFields === null || PTSearchFields === void 0 ? void 0 : PTSearchFields[searchBy]) || {};
  sessionStorage.removeItem("revalidateddone");
  return /*#__PURE__*/React.createElement("div", {
    className: "PropertySearchForm"
  }, /*#__PURE__*/React.createElement(SearchForm, {
    onSubmit: onSubmit,
    className: "pt-property-search",
    handleSubmit: handleSubmit
  }, /*#__PURE__*/React.createElement(SwitchComponent, {
    keys: Object.keys(PTSearchFields || {}),
    searchBy: searchBy,
    onReset: onReset,
    t: t,
    onSwitch: setSearchBy
  }), fields && Object.keys(fields).map(key => {
    var _field$validation, _formState$errors, _formState$errors$key;
    let field = fields[key];
    let validation = (field === null || field === void 0 ? void 0 : field.validation) || {};
    return /*#__PURE__*/React.createElement(SearchField, {
      key: key,
      className: "pt-form-field"
    }, /*#__PURE__*/React.createElement("label", null, t(field === null || field === void 0 ? void 0 : field.label), `${field !== null && field !== void 0 && (_field$validation = field.validation) !== null && _field$validation !== void 0 && _field$validation.required ? "*" : ""}`), (field === null || field === void 0 ? void 0 : field.type) === "custom" ? /*#__PURE__*/React.createElement(Controller, {
      name: key,
      defaultValue: formValue === null || formValue === void 0 ? void 0 : formValue[key],
      rules: field.validation,
      control: control,
      render: (props, customProps) => /*#__PURE__*/React.createElement(field.customComponent, Object.assign({
        selectLocality: d => {
          props.onChange(d);
        },
        tenantId: tenantId,
        selected: formValue === null || formValue === void 0 ? void 0 : formValue[key]
      }, field.customCompProps))
    }) : (field === null || field === void 0 ? void 0 : field.type) === "number" ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MobileNumber, {
      name: "mobileNumber",
      inputRef: register({
        value: getValues(key),
        shouldUnregister: true,
        ...validation
      }),
      type: "number",
      componentInFront: /*#__PURE__*/React.createElement("div", {
        className: "employee-card-input employee-card-input--front"
      }, "+91")
    })) : /*#__PURE__*/React.createElement(TextInput, {
      name: key,
      type: field === null || field === void 0 ? void 0 : field.type,
      inputRef: register({
        value: getValues(key),
        shouldUnregister: true,
        ...validation
      })
    }), /*#__PURE__*/React.createElement(CardLabelError, {
      style: {
        marginTop: "-10px",
        marginBottom: "-10px"
      }
    }, t(formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$key = _formState$errors[key]) === null || _formState$errors$key === void 0 ? void 0 : _formState$errors$key.message)));
  }), /*#__PURE__*/React.createElement("div", {
    className: "pt-search-action"
  }, /*#__PURE__*/React.createElement(SearchField, {
    className: "pt-search-action-reset"
  }, /*#__PURE__*/React.createElement("p", {
    style: {
      color: "#a82227"
    },
    onClick: () => {
      onReset({});
    }
  }, t(`ES_COMMON_CLEAR_ALL`))), /*#__PURE__*/React.createElement(SearchField, {
    className: "pt-search-action-submit"
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("ES_COMMON_SEARCH"),
    submit: true
  })))));
};

const PropertyInvalidMobileNumber = ({
  userType,
  propertyId: propertyIdFromProp,
  skipNContinue,
  updateMobileNumber
}) => {
  const {
    t
  } = useTranslation();
  const {
    propertyIds
  } = useParams();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, t('PT_INVALID_OWNERS_MOBILE_NO'))), /*#__PURE__*/React.createElement("div", {
    style: {
      width: "100%",
      display: "flex",
      justifyContent: "flex-end"
    }
  }, /*#__PURE__*/React.createElement(ButtonSelector, {
    theme: "border",
    label: t('PT_SKIP_N_CONTINUE'),
    onSubmit: skipNContinue,
    style: {
      marginLeft: "10px"
    }
  }), /*#__PURE__*/React.createElement(ButtonSelector, {
    label: t('PT_UPDATE_MOBILE_NO'),
    onSubmit: updateMobileNumber,
    style: {
      marginLeft: "10px"
    }
  }))));
};

const GetCell = value => /*#__PURE__*/React.createElement("span", {
  className: "cell-text"
}, value);
const SearchPTID$1 = ({
  tenantId,
  t,
  payload,
  showToast,
  setShowToast,
  ptSearchConfig
}) => {
  var _Digit, _Digit$ComponentRegis, _data$Properties, _data$Properties2;
  const history = useHistory();
  const [searchQuery, setSearchQuery] = useState({
    ...payload
  });
  const [showModal, setShowModal] = useState(false);
  const [showUpdateNo, setShowUpdateNo] = useState(false);
  const [selectedProperty, setSelectedProperty] = useState(null);
  const [ownerInvalidMobileNumberIndex, setOwnerInvalidMobileNumberIndex] = useState(0);
  const {
    data,
    isLoading,
    error,
    isSuccess,
    billData,
    revalidate
  } = Digit.Hooks.pt.usePropertySearchWithDue({
    tenantId,
    filters: searchQuery,
    configs: {
      enabled: Object.keys(payload).length > 0 ? true : false,
      retry: false,
      retryOnMount: false,
      staleTime: Infinity
    }
  });
  const mutation = Digit.Hooks.pt.usePropertyAPI(tenantId, false);
  const UpdatePropertyNumberComponent = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("EmployeeUpdateOwnerNumber");
  const {
    data: updateNumberConfig
  } = Digit.Hooks.useCommonMDMS(Digit.ULBService.getStateId(), "PropertyTax", ["UpdateNumber"], {
    select: data => {
      var _data$PropertyTax, _data$PropertyTax$Upd;
      return data === null || data === void 0 ? void 0 : (_data$PropertyTax = data.PropertyTax) === null || _data$PropertyTax === void 0 ? void 0 : (_data$PropertyTax$Upd = _data$PropertyTax.UpdateNumber) === null || _data$PropertyTax$Upd === void 0 ? void 0 : _data$PropertyTax$Upd[0];
    },
    retry: false,
    enable: false
  });
  const handleCollectTaxClick = val => {
    let isAtleastOneMobileNumberInvalid = false;
    let {
      owners
    } = val;
    owners = owners && owners.filter(owner => owner.status == "ACTIVE");
    owners && owners.map((owner, index) => {
      let number = owner.mobileNumber;
      if (number == (updateNumberConfig === null || updateNumberConfig === void 0 ? void 0 : updateNumberConfig.invalidNumber) || !number.match(updateNumberConfig === null || updateNumberConfig === void 0 ? void 0 : updateNumberConfig.invalidPattern) && number == JSON.parse(getUserInfo()).mobileNumber) {
        isAtleastOneMobileNumberInvalid = true;
        setOwnerInvalidMobileNumberIndex(index);
      }
    });
    if (isAtleastOneMobileNumberInvalid) {
      setShowModal(true);
      setSelectedProperty(val);
    } else {
      revalidate();
      history.push(`/digit-ui/employee/payment/collect/PT/${val === null || val === void 0 ? void 0 : val["propertyId"]}`);
    }
  };
  const Close = () => /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
  const CloseBtn = props => {
    return /*#__PURE__*/React.createElement("div", {
      className: "icon-bg-secondary",
      onClick: props.onClick
    }, /*#__PURE__*/React.createElement(Close, null));
  };
  const skipNContinue = () => {
    history.push(`/digit-ui/employee/payment/collect/PT/${selectedProperty === null || selectedProperty === void 0 ? void 0 : selectedProperty['propertyId']}`);
  };
  const updateMobileNumber = () => {
    var _selectedProperty$own, _selectedProperty$own2;
    const ind = ownerInvalidMobileNumberIndex;
    setShowModal(true);
    setShowUpdateNo({
      name: selectedProperty === null || selectedProperty === void 0 ? void 0 : (_selectedProperty$own = selectedProperty.owners[ind]) === null || _selectedProperty$own === void 0 ? void 0 : _selectedProperty$own.name,
      mobileNumber: selectedProperty === null || selectedProperty === void 0 ? void 0 : (_selectedProperty$own2 = selectedProperty.owners[ind]) === null || _selectedProperty$own2 === void 0 ? void 0 : _selectedProperty$own2.mobileNumber,
      index: ind
    });
  };
  const columns = useMemo(() => [{
    Header: t("PT_COMMON_TABLE_COL_PT_ID"),
    disableSortBy: true,
    Cell: ({
      row
    }) => {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
        className: "link"
      }, /*#__PURE__*/React.createElement(Link, {
        to: `/digit-ui/employee/pt/ptsearch/property-details/${row.original["propertyId"]}`
      }, row.original["propertyId"])));
    }
  }, {
    Header: t("PT_COMMON_TABLE_COL_OWNER_NAME"),
    disableSortBy: true,
    Cell: ({
      row
    }) => GetCell(`${row.original.owners.map(ob => ob.name).join(",")}` || "")
  }, {
    Header: t("ES_INBOX_LOCALITY"),
    disableSortBy: true,
    Cell: ({
      row
    }) => GetCell(t(row.original.locality) || "")
  }, {
    Header: t("PT_COMMON_TABLE_COL_STATUS_LABEL"),
    Cell: ({
      row
    }) => {
      var _row$original;
      return GetCell(t((row === null || row === void 0 ? void 0 : (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.status) || "NA"));
    },
    disableSortBy: true
  }, {
    Header: t("PT_AMOUNT_DUE"),
    Cell: ({
      row
    }) => {
      var _row$original2, _row$original3;
      return GetCell(row !== null && row !== void 0 && (_row$original2 = row.original) !== null && _row$original2 !== void 0 && _row$original2.due ? `₹ ${row === null || row === void 0 ? void 0 : (_row$original3 = row.original) === null || _row$original3 === void 0 ? void 0 : _row$original3.due}` : t("PT_NA"));
    },
    disableSortBy: true
  }, {
    Header: t("ES_SEARCH_ACTION"),
    disableSortBy: true,
    Cell: ({
      row
    }) => {
      var _row$original4;
      return /*#__PURE__*/React.createElement("div", null, ((_row$original4 = row.original) === null || _row$original4 === void 0 ? void 0 : _row$original4.due) > 0 && Digit.Utils.didEmployeeHasRole("PT_CEMP") ? /*#__PURE__*/React.createElement("span", {
        className: "link"
      }, /*#__PURE__*/React.createElement("a", {
        style: {
          textDecoration: 'none'
        },
        onClick: () => handleCollectTaxClick(row.original)
      }, t("ES_PT_COLLECT_TAX"))) : null);
    }
  }], []);
  let isMobile = window.Digit.Utils.browser.isMobile();
  if (isLoading) {
    showToast && setShowToast(null);
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if (error) {
    var _error$response, _error$response$data, _error$response$data$, _error$response$data$2;
    !showToast && setShowToast({
      error: true,
      label: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.Errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.code) || error
    });
    return null;
  }
  const PTEmptyResultInbox = memo(Digit.ComponentRegistryService.getComponent("PTEmptyResultInbox"));
  const getData = (tableData = []) => {
    return tableData === null || tableData === void 0 ? void 0 : tableData.map(dataObj => {
      const obj = {};
      columns.forEach(el => {
        if (el.Cell) obj[el.Header] = el.Cell({
          row: {
            original: dataObj
          }
        });
      });
      return obj;
    });
  };
  const tableData = Object.values((data === null || data === void 0 ? void 0 : data.FormattedData) || {}) || [];
  if (ptSearchConfig !== null && ptSearchConfig !== void 0 && ptSearchConfig.ptSearchCount && payload.locality && tableData && tableData.length > ptSearchConfig.ptSearchCount) {
    !showToast && setShowToast({
      error: true,
      label: "PT_MODIFY_SEARCH_CRITERIA"
    });
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, (data === null || data === void 0 ? void 0 : (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : _data$Properties.length) === 0 ? /*#__PURE__*/React.createElement(PTEmptyResultInbox, {
    data: true
  }) : isMobile ? /*#__PURE__*/React.createElement(DetailsCard, {
    data: getData(tableData),
    t: t
  }) : /*#__PURE__*/React.createElement(Table, {
    t: t,
    data: tableData,
    totalRecords: data === null || data === void 0 ? void 0 : (_data$Properties2 = data.Properties) === null || _data$Properties2 === void 0 ? void 0 : _data$Properties2.length,
    columns: columns,
    getCellProps: cellInfo => {
      return {
        style: {
          padding: "20px 18px",
          fontSize: "16px"
        }
      };
    },
    manualPagination: false,
    disableSort: true
  }), showModal ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement("h1", {
      className: "heading-m"
    }, showUpdateNo ? t("PTUPNO_HEADER") : t("PT_INVALID_MOBILE_NO")),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn, {
      onClick: () => {
        setShowModal(false);
        setShowUpdateNo(false);
      }
    }),
    hideSubmit: true,
    isDisabled: false,
    popupStyles: {
      width: "50%",
      marginTop: "auto"
    }
  }, showUpdateNo && /*#__PURE__*/React.createElement(UpdatePropertyNumberComponent, {
    showPopup: setShowModal,
    name: showUpdateNo === null || showUpdateNo === void 0 ? void 0 : showUpdateNo.name,
    UpdateNumberConfig: updateNumberConfig,
    mobileNumber: showUpdateNo === null || showUpdateNo === void 0 ? void 0 : showUpdateNo.mobileNumber,
    t: t,
    onValidation: (data, showToast) => {
      let newProp = {
        ...selectedProperty
      };
      newProp.owners[showUpdateNo === null || showUpdateNo === void 0 ? void 0 : showUpdateNo.index].mobileNumber = data.mobileNumber;
      newProp.creationReason = "UPDATE";
      newProp.workflow = null;
      let newDocObj = {
        ...data
      };
      delete newDocObj.mobileNumber;
      newProp.documents = [...newProp.documents, ...Object.keys(newDocObj).map(key => ({
        documentType: key,
        documentUid: newDocObj[key],
        fileStoreId: newDocObj[key]
      }))];
      mutation.mutate({
        Property: newProp
      }, {
        onError: () => {},
        onSuccess: async successRes => {
          showToast();
          setTimeout(() => {
            window.location.reload();
          }, 3000);
        }
      });
    }
  }), !showUpdateNo && /*#__PURE__*/React.createElement(PropertyInvalidMobileNumber, {
    propertyId: selectedProperty === null || selectedProperty === void 0 ? void 0 : selectedProperty.propertyId,
    userType: "employee",
    skipNContinue: skipNContinue,
    updateMobileNumber: updateMobileNumber
  })) : null);
};

const getUsageCategory = (usageCategory = "") => {
  let categoryArray = (usageCategory === null || usageCategory === void 0 ? void 0 : usageCategory.split(".")) || [];
  let tempObj = {};
  tempObj["usageCategoryMajor"] = categoryArray && categoryArray.length > 0 && categoryArray[0];
  tempObj["usageCategoryMinor"] = categoryArray && categoryArray.length > 1 && categoryArray[1];
  tempObj["usageCategorySubMinor"] = categoryArray && categoryArray.length > 2 && categoryArray[2];
  tempObj["usageCategoryDetail"] = categoryArray && categoryArray.length > 3 && categoryArray[3];
  return tempObj;
};
const formatUnits = (units = [], currentFloor, isFloor) => {
  if (!units || units.length == 0) {
    return [{
      usageCategory: "",
      unitType: "",
      occupancyType: "",
      builtUpArea: null,
      arv: "",
      floorNo: isFloor ? {
        code: currentFloor,
        i18nKey: `PROPERTYTAX_FLOOR_${currentFloor}`
      } : ""
    }];
  }
  return units.map(unit => {
    var _unit$usageCategory, _getUsageCategory, _unit$constructionDet, _unit$unitType;
    let usageCategory = unit !== null && unit !== void 0 && unit.usageCategory && !(unit !== null && unit !== void 0 && (_unit$usageCategory = unit.usageCategory) !== null && _unit$usageCategory !== void 0 && _unit$usageCategory.includes("NONRESIDENTIAL")) ? "RESIDENTIAL" : (_getUsageCategory = getUsageCategory(unit === null || unit === void 0 ? void 0 : unit.usageCategory)) === null || _getUsageCategory === void 0 ? void 0 : _getUsageCategory.usageCategoryMinor;
    return {
      ...unit,
      builtUpArea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea,
      usageCategory: usageCategory ? {
        code: usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${usageCategory}`
      } : {},
      occupancyType: unit !== null && unit !== void 0 && unit.occupancyType ? {
        code: unit.occupancyType,
        i18nKey: `PROPERTYTAX_OCCUPANCYTYPE_${unit === null || unit === void 0 ? void 0 : unit.occupancyType}`
      } : "",
      floorNo: unit !== null && unit !== void 0 && unit.floorNo || Number.isInteger(unit === null || unit === void 0 ? void 0 : unit.floorNo) ? {
        code: unit.floorNo,
        i18nKey: `PROPERTYTAX_FLOOR_${unit === null || unit === void 0 ? void 0 : unit.floorNo}`
      } : {},
      unitType: unit !== null && unit !== void 0 && unit.unitType ? {
        code: unit.unitType,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(unit === null || unit === void 0 ? void 0 : (_unit$unitType = unit.unitType) === null || _unit$unitType === void 0 ? void 0 : _unit$unitType.code) || (unit === null || unit === void 0 ? void 0 : unit.unitType)}`
      } : ""
    };
  });
};
const SelectPTUnits = React.memo(({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _formData$units;
  let path = window.location.pathname.split("/");
  let currentFloor = Number(path[path.length - 1]);
  let isFloor = window.location.pathname.includes("new-application/units") || window.location.pathname.includes("/edit-application/units");
  const [fields, setFields] = useState(formatUnits(isFloor ? formData === null || formData === void 0 ? void 0 : (_formData$units = formData.units) === null || _formData$units === void 0 ? void 0 : _formData$units.filter(ee => ee.floorNo == currentFloor) : formData === null || formData === void 0 ? void 0 : formData.units, currentFloor, isFloor));
  useEffect(() => {
    setFields(() => {
      var _formData$units2;
      return formatUnits(isFloor ? formData === null || formData === void 0 ? void 0 : (_formData$units2 = formData.units) === null || _formData$units2 === void 0 ? void 0 : _formData$units2.filter(ee => ee.floorNo == currentFloor) : formData === null || formData === void 0 ? void 0 : formData.units, currentFloor, isFloor);
    });
    return () => {
      setFields(null);
    };
  }, [currentFloor, formData, isFloor]);
  const getheader = () => {
    var _formData$PropertyTyp;
    if ((formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp = formData.PropertyType) === null || _formData$PropertyTyp === void 0 ? void 0 : _formData$PropertyTyp.i18nKey) === "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY") {
      return "PT_FLAT_DETAILS_HEADER";
    } else {
      return `PROPERTYTAX_FLOOR_${currentFloor}_DETAILS`;
    }
  };
  const {
    data: mdmsData,
    isLoading
  } = Digit.Hooks.useCommonMDMS(Digit.ULBService.getStateId(), "PropertyTax", ["Floor", "OccupancyType", "UsageCategory"], {
    select: data => {
      var _data$PropertyTax, _data$PropertyTax$Usa, _data$PropertyTax2, _data$PropertyTax3, _data$PropertyTax3$Fl, _data$PropertyTax3$Fl2, _data$PropertyTax4, _data$PropertyTax4$Oc, _data$PropertyTax4$Oc2, _data$PropertyTax5;
      let usageCategory = data === null || data === void 0 ? void 0 : (_data$PropertyTax = data.PropertyTax) === null || _data$PropertyTax === void 0 ? void 0 : (_data$PropertyTax$Usa = _data$PropertyTax.UsageCategory) === null || _data$PropertyTax$Usa === void 0 ? void 0 : _data$PropertyTax$Usa.map(category => getUsageCategory(category.code)).filter(category => category.usageCategoryDetail === false && category.usageCategorySubMinor === false && category.usageCategoryMinor !== false).map(category => ({
        code: category.usageCategoryMinor,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${category.usageCategoryMinor}`
      }));
      let subCategory = Digit.Utils.getUnique(data === null || data === void 0 ? void 0 : (_data$PropertyTax2 = data.PropertyTax) === null || _data$PropertyTax2 === void 0 ? void 0 : _data$PropertyTax2.UsageCategory.map(e => getUsageCategory(e.code)).filter(e => e.usageCategoryDetail).map(e => ({
        code: e.usageCategoryDetail,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${e.usageCategoryDetail}`,
        usageCategorySubMinor: e.usageCategorySubMinor,
        usageCategoryMinor: e.usageCategoryMinor
      })));
      return {
        Floor: data === null || data === void 0 ? void 0 : (_data$PropertyTax3 = data.PropertyTax) === null || _data$PropertyTax3 === void 0 ? void 0 : (_data$PropertyTax3$Fl = _data$PropertyTax3.Floor) === null || _data$PropertyTax3$Fl === void 0 ? void 0 : (_data$PropertyTax3$Fl2 = _data$PropertyTax3$Fl.filter(floor => floor.active)) === null || _data$PropertyTax3$Fl2 === void 0 ? void 0 : _data$PropertyTax3$Fl2.map(floor => ({
          i18nKey: `PROPERTYTAX_FLOOR_${floor.code}`,
          code: floor.code
        })),
        OccupancyType: data === null || data === void 0 ? void 0 : (_data$PropertyTax4 = data.PropertyTax) === null || _data$PropertyTax4 === void 0 ? void 0 : (_data$PropertyTax4$Oc = _data$PropertyTax4.OccupancyType) === null || _data$PropertyTax4$Oc === void 0 ? void 0 : (_data$PropertyTax4$Oc2 = _data$PropertyTax4$Oc.filter(occupancy => occupancy.active)) === null || _data$PropertyTax4$Oc2 === void 0 ? void 0 : _data$PropertyTax4$Oc2.map(occupancy => ({
          i18nKey: `PROPERTYTAX_OCCUPANCYTYPE_${occupancy.code}`,
          code: occupancy.code
        })),
        UsageCategory: usageCategory,
        UsageSubCategory: subCategory,
        usageDetails: data === null || data === void 0 ? void 0 : (_data$PropertyTax5 = data.PropertyTax) === null || _data$PropertyTax5 === void 0 ? void 0 : _data$PropertyTax5.UsageCategory
      };
    },
    retry: false,
    enable: false
  });
  function handleAdd() {
    const values = [...fields];
    values.push({
      usageCategory: "",
      unitType: "",
      occupancyType: "",
      builtUpArea: null,
      arv: "",
      floorNo: isFloor ? {
        code: currentFloor,
        i18nKey: `PROPERTYTAX_FLOOR_${currentFloor}`
      } : ""
    });
    setFields(values);
  }
  function handleRemove(index) {
    const values = [...fields];
    if (values.length != 1) {
      values.splice(index, 1);
      setFields(values);
    }
  }
  function selectSubUsageCategory(i, value) {
    let units = [...fields];
    units[i].unitType = value;
    setFields(units);
  }
  function selectUsageCategory(i, value) {
    let units = [...fields];
    units[i].usageCategory = value;
    units[i].unitType = "";
    setFields(units);
  }
  function selectFloor(i, value) {
    let units = [...fields];
    units[i].floorNo = value;
    setFields(units);
  }
  function selectOccupancy(i, value) {
    let units = [...fields];
    units[i].occupancyType = value;
    setFields(units);
  }
  function onChangeRent(i, e) {
    let units = [...fields];
    units[i].arv = e.target.value;
    setFields(units);
  }
  function onChangeArea(i, e) {
    let units = [...fields];
    units[i].builtUpArea = e.target.value;
    setFields(units);
  }
  const goNext = () => {
    var _formData$noOfFloors;
    let units = (formData === null || formData === void 0 ? void 0 : formData.units) || [];
    let unitsdata = fields.map(field => {
      var _field$unitType, _field$unitType2, _field$unitType2$code;
      if (typeof (field === null || field === void 0 ? void 0 : (_field$unitType = field.unitType) === null || _field$unitType === void 0 ? void 0 : _field$unitType.code) === "object" && field !== null && field !== void 0 && (_field$unitType2 = field.unitType) !== null && _field$unitType2 !== void 0 && (_field$unitType2$code = _field$unitType2.code) !== null && _field$unitType2$code !== void 0 && _field$unitType2$code.code) {
        var _field$unitType3, _field$unitType3$code;
        field["unitType"].code = field === null || field === void 0 ? void 0 : (_field$unitType3 = field.unitType) === null || _field$unitType3 === void 0 ? void 0 : (_field$unitType3$code = _field$unitType3.code) === null || _field$unitType3$code === void 0 ? void 0 : _field$unitType3$code.code;
      }
      let unit = {};
      Object.keys(field).filter(key => field[key]).map(key => {
        if (typeof field["unitType"] == "object" && field["unitType"].code == undefined) {
          field["unitType"] = "";
        }
        if (key === "usageCategory") {
          var _mdmsData$usageDetail;
          unit["usageCategory"] = mdmsData === null || mdmsData === void 0 ? void 0 : (_mdmsData$usageDetail = mdmsData.usageDetails.find(e => {
            var _field$key, _field$unitType4;
            return e.code.includes((_field$key = field[key]) === null || _field$key === void 0 ? void 0 : _field$key.code) && e.code.includes(typeof field["unitType"] === "object" ? (_field$unitType4 = field["unitType"]) === null || _field$unitType4 === void 0 ? void 0 : _field$unitType4.code : field["unitType"]);
          })) === null || _mdmsData$usageDetail === void 0 ? void 0 : _mdmsData$usageDetail.code;
        } else if (key === "builtUpArea") {
          unit["constructionDetail"] = {
            builtUpArea: field[key]
          };
        } else {
          var _field$key2;
          unit[key] = typeof field[key] == "object" ? (_field$key2 = field[key]) === null || _field$key2 === void 0 ? void 0 : _field$key2.code : field[key];
        }
      });
      return unit;
    });
    if (isFloor) {
      var _units;
      units = (_units = units) === null || _units === void 0 ? void 0 : _units.filter(e => e.floorNo != currentFloor);
      unitsdata = [...units, ...unitsdata];
    }
    if (currentFloor === (formData === null || formData === void 0 ? void 0 : (_formData$noOfFloors = formData.noOfFloors) === null || _formData$noOfFloors === void 0 ? void 0 : _formData$noOfFloors.code) || !isFloor) {
      var _formData$noOofBaseme;
      if ((formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme = formData.noOofBasements) === null || _formData$noOofBaseme === void 0 ? void 0 : _formData$noOofBaseme.code) > 0) {
        onSelect(config.key, unitsdata, false, -1, true);
      } else {
        onSelect(config.key, unitsdata);
      }
    } else {
      var _formData$noOofBaseme2;
      if (currentFloor == -1 && (formData === null || formData === void 0 ? void 0 : (_formData$noOofBaseme2 = formData.noOofBasements) === null || _formData$noOofBaseme2 === void 0 ? void 0 : _formData$noOofBaseme2.code) == 2) {
        onSelect(config.key, unitsdata, false, -2, true);
      } else if (currentFloor < 0) {
        onSelect(config.key, unitsdata);
      } else {
        onSelect(config.key, unitsdata, false, currentFloor + 1, true);
      }
    }
  };
  const onSkip = () => onSelect();
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  function isAllowedNext() {
    let valueNotthere = 0;
    fields && (fields === null || fields === void 0 ? void 0 : fields.map(ob => {
      var _ob$usageCategory, _ob$occupancyType;
      if (!(ob !== null && ob !== void 0 && ob.usageCategory) || Object.keys(ob === null || ob === void 0 ? void 0 : ob.usageCategory) == 0 || !(ob !== null && ob !== void 0 && ob.occupancyType) || !(ob !== null && ob !== void 0 && ob.builtUpArea)) valueNotthere = 1;else if (!((ob === null || ob === void 0 ? void 0 : (_ob$usageCategory = ob.usageCategory) === null || _ob$usageCategory === void 0 ? void 0 : _ob$usageCategory.code) === "RESIDENTIAL") && !(ob !== null && ob !== void 0 && ob.unitType)) valueNotthere = 1;else if ((ob === null || ob === void 0 ? void 0 : (_ob$occupancyType = ob.occupancyType) === null || _ob$occupancyType === void 0 ? void 0 : _ob$occupancyType.code) === "RENTED" && !(ob !== null && ob !== void 0 && ob.arv)) valueNotthere = 1;
    }));
    if (valueNotthere == 0) return false;else return true;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: (config.texts.header = getheader(), config),
    onSelect: goNext,
    onSkip: onSkip,
    t: t,
    isDisabled: isAllowedNext()
  }, fields.map((field, index) => {
    var _field$usageCategory, _mdmsData$UsageSubCat, _field$occupancyType, _formData$PropertyTyp2;
    return /*#__PURE__*/React.createElement("div", {
      key: `${field}-${index}`
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        border: "solid",
        borderRadius: "5px",
        padding: "10px",
        paddingTop: "20px",
        marginTop: "10px",
        borderColor: "#f3f3f3",
        background: "#FAFAFA"
      }
    }, /*#__PURE__*/React.createElement(LinkButton, {
      label: /*#__PURE__*/React.createElement(DeleteIcon, {
        style: {
          float: "right",
          position: "relative"
        },
        fill: !(fields.length === 1) ? "#494848" : "#FAFAFA"
      }),
      style: {
        width: "100px",
        display: "inline"
      },
      onClick: e => handleRemove(index)
    }), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM2_USAGE_TYPE")}*`), /*#__PURE__*/React.createElement(Dropdown, {
      t: t,
      optionKey: "i18nKey",
      isMandatory: config.isMandatory,
      option: [...(mdmsData !== null && mdmsData !== void 0 && mdmsData.UsageCategory ? mdmsData === null || mdmsData === void 0 ? void 0 : mdmsData.UsageCategory : []), {
        code: "RESIDENTIAL",
        i18nKey: "PROPERTYTAX_BILLING_SLAB_RESIDENTIAL"
      }],
      selected: field === null || field === void 0 ? void 0 : field.usageCategory,
      select: e => selectUsageCategory(index, e)
    }), (field === null || field === void 0 ? void 0 : (_field$usageCategory = field.usageCategory) === null || _field$usageCategory === void 0 ? void 0 : _field$usageCategory.code) && field.usageCategory.code.includes("RESIDENTIAL") === false && /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM2_SUB_USAGE_TYPE")}*`), /*#__PURE__*/React.createElement("div", {
      className: "form-pt-dropdown-only"
    }, /*#__PURE__*/React.createElement(Dropdown, {
      t: t,
      optionKey: "i18nKey",
      isMandatory: config.isMandatory,
      option: mdmsData === null || mdmsData === void 0 ? void 0 : (_mdmsData$UsageSubCat = mdmsData.UsageSubCategory) === null || _mdmsData$UsageSubCat === void 0 ? void 0 : _mdmsData$UsageSubCat.filter(category => {
        var _field$usageCategory2;
        return category.usageCategoryMinor === (field === null || field === void 0 ? void 0 : (_field$usageCategory2 = field.usageCategory) === null || _field$usageCategory2 === void 0 ? void 0 : _field$usageCategory2.code);
      }),
      selected: field === null || field === void 0 ? void 0 : field.unitType,
      select: e => selectSubUsageCategory(index, e)
    }))), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM2_OCCUPANCY")}*`), /*#__PURE__*/React.createElement("div", {
      className: "form-pt-dropdown-only"
    }, /*#__PURE__*/React.createElement(Dropdown, {
      t: t,
      optionKey: "i18nKey",
      isMandatory: config.isMandatory,
      option: mdmsData === null || mdmsData === void 0 ? void 0 : mdmsData.OccupancyType,
      selected: field === null || field === void 0 ? void 0 : field.occupancyType,
      select: e => selectOccupancy(index, e)
    })), (field === null || field === void 0 ? void 0 : (_field$occupancyType = field.occupancyType) === null || _field$occupancyType === void 0 ? void 0 : _field$occupancyType.code) && field.occupancyType.code.includes("RENTED") && /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM2_TOTAL_ANNUAL_RENT")}*`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
      style: {
        background: "#FAFAFA"
      },
      t: t,
      type: "text",
      isMandatory: false,
      optionKey: "i18nKey",
      name: "arv",
      value: field === null || field === void 0 ? void 0 : field.arv,
      onChange: e => onChangeRent(index, e)
    }, {
      isRequired: true,
      pattern: "[0-9]+",
      type: "text",
      title: t("CORE_COMMON_REQUIRED_ERRMSG")
    }))), /*#__PURE__*/React.createElement(CardLabel, null, (formData === null || formData === void 0 ? void 0 : (_formData$PropertyTyp2 = formData.PropertyType) === null || _formData$PropertyTyp2 === void 0 ? void 0 : _formData$PropertyTyp2.i18nKey) === "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY" ? `${t("PT_FORM2_BUILT_UP_AREA")}*` : `${t("PT_BUILT_UP_AREA_HEADER")}*`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
      style: {
        background: "#FAFAFA"
      },
      t: t,
      type: "text",
      isMandatory: false,
      optionKey: "i18nKey",
      name: "builtUpArea",
      value: (field === null || field === void 0 ? void 0 : field.builtUpArea) || "",
      onChange: e => onChangeArea(index, e)
    }, {
      isRequired: true,
      pattern: "[0-9]+",
      type: "text",
      title: t("CORE_COMMON_REQUIRED_ERRMSG")
    })), !isFloor && /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_FORM2_SELECT_FLOOR")}*`), /*#__PURE__*/React.createElement("div", {
      className: "form-pt-dropdown-only"
    }, /*#__PURE__*/React.createElement(Dropdown, {
      t: t,
      optionKey: "i18nKey",
      isMandatory: config.isMandatory,
      option: mdmsData === null || mdmsData === void 0 ? void 0 : mdmsData.Floor,
      selected: field === null || field === void 0 ? void 0 : field.floorNo,
      select: e => selectFloor(index, e)
    })))));
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      justifyContent: "left",
      display: "flex",
      paddingBottom: "15px",
      color: "#FF8C00"
    }
  }, /*#__PURE__*/React.createElement("button", {
    type: "button",
    style: {
      paddingTop: "10px"
    },
    onClick: () => handleAdd()
  }, `${t("PT_ADD_UNIT")}`))));
});

const newConfig = [{
  "head": "ES_NEW_APPLICATION_LOCATION_DETAILS",
  "body": [{
    "route": "map",
    "component": "PTSelectGeolocation",
    "nextStep": "pincode",
    "hideInEmployee": true,
    "key": "address",
    "texts": {
      "header": "PT_GEOLOCATON_HEADER",
      "cardText": "PT_GEOLOCATION_TEXT",
      "nextText": "PT_COMMON_NEXT",
      "skipAndContinueText": "CORE_COMMON_SKIP_CONTINUE"
    }
  }, {
    "route": "pincode",
    "component": "PTSelectPincode",
    "texts": {
      "headerCaption": "PT_PROPERTY_LOCATION_CAPTION",
      "header": "PT_PINCODE_LABEL",
      "cardText": "PT_PINCODE_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT",
      "skipText": "CORE_COMMON_SKIP_CONTINUE"
    },
    "withoutLabel": true,
    "key": "address",
    "nextStep": "address",
    "type": "component"
  }, {
    "route": "address",
    "component": "PTSelectAddress",
    "withoutLabel": true,
    "texts": {
      "headerCaption": "PT_PROPERTY_LOCATION_CAPTION",
      "header": "CS_FILE_APPLICATION_PROPERTY_LOCATION_ADDRESS_TEXT",
      "cardText": "CS_FILE_APPLICATION_PROPERTY_LOCATION_CITY_MOHALLA_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "address",
    "nextStep": "street",
    "isMandatory": true,
    "type": "component"
  }, {
    "type": "component",
    "route": "street",
    "component": "PTSelectStreet",
    "key": "address",
    "withoutLabel": true,
    "texts": {
      "headerCaption": "PT_PROPERTY_LOCATION_CAPTION",
      "header": "CS_FILE_APPLICATION_PROPERTY_LOCATION_ADDRESS_TEXT",
      "cardText": "PT_STREET_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "nextStep": "landmark"
  }, {
    "type": "component",
    "route": "landmark",
    "component": "PTSelectLandmark",
    "withoutLabel": true,
    "texts": {
      "headerCaption": "PT_PROPERTY_LOCATION_CAPTION",
      "header": "CS_FILE_APPLICATION_PROPERTY_LOCATION_PROVIDE_LANDMARK_TITLE",
      "cardText": "CS_FILE_APPLICATION_PROPERTY_LOCATION_PROVIDE_LANDMARK_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT",
      "skipText": "CORE_COMMON_SKIP_CONTINUE"
    },
    "key": "address",
    "nextStep": "proof",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "proof",
    "component": "Proof",
    "withoutLabel": true,
    "texts": {
      "headerCaption": "PT_PROPERTY_LOCATION_CAPTION",
      "header": "PT_PROOF_OF_ADDRESS_HEADER",
      "cardText": "",
      "nextText": "PT_COMMONS_NEXT",
      "submitBarLabel": "PT_COMMONS_NEXT"
    },
    "key": "address",
    "nextStep": "owner-ship-details@0",
    "hideInEmployee": true
  }]
}, {
  "head": "ES_NEW_APPLICATION_PROPERTY_ASSESSMENT",
  "body": [{
    "route": "info",
    "component": "PropertyTax",
    "nextStep": "property-type",
    "hideInEmployee": true,
    "key": "Documents"
  }, {
    "type": "component",
    "route": "isResidential",
    "isMandatory": true,
    "component": "IsResidential",
    "texts": {
      "headerCaption": "",
      "header": "PT_PROPERTY_DETAILS_RESIDENTIAL_PROPERTY_HEADER",
      "cardText": "PT_PROPERTY_DETAILS_RESIDENTIAL_PROPERTY_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "isResdential",
    "withoutLabel": true,
    "hideInEmployee": true,
    "nextStep": {
      "PT_COMMON_YES": "property-type",
      "PT_COMMON_NO": "property-usage-type"
    }
  }, {
    "type": "component",
    "route": "property-usage-type",
    "isMandatory": true,
    "component": "PropertyUsageType",
    "texts": {
      "headerCaption": "PT_ASSESMENT_INFO_USAGE_TYPE",
      "header": "PT_PROPERTY_DETAILS_USAGE_TYPE_HEADER",
      "cardText": "PT_PROPERTY_DETAILS_USAGE_TYPE_TEXT",
      "submitBarLabel": "PT_COMMONS_NEXT"
    },
    "nextStep": "property-type",
    "key": "usageCategoryMajor",
    "withoutLabel": true
  }, {
    "type": "component",
    "isMandatory": true,
    "component": "ProvideSubUsageType",
    "key": "usageCategoryMinor",
    "withoutLabel": true
  }, {
    "type": "component",
    "route": "provide-sub-usage-type",
    "isMandatory": true,
    "component": "ProvideSubUsageType",
    "texts": {
      "headerCaption": "PT_ASSESMENT_INFO_USAGE_TYPE",
      "header": "PT_ASSESSMENT_FLOW_SUBUSAGE_HEADER",
      "cardText": "PT_ASSESSMENT_FLOW_SUBUSAGE_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": {
      "yes": "is-any-part-of-this-floor-unoccupied",
      "no": "provide-sub-usage-type-of-rented-area"
    },
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "property-type",
    "isMandatory": true,
    "component": "PropertyType",
    "texts": {
      "headerCaption": "",
      "header": "PT_ASSESMENT1_PROPERTY_TYPE",
      "cardText": "",
      "submitBarLabel": "PT_COMMONS_NEXT"
    },
    "nextStep": {
      "COMMON_PROPTYPE_BUILTUP_INDEPENDENTPROPERTY": "landarea",
      "COMMON_PROPTYPE_BUILTUP_SHAREDPROPERTY": "PtUnits",
      "COMMON_PROPTYPE_VACANT": "area"
    },
    "key": "PropertyType",
    "withoutLabel": true
  }, {
    "type": "component",
    "isMandatory": true,
    "component": "Area",
    "key": "landarea",
    "withoutLabel": true
  }, {
    "type": "component",
    "route": "PtUnits",
    "isMandatory": true,
    "component": "SelectPTUnits",
    "texts": {
      "headerCaption": "",
      "header": "PT_FLAT_DETAILS",
      "cardText": "PT_FLAT_DETAILS_DESC",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": "map",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "landarea",
    "isMandatory": true,
    "component": "PTLandArea",
    "texts": {
      "headerCaption": "",
      "header": "PT_PLOT_SIZE_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": "number-of-floors",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "area",
    "isMandatory": true,
    "component": "Area",
    "texts": {
      "headerCaption": "",
      "header": "PT_PLOT_SIZE_HEADER",
      "cardText": "PT_FORM2_PLOT_SIZE_PLACEHOLDER",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": "map",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "number-of-floors",
    "isMandatory": true,
    "component": "PropertyBasementDetails",
    "texts": {
      "headerCaption": "",
      "header": "PT_PROPERTY_DETAILS_NO_OF_BASEMENTS_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMONS_NEXT"
    },
    "nextStep": "number-of-basements@0",
    "key": "noOofBasements",
    "withoutLabel": true
  }, {
    "type": "component",
    "component": "Units",
    "key": "units",
    "withoutLabel": true
  }, {
    "type": "component",
    "route": "provide-floor-no",
    "isMandatory": true,
    "component": "ProvideFloorNo",
    "texts": {
      "headerCaption": "",
      "header": "PT_FLOOR_NUMBER_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMONS_NEXT"
    },
    "nextStep": "units",
    "key": "Floorno",
    "withoutLabel": true,
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "is-this-floor-self-occupied",
    "isMandatory": true,
    "component": "IsThisFloorSelfOccupied",
    "texts": {
      "headerCaption": "",
      "header": "PT_ASSESSMENT_FLOW_FLOOR_OCC_HEADER",
      "cardText": "PT_ASSESSMENT_FLOW_FLOOR_OCC_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": {
      "PT_YES_IT_IS_SELFOCCUPIED": "provide-sub-usage-type",
      "PT_YES_IT_IS_SELFOCCUPIED1": "is-any-part-of-this-floor-unoccupied",
      "PT_PARTIALLY_RENTED_OUT": "area",
      "PT_PARTIALLY_RENTED_OUT1": "area",
      "PT_FULLY_RENTED_OUT": "provide-sub-usage-type-of-rented-area",
      "PT_FULLY_RENTED_OUT1": "rental-details"
    },
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "number-of-basements@0",
    "isMandatory": true,
    "component": "PropertyFloorDetails",
    "texts": {
      "headerCaption": "",
      "header": "BPA_SCRUTINY_DETAILS_NUMBER_OF_FLOORS_LABEL",
      "cardText": "PT_PROPERTY_DETAILS_NO_OF_FLOORS_TEXT",
      "submitBarLabel": "PT_COMMONS_NEXT"
    },
    "nextStep": {
      "PT_NO_BASEMENT_OPTION": "units",
      "PT_ONE_BASEMENT_OPTION": "units",
      "PT_TWO_BASEMENT_OPTION": "units"
    },
    "key": "noOfFloors",
    "withoutLabel": true,
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "units",
    "isMandatory": true,
    "component": "SelectPTUnits",
    "texts": {
      "headerCaption": "",
      "header": "PT_FLAT_DETAILS",
      "cardText": "PT_FLAT_DETAILS_DESC",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "nextStep": "map",
    "key": "units",
    "withoutLabel": true,
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "rental-details",
    "isMandatory": true,
    "component": "RentalDetails",
    "texts": {
      "header": "PT_ASSESSMENT_FLOW_RENTAL_DETAIL_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": "is-any-part-of-this-floor-unoccupied",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "provide-sub-usage-type-of-rented-area",
    "isMandatory": true,
    "component": "ProvideSubUsageTypeOfRentedArea",
    "texts": {
      "headerCaption": "PT_ASSESMENT_INFO_USAGE_TYPE",
      "header": "PT_ASSESSMENT_FLOW_RENT_SUB_USAGE_HEADER",
      "cardText": "PT_ASSESSMENT_FLOW_SUBUSAGE_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": "rental-details",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "is-any-part-of-this-floor-unoccupied",
    "isMandatory": true,
    "component": "IsAnyPartOfThisFloorUnOccupied",
    "texts": {
      "header": "PT_ASSESSMENT_FLOW_ISUNOCCUPIED_HEADER",
      "cardText": "PT_ASSESSMENT_FLOW_ISUNOCCUPIED_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": {
      "PT_COMMON_NO": "map",
      "PT_COMMON_YES": "un-occupied-area"
    },
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "un-occupied-area",
    "isMandatory": true,
    "component": "UnOccupiedArea",
    "texts": {
      "header": "PT_ASSESSMENT_FLOW_UNOCCUPIED_AREA_HEADER",
      "cardText": "PT_ASSESSMENT_FLOW_UNOCCUPIED_AREA_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT",
      "skipText": ""
    },
    "key": "units",
    "withoutLabel": true,
    "nextStep": "map",
    "hideInEmployee": true
  }]
}, {
  "head": "ES_NEW_APPLICATION_OWNERSHIP_DETAILS",
  "body": [{
    "type": "component",
    "route": "owner-ship-details@0",
    "isMandatory": true,
    "component": "SelectOwnerShipDetails",
    "texts": {
      "headerCaption": "PT_PROPERTIES_OWNERSHIP",
      "header": "PT_PROVIDE_OWNERSHIP_DETAILS",
      "cardText": "PT_PROVIDE_OWNERSHI_DETAILS_SUB_TEXT",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "ownershipCategory",
    "withoutLabel": true,
    "nextStep": {
      "INSTITUTIONALPRIVATE": "inistitution-details",
      "INSTITUTIONALGOVERNMENT": "inistitution-details",
      "INDIVIDUAL.SINGLEOWNER": "owner-details",
      "INDIVIDUAL.MULTIPLEOWNERS": "owner-details"
    }
  }, {
    "isMandatory": true,
    "type": "component",
    "route": "owner-details",
    "key": "owners",
    "component": "SelectOwnerDetails",
    "texts": {
      "headerCaption": "",
      "header": "PT_OWNERSHIP_INFO_SUB_HEADER",
      "cardText": "PT_FORM3_HEADER_MESSAGE",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "withoutLabel": true,
    "nextStep": "special-owner-category",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "special-owner-category",
    "isMandatory": true,
    "component": "SelectSpecialOwnerCategoryType",
    "texts": {
      "headerCaption": "PT_OWNERS_DETAILS",
      "header": "PT_SPECIAL_OWNER_CATEGORY",
      "cardText": "PT_FORM3_HEADER_MESSAGE",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": "owner-address",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "owner-address",
    "isMandatory": true,
    "component": "SelectOwnerAddress",
    "texts": {
      "headerCaption": "PT_OWNERS_DETAILS",
      "header": "PT_OWNERS_ADDRESS",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": "special-owner-category-proof",
    "hideInEmployee": true
  }, {
    "type": "component",
    "component": "SelectAltContactNumber",
    "key": "owners",
    "withoutLabel": true,
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "special-owner-category-proof",
    "isMandatory": true,
    "component": "SelectSpecialProofIdentity",
    "texts": {
      "headerCaption": "PT_OWNERS_DETAILS",
      "header": "PT_SPECIAL_OWNER_CATEGORY_PROOF_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": "proof-of-identity",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "proof-of-identity",
    "isMandatory": true,
    "component": "SelectProofIdentity",
    "texts": {
      "headerCaption": "PT_DOCUMENT_DETAILS",
      "header": "PT_PROOF_IDENTITY_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT",
      "addMultipleText": "PT_COMMON_ADD_APPLICANT_LABEL"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": null,
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "inistitution-details",
    "isMandatory": true,
    "component": "SelectInistitutionOwnerDetails",
    "texts": {
      "headerCaption": "",
      "header": "PT_INSTITUTION_DETAILS_HEADER",
      "cardText": "PT_FORM3_HEADER_MESSAGE",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": "institutional-owner-address",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "institutional-owner-address",
    "isMandatory": true,
    "component": "SelectOwnerAddress",
    "texts": {
      "headerCaption": "PT_OWNERS_DETAILS",
      "header": "PT_OWNERS_ADDRESS",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": "institutional-proof-of-identity",
    "hideInEmployee": true
  }, {
    "type": "component",
    "route": "institutional-proof-of-identity",
    "isMandatory": true,
    "component": "SelectProofIdentity",
    "texts": {
      "headerCaption": "PT_OWNERS_DETAILS",
      "header": "PT_PROOF_IDENTITY_HEADER",
      "cardText": "",
      "submitBarLabel": "PT_COMMON_NEXT"
    },
    "key": "owners",
    "withoutLabel": true,
    "nextStep": null,
    "hideInEmployee": true
  }, {
    "type": "component",
    "component": "PTEmployeeOwnershipDetails",
    "key": "owners",
    "withoutLabel": true,
    "hideInCitizen": true
  }]
}, {
  "head": "ES_NEW_APPLICATION_DOCUMENTS_REQUIRED",
  "body": [{
    "component": "SelectDocuments",
    "withoutLabel": true,
    "key": "documents",
    "type": "component"
  }]
}];

const CreateProperty = ({
  parentRoute
}) => {
  var _Digit, _Digit$ComponentRegis, _Digit2, _Digit2$ComponentRegi;
  const queryClient = useQueryClient();
  const match = useRouteMatch();
  const {
    t
  } = useTranslation();
  const {
    pathname
  } = useLocation();
  const history = useHistory();
  const stateId = Digit.ULBService.getStateId();
  let config = [];
  const [params, setParams, clearParams] = Digit.Hooks.useSessionStorage("PT_CREATE_PROPERTY", {});
  let {
    data: commonFields,
    isLoading
  } = Digit.Hooks.pt.useMDMS(stateId, "PropertyTax", "CommonFieldsConfig");
  const goNext = (skipStep, index, isAddMultiple, key) => {
    let currentPath = pathname.split("/").pop(),
      lastchar = currentPath.charAt(currentPath.length - 1),
      isMultiple = false,
      nextPage;
    if (Number(parseInt(currentPath)) || currentPath == "0" || currentPath == "-1") {
      if (currentPath == "-1" || currentPath == "-2") {
        currentPath = pathname.slice(0, -3);
        currentPath = currentPath.split("/").pop();
        isMultiple = true;
      } else {
        currentPath = pathname.slice(0, -2);
        currentPath = currentPath.split("/").pop();
        isMultiple = true;
      }
    } else {
      isMultiple = false;
    }
    if (!isNaN(lastchar)) {
      isMultiple = true;
    }
    let {
      nextStep = {}
    } = config.find(routeObj => routeObj.route === currentPath);
    if (typeof nextStep == "object" && nextStep != null && isMultiple != false) {
      if (nextStep[sessionStorage.getItem("ownershipCategory")]) {
        nextStep = `${nextStep[sessionStorage.getItem("ownershipCategory")]}/${index}`;
      } else if (nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]) {
        if (`${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}` === "un-occupied-area") {
          nextStep = `${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}/${index}`;
        } else {
          nextStep = `${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}`;
        }
      } else if (nextStep[sessionStorage.getItem("subusagetypevar")]) {
        nextStep = `${nextStep[sessionStorage.getItem("subusagetypevar")]}/${index}`;
      } else if (nextStep[sessionStorage.getItem("area")]) {
        if (`${nextStep[sessionStorage.getItem("area")]}` !== "map") {
          nextStep = `${nextStep[sessionStorage.getItem("area")]}/${index}`;
        } else {
          nextStep = `${nextStep[sessionStorage.getItem("area")]}`;
        }
      } else if (nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]) {
        nextStep = `${nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]}/${index}`;
      } else {
        nextStep = `${nextStep[sessionStorage.getItem("noOofBasements")]}/${index}`;
      }
    }
    if (typeof nextStep == "object" && nextStep != null && isMultiple == false) {
      if (nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")] && (nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")] == "map" || nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")] == "un-occupied-area")) {
        nextStep = `${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}`;
      } else if (nextStep[sessionStorage.getItem("subusagetypevar")]) {
        nextStep = `${nextStep[sessionStorage.getItem("subusagetypevar")]}`;
      } else if (nextStep[sessionStorage.getItem("area")]) {
        nextStep = `${nextStep[sessionStorage.getItem("area")]}`;
      } else if (nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]) {
        nextStep = `${nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]}`;
      } else if (nextStep[sessionStorage.getItem("PropertyType")]) {
        nextStep = `${nextStep[sessionStorage.getItem("PropertyType")]}`;
      } else if (nextStep[sessionStorage.getItem("isResdential")]) {
        nextStep = `${nextStep[sessionStorage.getItem("isResdential")]}`;
      }
    }
    let redirectWithHistory = history.push;
    if (skipStep) {
      redirectWithHistory = history.replace;
    }
    if (isAddMultiple) {
      nextStep = key;
    }
    if (nextStep === null) {
      return redirectWithHistory(`${match.path}/check`);
    }
    if (!isNaN(nextStep.split("/").pop())) {
      nextPage = `${match.path}/${nextStep}`;
    } else {
      nextPage = isMultiple && nextStep !== "map" ? `${match.path}/${nextStep}/${index}` : `${match.path}/${nextStep}`;
    }
    redirectWithHistory(nextPage);
  };
  if (params && Object.keys(params).length > 0 && window.location.href.includes("/info") && sessionStorage.getItem("docReqScreenByBack") !== "true") {
    clearParams();
    queryClient.invalidateQueries("PT_CREATE_PROPERTY");
  }
  const createProperty = async () => {
    history.push(`${match.path}/acknowledgement`);
  };
  function handleSelect(key, data, skipStep, index, isAddMultiple = false) {
    if (key === "owners") {
      let owners = params.owners || [];
      owners[index] = data;
      setParams({
        ...params,
        ...{
          [key]: [...owners]
        }
      });
    } else if (key === "units") {
      let units = params.units || [];
      units = data;
      setParams({
        ...params,
        units
      });
    } else {
      setParams({
        ...params,
        ...{
          [key]: {
            ...params[key],
            ...data
          }
        }
      });
    }
    goNext(skipStep, index, isAddMultiple, key);
  }
  const handleSkip = () => {};
  const handleMultiple = () => {};
  const onSuccess = () => {
    clearParams();
    queryClient.invalidateQueries("PT_CREATE_PROPERTY");
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  commonFields = newConfig;
  commonFields.forEach(obj => {
    config = config.concat(obj.body.filter(a => !a.hideInCitizen));
  });
  config.indexRoute = "info";
  const CheckPage = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("PTCheckPage");
  const PTAcknowledgement = (_Digit2 = Digit) === null || _Digit2 === void 0 ? void 0 : (_Digit2$ComponentRegi = _Digit2.ComponentRegistryService) === null || _Digit2$ComponentRegi === void 0 ? void 0 : _Digit2$ComponentRegi.getComponent("PTAcknowledgement");
  return /*#__PURE__*/React.createElement(Switch, null, config.map((routeObj, index) => {
    const {
      component,
      texts,
      inputs,
      key
    } = routeObj;
    const Component = typeof component === "string" ? Digit.ComponentRegistryService.getComponent(component) : component;
    return /*#__PURE__*/React.createElement(Route, {
      path: `${match.path}/${routeObj.route}`,
      key: index
    }, /*#__PURE__*/React.createElement(Component, {
      config: {
        texts,
        inputs,
        key
      },
      onSelect: handleSelect,
      onSkip: handleSkip,
      t: t,
      formData: params,
      onAdd: handleMultiple
    }));
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${match.path}/check`
  }, /*#__PURE__*/React.createElement(CheckPage, {
    onSubmit: createProperty,
    value: params
  })), /*#__PURE__*/React.createElement(Route, {
    path: `${match.path}/acknowledgement`
  }, /*#__PURE__*/React.createElement(PTAcknowledgement, {
    data: params,
    onSuccess: onSuccess
  })), /*#__PURE__*/React.createElement(Route, null, /*#__PURE__*/React.createElement(Redirect, {
    to: `${match.path}/${config.indexRoute}`
  })));
};

const PTApplication = ({
  application,
  tenantId,
  buttonLabel
}) => {
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_APPLICATION_NO_LABEL"),
    note: application === null || application === void 0 ? void 0 : application.acknowldgementNumber
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_APPLICATION_CATEGORY"),
    note: t("PROPERTY_TAX")
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_SEARCHPROPERTY_TABEL_PTUID"),
    note: application === null || application === void 0 ? void 0 : application.propertyId
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_COMMON_TABLE_COL_APP_TYPE"),
    note: (application === null || application === void 0 ? void 0 : application.creationReason) && t(`PT.${application.creationReason}`) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_COMMON_TABLE_COL_STATUS_LABEL"),
    note: t(`PT_COMMON_${application === null || application === void 0 ? void 0 : application.status}`)
  }), /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen/pt/property/application/${application === null || application === void 0 ? void 0 : application.acknowldgementNumber}/${application === null || application === void 0 ? void 0 : application.tenantId}`
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: buttonLabel
  })));
};

const PTMyApplications = () => {
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCitizenCurrentTenant(true) || Digit.ULBService.getCurrentTenantId();
  const user = Digit.UserService.getUser().info;
  let filter = window.location.href.split("/").pop();
  let t1;
  let off;
  if (!isNaN(parseInt(filter))) {
    off = filter;
    t1 = parseInt(filter) + 50;
  } else {
    t1 = 4;
  }
  let filter1 = !isNaN(parseInt(filter)) ? {
    limit: "50",
    sortOrder: "ASC",
    sortBy: "createdTime",
    offset: off,
    tenantId
  } : {
    limit: "4",
    sortOrder: "ASC",
    sortBy: "createdTime",
    offset: "0",
    mobileNumber: user === null || user === void 0 ? void 0 : user.mobileNumber,
    tenantId
  };
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearch({
    filters: filter1
  }, {
    filters: filter1
  });
  const {
    Properties: applicationsList
  } = data || {};
  let combinedApplicationNumber = (applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.length) > 0 ? applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.map(ob => ob === null || ob === void 0 ? void 0 : ob.acknowldgementNumber) : [];
  let serviceSearchArgs = {
    tenantId: tenantId,
    referenceIds: combinedApplicationNumber
  };
  const {
    isLoading: serviceloading,
    data: servicedata
  } = Digit.Hooks.useFeedBackSearch({
    filters: {
      serviceSearchArgs
    }
  }, {
    filters: {
      serviceSearchArgs
    },
    enabled: (combinedApplicationNumber === null || combinedApplicationNumber === void 0 ? void 0 : combinedApplicationNumber.length) > 0 ? true : false,
    cacheTime: 0
  });
  function getLabelValue(curservice) {
    var _servicedata$Service, _curservice$status;
    let foundValue = servicedata === null || servicedata === void 0 ? void 0 : (_servicedata$Service = servicedata.Service) === null || _servicedata$Service === void 0 ? void 0 : _servicedata$Service.find(ob => {
      var _ob$referenceId;
      return ob === null || ob === void 0 ? void 0 : (_ob$referenceId = ob.referenceId) === null || _ob$referenceId === void 0 ? void 0 : _ob$referenceId.includes(curservice === null || curservice === void 0 ? void 0 : curservice.acknowldgementNumber);
    });
    if (foundValue) return t("CS_CF_VIEW");else if (!foundValue && curservice !== null && curservice !== void 0 && (_curservice$status = curservice.status) !== null && _curservice$status !== void 0 && _curservice$status.includes("ACTIVE")) return t("CS_CF_RATE_US");else return t("CS_CF_TRACK");
  }
  if (isLoading || serviceloading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, `${t("CS_TITLE_MY_APPLICATIONS")} ${applicationsList ? `(${applicationsList.length})` : ""}`), /*#__PURE__*/React.createElement("div", null, (applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.length) > 0 && applicationsList.map((application, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(PTApplication, {
    application: application,
    tenantId: user === null || user === void 0 ? void 0 : user.permanentCity,
    buttonLabel: getLabelValue(application)
  }))), !(applicationsList !== null && applicationsList !== void 0 && applicationsList.length) > 0 && /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_NO_APPLICATION_FOUND_MSG")), (applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.length) !== 0 && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, /*#__PURE__*/React.createElement("span", {
    className: "link"
  }, /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen/pt/property/my-applications/${t1}`
  }, t("PT_LOAD_MORE_MSG")))))), /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_TEXT_NOT_ABLE_TO_FIND_THE_APPLICATION"), " ", /*#__PURE__*/React.createElement("span", {
    className: "link",
    style: {
      display: "block"
    }
  }, /*#__PURE__*/React.createElement(Link, {
    to: "/digit-ui/citizen/pt/property/new-application/info"
  }, t("PT_COMMON_CLICK_HERE_TO_REGISTER_NEW_PROPERTY")))));
};

const MyProperty = ({
  application
}) => {
  const {
    t
  } = useTranslation();
  const address = application === null || application === void 0 ? void 0 : application.address;
  const owners = application === null || application === void 0 ? void 0 : application.owners;
  return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_COMMON_TABLE_COL_PT_ID"),
    note: application.propertyId
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_COMMON_TABLE_COL_OWNER_NAME"),
    note: owners.map((owners, index) => /*#__PURE__*/React.createElement("div", {
      key: "index"
    }, index == owners.length - 1 ? (owners === null || owners === void 0 ? void 0 : owners.name) + "," : owners.name))
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_COMMON_COL_ADDRESS"),
    note: `${t(address === null || address === void 0 ? void 0 : address.locality.name)}, ${t(address === null || address === void 0 ? void 0 : address.city)},${t(address === null || address === void 0 ? void 0 : address.pincode) ? `${address.pincode}` : " "}` || "CS_APPLICATION_TYPE_PT"
  }), /*#__PURE__*/React.createElement(KeyNote, {
    keyValue: t("PT_COMMON_TABLE_COL_STATUS_LABEL"),
    note: t("PT_COMMON_" + application.status)
  }), /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen/pt/property/properties/${application.propertyId}`
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_VIEW_DETAILS")
  })));
};

const MyProperties = () => {
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCitizenCurrentTenant(true) || Digit.ULBService.getCurrentTenantId();
  const user = Digit.UserService.getUser().userInfo;
  let filter = window.location.href.split("/").pop();
  let t1;
  let off;
  if (!isNaN(parseInt(filter))) {
    off = filter;
    t1 = parseInt(filter) + 50;
  } else {
    t1 = 4;
  }
  let filter1 = !isNaN(parseInt(filter)) ? {
    limit: "50",
    sortOrder: "ASC",
    sortBy: "createdTime",
    offset: off,
    tenantId
  } : {
    limit: "4",
    sortOrder: "ASC",
    sortBy: "createdTime",
    offset: "0",
    mobileNumber: user === null || user === void 0 ? void 0 : user.mobileNumber,
    tenantId
  };
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearchNew({
    filters: filter1,
    searchedFrom: "myPropertyCitizen"
  }, {
    filters: filter1
  });
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const {
    Properties: applicationsList
  } = data || {};
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, `${t("PT_MY_PROPERTIES_HEADER")} ${applicationsList ? `(${applicationsList.length})` : ""}`), /*#__PURE__*/React.createElement("div", null, (applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.length) > 0 && applicationsList.map((application, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(MyProperty, {
    application: application
  }))), !(applicationsList !== null && applicationsList !== void 0 && applicationsList.length) > 0 && /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_NO_PROP_FOUND_MSG")), (applicationsList === null || applicationsList === void 0 ? void 0 : applicationsList.length) !== 0 && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, /*#__PURE__*/React.createElement("span", {
    className: "link"
  }, /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen/pt/property/my-properties/${t1}`
  }, t("PT_LOAD_MORE_MSG")))))), /*#__PURE__*/React.createElement("p", {
    style: {
      marginLeft: "16px",
      marginTop: "16px"
    }
  }, t("PT_TEXT_NOT_ABLE_TO_FIND_THE_APPLICATION"), " ", /*#__PURE__*/React.createElement("span", {
    className: "link",
    style: {
      display: "block"
    }
  }, /*#__PURE__*/React.createElement(Link, {
    to: "/digit-ui/citizen/pt/property/new-application/info"
  }, t("PT_COMMON_CLICK_HERE_TO_REGISTER_NEW_PROPERTY")))));
};

const PDFSvg = ({
  width: _width = 20,
  height: _height = 20,
  style
}) => /*#__PURE__*/React.createElement("svg", {
  style: style,
  xmlns: "http://www.w3.org/2000/svg",
  width: _width,
  height: _height,
  viewBox: "0 0 20 20",
  fill: "gray"
}, /*#__PURE__*/React.createElement("path", {
  d: "M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5v1zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5v3zm4-3H19v1h1.5V11H19v2h-1.5V7h3v1.5zM9 9.5h1v-1H9v1zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm10 5.5h1v-3h-1v3z"
}));
function PropertyDocument({
  property = {}
}) {
  const {
    t
  } = useTranslation();
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertyDocumentSearch({
    property
  });
  const documents = (property === null || property === void 0 ? void 0 : property.documents) || [];
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "19px"
    }
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      flexWrap: "wrap"
    }
  }, documents === null || documents === void 0 ? void 0 : documents.map((document, index) => {
    let documentLink = pdfDownloadLink(data.pdfFiles, document === null || document === void 0 ? void 0 : document.fileStoreId);
    return /*#__PURE__*/React.createElement("a", {
      target: "_",
      href: documentLink,
      style: {
        minWidth: "160px"
      },
      key: index
    }, /*#__PURE__*/React.createElement(PDFSvg, {
      width: 85,
      height: 100,
      style: {
        background: "#f6f6f6",
        padding: "8px"
      }
    }), /*#__PURE__*/React.createElement("p", {
      style: {
        marginTop: "8px"
      }
    }, t(`PT_${document === null || document === void 0 ? void 0 : document.documentType.replace(".", "_")}`)));
  }))));
}

const PTCitizenFeedbackPopUp = ({
  setpopup,
  setShowToast,
  data
}) => {
  var _Digit, _Digit$ComponentRegis;
  const CitizenFeedback = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("CitizenFeedback");
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PopUp, null, /*#__PURE__*/React.createElement("div", {
    style: {
      margin: "0 auto",
      top: "15%",
      position: "relative"
    }
  }, /*#__PURE__*/React.createElement(CitizenFeedback, {
    popup: true,
    onClose: setpopup,
    setShowToast: setShowToast,
    data: data
  }))));
};

var isArray = Array.isArray;
var isArray_1 = isArray;

var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal;

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
var root = _freeGlobal || freeSelf || Function('return this')();
var _root = root;

var Symbol$1 = _root.Symbol;
var _Symbol = Symbol$1;

var objectProto = Object.prototype;
var hasOwnProperty$1 = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
    tag = value[symToStringTag];
  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var _getRawTag = getRawTag;

var objectProto$1 = Object.prototype;
var nativeObjectToString$1 = objectProto$1.toString;
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}
var _objectToString = objectToString;

var nullTag = '[object Null]',
  undefinedTag = '[object Undefined]';
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
}
var _baseGetTag = baseGetTag;

function isObjectLike(value) {
  return value != null && typeof value == 'object';
}
var isObjectLike_1 = isObjectLike;

var symbolTag = '[object Symbol]';
function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
}
var isSymbol_1 = isSymbol;

var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
  reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol_1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var _isKey = isKey;

function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}
var isObject_1 = isObject;

var asyncTag = '[object AsyncFunction]',
  funcTag = '[object Function]',
  genTag = '[object GeneratorFunction]',
  proxyTag = '[object Proxy]';
function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  }
  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction;

var coreJsData = _root['__core-js_shared__'];
var _coreJsData = coreJsData;

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked;

var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}
var _toSource = toSource;

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto$1 = Function.prototype,
  objectProto$2 = Object.prototype;
var funcToString$1 = funcProto$1.toString;
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }
  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}
var _baseIsNative = baseIsNative;

function getValue(object, key) {
  return object == null ? undefined : object[key];
}
var _getValue = getValue;

function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}
var _getNative = getNative;

var nativeCreate = _getNative(Object, 'create');
var _nativeCreate = nativeCreate;

function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}
var _hashClear = hashClear;

function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var _hashDelete = hashDelete;

var HASH_UNDEFINED = '__lodash_hash_undefined__';
var objectProto$3 = Object.prototype;
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
}
var _hashGet = hashGet;

var objectProto$4 = Object.prototype;
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? data[key] !== undefined : hasOwnProperty$4.call(data, key);
}
var _hashHas = hashHas;

var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = _nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
  return this;
}
var _hashSet = hashSet;

function Hash(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;
var _Hash = Hash;

function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear;

function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_1 = eq;

function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf;

var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__,
    index = _assocIndexOf(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete;

function listCacheGet(key) {
  var data = this.__data__,
    index = _assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}
var _listCacheGet = listCacheGet;

function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}
var _listCacheHas = listCacheHas;

function listCacheSet(key, value) {
  var data = this.__data__,
    index = _assocIndexOf(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var _listCacheSet = listCacheSet;

function ListCache(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;
var _ListCache = ListCache;

var Map = _getNative(_root, 'Map');
var _Map = Map;

function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash(),
    'map': new (_Map || _ListCache)(),
    'string': new _Hash()
  };
}
var _mapCacheClear = mapCacheClear;

function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
var _isKeyable = isKeyable;

function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
var _getMapData = getMapData;

function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}
var _mapCacheDelete = mapCacheDelete;

function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}
var _mapCacheGet = mapCacheGet;

function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}
var _mapCacheHas = mapCacheHas;

function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
    size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet;

function MapCache(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;
var _MapCache = MapCache;

var FUNC_ERROR_TEXT = 'Expected a function';
function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function () {
    var args = arguments,
      key = resolver ? resolver.apply(this, args) : args[0],
      cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache)();
  return memoized;
}
memoize.Cache = _MapCache;
var memoize_1 = memoize;

var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_1(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var _memoizeCapped = memoizeCapped;

var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = _memoizeCapped(function (string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
var _stringToPath = stringToPath;

function arrayMap(array, iteratee) {
  var index = -1,
    length = array == null ? 0 : array.length,
    result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var _arrayMap = arrayMap;

var INFINITY = 1 / 0;
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
  symbolToString = symbolProto ? symbolProto.toString : undefined;
function baseToString(value) {
  if (typeof value == 'string') {
    return value;
  }
  if (isArray_1(value)) {
    return _arrayMap(value, baseToString) + '';
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
var _baseToString = baseToString;

function toString(value) {
  return value == null ? '' : _baseToString(value);
}
var toString_1 = toString;

function castPath(value, object) {
  if (isArray_1(value)) {
    return value;
  }
  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
}
var _castPath = castPath;

var INFINITY$1 = 1 / 0;
function toKey(value) {
  if (typeof value == 'string' || isSymbol_1(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
}
var _toKey = toKey;

function baseGet(object, path) {
  path = _castPath(path, object);
  var index = 0,
    length = path.length;
  while (object != null && index < length) {
    object = object[_toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}
var _baseGet = baseGet;

function get(object, path, defaultValue) {
  var result = object == null ? undefined : _baseGet(object, path);
  return result === undefined ? defaultValue : result;
}
var get_1 = get;

const PTApplicationDetails = () => {
  var _data$Properties, _data$Properties$, _data$Properties2, _data$Properties2$, _data$Properties3, _data$Properties3$, _get, _property$ownershipCa2, _units$, _property$additionalD, _data$Properties6, _data$Properties6$, _data$Properties7, _data$Properties7$, _data$Properties8, _data$Properties8$, _property$address, _property$address2, _property$address3, _property$address3$lo, _property$address4, _property$address5, _property$address6, _property$additionalD3, _property$additionalD4, _property$additionalD5, _property$additionalD6, _property$additionalD7, _property$additionalD8, _property$additionalD9, _property$usageCatego, _property$usageCatego2;
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const {
    acknowledgementIds,
    tenantId
  } = useParams();
  const [acknowldgementData, setAcknowldgementData] = useState([]);
  const [showOptions, setShowOptions] = useState(false);
  const [popup, setpopup] = useState(false);
  const [showToast, setShowToast] = useState(null);
  const {
    data: storeData
  } = Digit.Hooks.useStore.getInitData();
  const {
    tenants
  } = storeData || {};
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearch({
    filters: {
      acknowledgementIds,
      tenantId
    }
  }, {
    filters: {
      acknowledgementIds,
      tenantId
    }
  });
  const [billAmount, setBillAmount] = useState(null);
  const [billStatus, setBillStatus] = useState(null);
  let serviceSearchArgs = {
    tenantId: tenantId,
    code: [`PT_${data === null || data === void 0 ? void 0 : (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : (_data$Properties$ = _data$Properties[0]) === null || _data$Properties$ === void 0 ? void 0 : _data$Properties$.creationReason}`],
    module: ["PT"],
    referenceIds: [data === null || data === void 0 ? void 0 : (_data$Properties2 = data.Properties) === null || _data$Properties2 === void 0 ? void 0 : (_data$Properties2$ = _data$Properties2[0]) === null || _data$Properties2$ === void 0 ? void 0 : _data$Properties2$.acknowldgementNumber]
  };
  const {
    isLoading: serviceloading,
    error: serviceerror,
    data: servicedata
  } = Digit.Hooks.pt.useServiceSearchCF({
    filters: {
      serviceSearchArgs
    }
  }, {
    filters: {
      serviceSearchArgs
    },
    enabled: data !== null && data !== void 0 && (_data$Properties3 = data.Properties) !== null && _data$Properties3 !== void 0 && (_data$Properties3$ = _data$Properties3[0]) !== null && _data$Properties3$ !== void 0 && _data$Properties3$.acknowldgementNumber ? true : false,
    cacheTime: 0
  });
  const properties = get_1(data, "Properties", []);
  const propertyId = get_1(data, "Properties[0].propertyId", []);
  let property = properties && properties.length > 0 && properties[0] || {};
  const application = property;
  sessionStorage.setItem("pt-property", JSON.stringify(application));
  useMemo(() => {
    var _data$Properties4, _data$Properties4$, _servicedata$Service;
    if ((data === null || data === void 0 ? void 0 : (_data$Properties4 = data.Properties) === null || _data$Properties4 === void 0 ? void 0 : (_data$Properties4$ = _data$Properties4[0]) === null || _data$Properties4$ === void 0 ? void 0 : _data$Properties4$.status) === "ACTIVE" && popup == false && (servicedata === null || servicedata === void 0 ? void 0 : (_servicedata$Service = servicedata.Service) === null || _servicedata$Service === void 0 ? void 0 : _servicedata$Service.length) == 0) setpopup(true);
  }, [data, servicedata]);
  useEffect(async () => {
    if (acknowledgementIds && tenantId && property) {
      const res = await Digit.PaymentService.searchBill(tenantId, {
        Service: "PT.MUTATION",
        consumerCode: acknowledgementIds
      });
      if (!res.Bill.length) {
        var _res1$acknowledgement;
        const res1 = await Digit.PTService.ptCalculateMutation({
          Property: property
        }, tenantId);
        setBillAmount((res1 === null || res1 === void 0 ? void 0 : (_res1$acknowledgement = res1[acknowledgementIds]) === null || _res1$acknowledgement === void 0 ? void 0 : _res1$acknowledgement.totalAmount) || t("CS_NA"));
        setBillStatus(t(`PT_MUT_BILL_ACTIVE`));
      } else {
        var _res$Bill$, _res$Bill$2, _res$Bill$2$status;
        setBillAmount((res === null || res === void 0 ? void 0 : (_res$Bill$ = res.Bill[0]) === null || _res$Bill$ === void 0 ? void 0 : _res$Bill$.totalAmount) || t("CS_NA"));
        setBillStatus(t(`PT_MUT_BILL_${res === null || res === void 0 ? void 0 : (_res$Bill$2 = res.Bill[0]) === null || _res$Bill$2 === void 0 ? void 0 : (_res$Bill$2$status = _res$Bill$2.status) === null || _res$Bill$2$status === void 0 ? void 0 : _res$Bill$2$status.toUpperCase()}`));
      }
    }
  }, [tenantId, acknowledgementIds, property]);
  const {
    isLoading: auditDataLoading,
    isError: isAuditError,
    data: auditResponse
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds: propertyId,
      audit: true
    }
  }, {
    enabled: true
  });
  const {
    data: reciept_data,
    isLoading: recieptDataLoading
  } = Digit.Hooks.useRecieptSearch({
    tenantId: tenantId,
    businessService: "PT.MUTATION",
    consumerCodes: acknowledgementIds,
    isEmployee: false
  }, {
    enabled: acknowledgementIds ? true : false
  });
  if (!property.workflow) {
    let workflow = {
      id: null,
      tenantId: tenantId,
      businessService: "PT.MUTATION",
      businessId: application === null || application === void 0 ? void 0 : application.acknowldgementNumber,
      action: "",
      moduleName: "PT",
      state: null,
      comment: null,
      documents: null,
      assignes: null
    };
    property.workflow = workflow;
  }
  if (property && property.owners && property.owners.length > 0) {
    let ownersTemp = [];
    let _owners = [];
    property.owners.map(owner => {
      owner.documentUid = owner.documents ? owner.documents[0].documentUid : "NA";
      owner.documentType = owner.documents ? owner.documents[0].documentType : "NA";
      if (owner.status == "ACTIVE") {
        ownersTemp.push(owner);
      } else {
        _owners.push(owner);
      }
    });
    property.ownersInit = _owners;
    property.ownersTemp = ownersTemp;
  }
  property.ownershipCategoryTemp = property === null || property === void 0 ? void 0 : property.ownershipCategory;
  property.ownershipCategoryInit = "NA";
  if ((_get = get_1(application, "Properties[0].ownershipCategory", "")) !== null && _get !== void 0 && _get.startsWith("INSTITUTION")) {
    property.institutionTemp = property.institution;
  }
  if (auditResponse && Array.isArray(get_1(auditResponse, "Properties", [])) && get_1(auditResponse, "Properties", []).length > 0) {
    var _previousActiveProper, _property$ownershipCa;
    const propertiesAudit = get_1(auditResponse, "Properties", []);
    const propertyIndex = property.status == "ACTIVE" ? 1 : 0;
    const previousActiveProperty = propertiesAudit.filter(property => property.status == "ACTIVE").sort((x, y) => y.auditDetails.lastModifiedTime - x.auditDetails.lastModifiedTime)[propertyIndex];
    property.ownershipCategoryInit = previousActiveProperty === null || previousActiveProperty === void 0 ? void 0 : previousActiveProperty.ownershipCategory;
    property.ownersInit = previousActiveProperty === null || previousActiveProperty === void 0 ? void 0 : (_previousActiveProper = previousActiveProperty.owners) === null || _previousActiveProper === void 0 ? void 0 : _previousActiveProper.filter(owner => owner.status == "ACTIVE");
    const curWFProperty = propertiesAudit.sort((x, y) => y.auditDetails.lastModifiedTime - x.auditDetails.lastModifiedTime)[0];
    property.ownersTemp = curWFProperty.owners.filter(owner => owner.status == "ACTIVE");
    if (property !== null && property !== void 0 && (_property$ownershipCa = property.ownershipCategoryInit) !== null && _property$ownershipCa !== void 0 && _property$ownershipCa.startsWith("INSTITUTION")) {
      property.institutionInit = previousActiveProperty.institution;
    }
  }
  let transfereeOwners = get_1(property, "ownersTemp", []);
  let transferorOwners = get_1(property, "ownersInit", []);
  let transfereeInstitution = get_1(property, "institutionTemp", []);
  let isInstitution = property === null || property === void 0 ? void 0 : (_property$ownershipCa2 = property.ownershipCategoryInit) === null || _property$ownershipCa2 === void 0 ? void 0 : _property$ownershipCa2.startsWith("INSTITUTION");
  let transferorInstitution = get_1(property, "institutionInit", []);
  let units = [];
  units = application === null || application === void 0 ? void 0 : application.units;
  units && units.sort((x, y) => {
    let a = x.floorNo,
      b = y.floorNo;
    if (x.floorNo < 0) {
      a = x.floorNo * -20;
    }
    if (y.floorNo < 0) {
      b = y.floorNo * -20;
    }
    if (a > b) {
      return 1;
    } else {
      return -1;
    }
  });
  let owners = [];
  owners = application === null || application === void 0 ? void 0 : application.owners;
  let docs = [];
  docs = application === null || application === void 0 ? void 0 : application.documents;
  if (isLoading || auditDataLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  let flrno,
    i = 0;
  flrno = units && ((_units$ = units[0]) === null || _units$ === void 0 ? void 0 : _units$.floorNo);
  const isPropertyTransfer = property !== null && property !== void 0 && property.creationReason && property.creationReason === "MUTATION" ? true : false;
  const getAcknowledgementData = async () => {
    const applications = application || {};
    const tenantInfo = tenants.find(tenant => tenant.code === applications.tenantId);
    const acknowldgementDataAPI = await getPTAcknowledgementData({
      ...applications
    }, tenantInfo, t);
    Digit.Utils.pdf.generate(acknowldgementDataAPI);
  };
  let documentDate = t("CS_NA");
  if (property !== null && property !== void 0 && (_property$additionalD = property.additionalDetails) !== null && _property$additionalD !== void 0 && _property$additionalD.documentDate) {
    var _property$additionalD2;
    const date = new Date(property === null || property === void 0 ? void 0 : (_property$additionalD2 = property.additionalDetails) === null || _property$additionalD2 === void 0 ? void 0 : _property$additionalD2.documentDate);
    const month = Digit.Utils.date.monthNames[date.getMonth()];
    documentDate = `${date.getDate()} ${month} ${date.getFullYear()}`;
  }
  async function getRecieptSearch({
    tenantId,
    payments,
    ...params
  }) {
    var _response;
    let response = {
      filestoreIds: [payments === null || payments === void 0 ? void 0 : payments.fileStoreId]
    };
    response = await Digit.PaymentService.generatePdf(tenantId, {
      Payments: [{
        ...payments
      }]
    }, "consolidatedreceipt");
    const fileStore = await Digit.PaymentService.printReciept(tenantId, {
      fileStoreIds: response.filestoreIds[0]
    });
    window.open(fileStore[(_response = response) === null || _response === void 0 ? void 0 : _response.filestoreIds[0]], "_blank");
  }
  const printCertificate = async () => {
    var _data$Properties5;
    let response = await Digit.PaymentService.generatePdf(tenantId, {
      Properties: [data === null || data === void 0 ? void 0 : (_data$Properties5 = data.Properties) === null || _data$Properties5 === void 0 ? void 0 : _data$Properties5[0]]
    }, "ptmutationcertificate");
    const fileStore = await Digit.PaymentService.printReciept(tenantId, {
      fileStoreIds: response.filestoreIds[0]
    });
    window.open(fileStore[response === null || response === void 0 ? void 0 : response.filestoreIds[0]], "_blank");
  };
  let dowloadOptions = [];
  dowloadOptions.push({
    label: (data === null || data === void 0 ? void 0 : (_data$Properties6 = data.Properties) === null || _data$Properties6 === void 0 ? void 0 : (_data$Properties6$ = _data$Properties6[0]) === null || _data$Properties6$ === void 0 ? void 0 : _data$Properties6$.creationReason) === "MUTATION" ? t("MT_APPLICATION") : t("PT_APPLICATION_ACKNOWLEDGMENT"),
    onClick: () => getAcknowledgementData()
  });
  if (reciept_data && (reciept_data === null || reciept_data === void 0 ? void 0 : reciept_data.Payments.length) > 0 && recieptDataLoading == false) dowloadOptions.push({
    label: t("MT_FEE_RECIEPT"),
    onClick: () => {
      var _reciept_data$Payment;
      return getRecieptSearch({
        tenantId: reciept_data === null || reciept_data === void 0 ? void 0 : (_reciept_data$Payment = reciept_data.Payments[0]) === null || _reciept_data$Payment === void 0 ? void 0 : _reciept_data$Payment.tenantId,
        payments: reciept_data === null || reciept_data === void 0 ? void 0 : reciept_data.Payments[0]
      });
    }
  });
  if ((data === null || data === void 0 ? void 0 : (_data$Properties7 = data.Properties) === null || _data$Properties7 === void 0 ? void 0 : (_data$Properties7$ = _data$Properties7[0]) === null || _data$Properties7$ === void 0 ? void 0 : _data$Properties7$.creationReason) === "MUTATION" && (data === null || data === void 0 ? void 0 : (_data$Properties8 = data.Properties) === null || _data$Properties8 === void 0 ? void 0 : (_data$Properties8$ = _data$Properties8[0]) === null || _data$Properties8$ === void 0 ? void 0 : _data$Properties8$.status) === "ACTIVE") dowloadOptions.push({
    label: t("MT_CERTIFICATE"),
    onClick: () => printCertificate()
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "cardHeaderWithOptions",
    style: {
      marginRight: "auto",
      maxWidth: "960px"
    }
  }, /*#__PURE__*/React.createElement(Header, {
    styles: {
      fontSize: "32px"
    }
  }, t("PT_MUTATION_APPLICATION_DETAILS")), dowloadOptions && dowloadOptions.length > 0 && /*#__PURE__*/React.createElement(MultiLink, {
    className: "multilinkWrapper",
    onHeadClick: () => setShowOptions(!showOptions),
    displayOptions: showOptions,
    options: dowloadOptions
  })), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_APPLICATION_NUMBER_LABEL"),
    text: property === null || property === void 0 ? void 0 : property.acknowldgementNumber
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_SEARCHPROPERTY_TABEL_PTUID"),
    text: property === null || property === void 0 ? void 0 : property.propertyId
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_APPLICATION_CHANNEL_LABEL"),
    text: t(`ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_${property === null || property === void 0 ? void 0 : property.channel}`)
  }), isPropertyTransfer && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FEE_AMOUNT"),
    text: billAmount || t("₹0"),
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PAYMENT_STATUS"),
    text: billStatus,
    textStyle: {
      whiteSpace: "pre"
    }
  }))), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_PROPERTY_ADDRESS_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_PINCODE"),
    text: (property === null || property === void 0 ? void 0 : (_property$address = property.address) === null || _property$address === void 0 ? void 0 : _property$address.pincode) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_CITY"),
    text: (property === null || property === void 0 ? void 0 : (_property$address2 = property.address) === null || _property$address2 === void 0 ? void 0 : _property$address2.city) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_LOCALITY_OR_MOHALLA"),
    text: t(`${property === null || property === void 0 ? void 0 : (_property$address3 = property.address) === null || _property$address3 === void 0 ? void 0 : (_property$address3$lo = _property$address3.locality) === null || _property$address3$lo === void 0 ? void 0 : _property$address3$lo.area}`) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_STREET_NAME"),
    text: (property === null || property === void 0 ? void 0 : (_property$address4 = property.address) === null || _property$address4 === void 0 ? void 0 : _property$address4.street) || t("CS_NA")
  }), isPropertyTransfer ? /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DOOR_OR_HOUSE"),
    text: (property === null || property === void 0 ? void 0 : (_property$address5 = property.address) === null || _property$address5 === void 0 ? void 0 : _property$address5.doorNo) || t("CS_NA")
  }) : /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_COLONY_NAME"),
    text: (property === null || property === void 0 ? void 0 : (_property$address6 = property.address) === null || _property$address6 === void 0 ? void 0 : _property$address6.buildingName) || t("CS_NA")
  })), isPropertyTransfer ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_MUTATION_TRANSFEROR_DETAILS")), /*#__PURE__*/React.createElement("div", null, Array.isArray(transferorOwners) && transferorOwners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, null, transferorOwners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_GUARDIAN_NAME"),
    text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
    text: (owner === null || owner === void 0 ? void 0 : owner.ownerType.toLowerCase()) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  }))))), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_MUTATION_TRANSFEREE_DETAILS")), isInstitution ? /*#__PURE__*/React.createElement("div", null, Array.isArray(transfereeOwners) && transfereeOwners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, null, transfereeOwners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_INSTITUTION_NAME"),
    text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_TYPE_OF_INSTITUTION"),
    text: `${t(transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.type)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_NAME_AUTHORIZED_PERSON"),
    text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.nameOfAuthorizedPerson) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_LANDLINE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.altContactNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_INSTITUTION_DESIGNATION"),
    text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.designation) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  }))))) : /*#__PURE__*/React.createElement("div", null, Array.isArray(transfereeOwners) && transfereeOwners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, null, transfereeOwners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_GUARDIAN_NAME"),
    text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_GENDER_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.gender) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_OWNERSHIP_TYPE"),
    text: `${application !== null && application !== void 0 && application.ownershipCategory ? t(`PT_OWNERSHIP_${application === null || application === void 0 ? void 0 : application.ownershipCategory}`) : t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
    text: (owner === null || owner === void 0 ? void 0 : owner.ownerType).toLowerCase() || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  }))))), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_MUTATION_DETAILS")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_PENDING_COURT"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD3 = property.additionalDetails) === null || _property$additionalD3 === void 0 ? void 0 : _property$additionalD3.isMutationInCourt) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DETAILS_COURT_CASE"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD4 = property.additionalDetails) === null || _property$additionalD4 === void 0 ? void 0 : _property$additionalD4.caseDetails) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROP_UNDER_GOV_AQUISITION"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD5 = property.additionalDetails) === null || _property$additionalD5 === void 0 ? void 0 : _property$additionalD5.isPropertyUnderGovtPossession) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DETAILS_GOV_AQUISITION"),
    text: t("CS_NA")
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_REGISTRATION_DETAILS")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REASON_PROP_TRANSFER"),
    text: `${t(property === null || property === void 0 ? void 0 : (_property$additionalD6 = property.additionalDetails) === null || _property$additionalD6 === void 0 ? void 0 : _property$additionalD6.reasonForTransfer)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROP_MARKET_VALUE"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD7 = property.additionalDetails) === null || _property$additionalD7 === void 0 ? void 0 : _property$additionalD7.marketValue) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REG_NUMBER"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD8 = property.additionalDetails) === null || _property$additionalD8 === void 0 ? void 0 : _property$additionalD8.documentNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DOC_ISSUE_DATE"),
    text: documentDate
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REG_DOC_VALUE"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD9 = property.additionalDetails) === null || _property$additionalD9 === void 0 ? void 0 : _property$additionalD9.documentValue) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REMARKS"),
    text: t("CS_NA")
  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, " ", t("PT_PROPERTY_ASSESSMENT_DETAILS_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_ASSESMENT_INFO_USAGE_TYPE"),
    text: `${t(((property === null || property === void 0 ? void 0 : property.usageCategory) !== "RESIDENTIAL" ? "COMMON_PROPUSGTYPE_NONRESIDENTIAL_" : "COMMON_PROPSUBUSGTYPE_") + (property !== null && property !== void 0 && (_property$usageCatego = property.usageCategory) !== null && _property$usageCatego !== void 0 && _property$usageCatego.split(".")[1] ? property === null || property === void 0 ? void 0 : (_property$usageCatego2 = property.usageCategory) === null || _property$usageCatego2 === void 0 ? void 0 : _property$usageCatego2.split(".")[1] : property === null || property === void 0 ? void 0 : property.usageCategory))}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_PROPERTY_TYPE"),
    text: `${t(getPropertyTypeLocale(property === null || property === void 0 ? void 0 : property.propertyType))}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_ASSESMENT1_PLOT_SIZE"),
    text: (property === null || property === void 0 ? void 0 : property.landArea) && `${t(`${property === null || property === void 0 ? void 0 : property.landArea} sq.ft`)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_ASSESMENT_INFO_NO_OF_FLOOR"),
    text: `${t(property === null || property === void 0 ? void 0 : property.noOfFloors)}` || t("CS_NA")
  })), /*#__PURE__*/React.createElement("div", null, Array.isArray(units) && units.length > 0 && units.map((unit, index) => {
    var _property$usageCatego3, _property$usageCatego4, _unit$constructionDet;
    return /*#__PURE__*/React.createElement("div", {
      key: index
    }, (flrno !== (unit === null || unit === void 0 ? void 0 : unit.floorNo) ? i = 1 : i = i + 1) && i === 1 && /*#__PURE__*/React.createElement(CardSubHeader, null, t(`PROPERTYTAX_FLOOR_${unit === null || unit === void 0 ? void 0 : unit.floorNo}`)), /*#__PURE__*/React.createElement("div", {
      style: {
        border: "groove",
        padding: "7px",
        marginBottom: "10px"
      }
    }, /*#__PURE__*/React.createElement(CardSubHeader, null, t("ES_APPLICATION_DETAILS_UNIT"), " ", i), (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -3 && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_ASSESSMENT_UNIT_USAGE_TYPE"),
      text: `${t(((property === null || property === void 0 ? void 0 : property.usageCategory) !== "RESIDENTIAL" ? "COMMON_PROPUSGTYPE_NONRESIDENTIAL_" : "COMMON_PROPUSGTYPE_") + (property !== null && property !== void 0 && (_property$usageCatego3 = property.usageCategory) !== null && _property$usageCatego3 !== void 0 && _property$usageCatego3.split(".")[1] ? property === null || property === void 0 ? void 0 : (_property$usageCatego4 = property.usageCategory) === null || _property$usageCatego4 === void 0 ? void 0 : _property$usageCatego4.split(".")[1] : property === null || property === void 0 ? void 0 : property.usageCategory))}` || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_OCCUPANY_TYPE_LABEL"),
      text: `${t("PROPERTYTAX_OCCUPANCYTYPE_" + (unit === null || unit === void 0 ? void 0 : unit.occupancyType))}` || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_BUILTUP_AREA_LABEL"),
      text: `${`${unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea} sq.ft` || t("CS_NA")}`
    }), unit.occupancyType == "RENTED" && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM2_TOTAL_ANNUAL_RENT"),
      text: `${(unit === null || unit === void 0 ? void 0 : unit.arv) && `₹${unit === null || unit === void 0 ? void 0 : unit.arv}` || t("CS_NA")}`
    }))));
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_COMMON_PROPERTY_OWNERSHIP_DETAILS_HEADER")), /*#__PURE__*/React.createElement("div", null, Array.isArray(owners) && owners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, null, owners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_GUARDIAN_NAME"),
    text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_GENDER_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.gender) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_OWNERSHIP_TYPE"),
    text: `${property !== null && property !== void 0 && property.ownershipCategory ? t(`PT_OWNERSHIP_${property === null || property === void 0 ? void 0 : property.ownershipCategory}`) : t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: owner === null || owner === void 0 ? void 0 : owner.mobileNumber
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: `${(owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
    text: (owner === null || owner === void 0 ? void 0 : owner.ownerType).toLowerCase()
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  })))))), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      fontSize: "24px"
    }
  }, t("PT_COMMON_DOCS")), /*#__PURE__*/React.createElement("div", null, Array.isArray(docs) ? docs.length > 0 && /*#__PURE__*/React.createElement(PropertyDocument, {
    property: property
  }) : /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    text: t("PT_NO_DOCUMENTS_MSG")
  }))), /*#__PURE__*/React.createElement(PTWFApplicationTimeline, {
    application: application,
    id: acknowledgementIds,
    userType: "citizen"
  }), showToast && /*#__PURE__*/React.createElement(Toast, {
    error: showToast.key,
    label: t(showToast.label),
    style: {
      bottom: "0px"
    },
    onClose: () => {
      setShowToast(null);
    }
  })), popup && /*#__PURE__*/React.createElement(PTCitizenFeedbackPopUp, {
    setpopup: setpopup,
    setShowToast: setShowToast,
    data: data
  })));
};

const config$1 = [{
  texts: {
    header: "SEARCH_PROPERTY",
    submitButtonLabel: "PT_HOME_SEARCH_RESULTS_BUTTON_SEARCH",
    text: "CS_PT_HOME_SEARCH_RESULTS_DESC"
  },
  inputs: [{
    label: "PT_HOME_SEARCH_RESULTS_OWN_MOB_LABEL",
    type: "mobileNumber",
    name: "mobileNumber",
    validation: {
      pattern: {
        value: /[6789][0-9]{9}/,
        message: "CORE_COMMON_MOBILE_ERROR"
      }
    },
    error: "CORE_COMMON_MOBILE_ERROR"
  }, {
    label: "PT_PROPERTY_UNIQUE_ID",
    description: "CS_PROPERTY_ID_FORMAT_MUST_BE",
    type: "text",
    name: "propertyIds",
    error: "ERR_INVALID_PROPERTY_ID",
    validation: {
      pattern: {
        value: "[A-Za-z]{2}\-[A-Za-z]{2}\-[0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[0-9]{6}",
        message: "ERR_INVALID_PROPERTY_ID"
      }
    }
  }, {
    label: "PT_EXISTING_PROPERTY_ID",
    type: "text",
    name: "oldPropertyId",
    error: "ERR_INVALID_PROPERTY_ID",
    validation: {
      pattern: {
        value: "[A-Za-z]{2}\-[A-Za-z]{2}\-[0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[0-9]{6}",
        message: "ERR_INVALID_PROPERTY_ID"
      }
    }
  }, {
    label: "PT_SEARCHPROPERTY_TABEL_OWNERNAME",
    type: "text",
    name: "name",
    validation: {
      pattern: {
        value: "[A-Za-z .`'-]{3,63}",
        message: "PAYMENT_INVALID_NAME"
      }
    },
    error: "PAYMENT_INVALID_NAME"
  }, {
    label: "PT_SEARCHPROPERTY_TABEL_DOOR_NO",
    type: "text",
    name: "doorNo",
    validation: {
      pattern: {
        value: "[A-Za-z0-9#,/ -()]{1,63}",
        message: "ERR_INVALID_DOOR_NO"
      }
    },
    error: "ERR_INVALID_DOOR_NO"
  }]
}];

const SearchProperty$1 = () => {
  const {
    t
  } = useTranslation();
  const {
    path
  } = useRouteMatch();
  const params = useMemo(() => config$1.map(step => {
    const texts = {};
    for (const key in step.texts) {
      texts[key] = t(step.texts[key]);
    }
    return {
      ...step,
      texts
    };
  }, [config$1]));
  return /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(Route, {
    path: `${path}`,
    exact: true
  }, /*#__PURE__*/React.createElement(SearchProperty, {
    config: params[0]
  })));
};

const getPropertyEditDetails = (data = {}) => {
  var _data, _data6, _data7, _data19, _data20, _data21, _data21$address, _data21$address$geoLo, _data22, _data22$address, _data22$address$geoLo, _data25, _data25$address, _data26, _data27, _data28, _data29, _data29$address, _data29$address$local, _data30, _data30$documents, _data31, _data31$address, _data32, _data33, _data34, _data34$additionalDet;
  if (((_data = data) === null || _data === void 0 ? void 0 : _data.propertyType) === "BUILTUP.INDEPENDENTPROPERTY" && data.units.length == 0) {
    var _data2, _data3, _data4, _data5;
    data.units = [{
      constructionDetail: {
        builtUpArea: (_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.superBuiltUpArea
      },
      floorNo: 0,
      occupancyType: (_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.occupancyType,
      unitType: (_data4 = data) === null || _data4 === void 0 ? void 0 : _data4.occupancyType,
      usageCategory: (_data5 = data) === null || _data5 === void 0 ? void 0 : _data5.usageCategory
    }];
  }
  if (((_data6 = data) === null || _data6 === void 0 ? void 0 : _data6.ownershipCategory) === "INSTITUTIONALPRIVATE" || ((_data7 = data) === null || _data7 === void 0 ? void 0 : _data7.ownershipCategory) === "INSTITUTIONALGOVERNMENT") {
    var _data8, _data8$owners$, _data8$owners$$docume, _data8$owners$$docume2, _data12, _data12$institution, _data13, _data13$institution, _data14, _data14$institution, _data15, _data16, _data17, _data17$owners$, _data18, _data18$owners$;
    let document = [];
    if ((_data8 = data) !== null && _data8 !== void 0 && (_data8$owners$ = _data8.owners[0]) !== null && _data8$owners$ !== void 0 && (_data8$owners$$docume = _data8$owners$.documents[0]) !== null && _data8$owners$$docume !== void 0 && (_data8$owners$$docume2 = _data8$owners$$docume.documentType) !== null && _data8$owners$$docume2 !== void 0 && _data8$owners$$docume2.includes("IDENTITYPROOF")) {
      var _data9, _data9$owners$, _data9$owners$$docume, _data10, _data10$owners$, _data10$owners$$docum, _data11, _data11$owners$;
      data.owners[0].documents[0].documentType = {
        code: (_data9 = data) === null || _data9 === void 0 ? void 0 : (_data9$owners$ = _data9.owners[0]) === null || _data9$owners$ === void 0 ? void 0 : (_data9$owners$$docume = _data9$owners$.documents[0]) === null || _data9$owners$$docume === void 0 ? void 0 : _data9$owners$$docume.documentType,
        i18nKey: stringReplaceAll((_data10 = data) === null || _data10 === void 0 ? void 0 : (_data10$owners$ = _data10.owners[0]) === null || _data10$owners$ === void 0 ? void 0 : (_data10$owners$$docum = _data10$owners$.documents[0]) === null || _data10$owners$$docum === void 0 ? void 0 : _data10$owners$$docum.documentType, ".", "_")
      };
      document["proofIdentity"] = (_data11 = data) === null || _data11 === void 0 ? void 0 : (_data11$owners$ = _data11.owners[0]) === null || _data11$owners$ === void 0 ? void 0 : _data11$owners$.documents[0];
    }
    data.owners[0].designation = (_data12 = data) === null || _data12 === void 0 ? void 0 : (_data12$institution = _data12.institution) === null || _data12$institution === void 0 ? void 0 : _data12$institution.designation, data.owners[0].inistitutionName = (_data13 = data) === null || _data13 === void 0 ? void 0 : (_data13$institution = _data13.institution) === null || _data13$institution === void 0 ? void 0 : _data13$institution.name, data.owners[0].name = (_data14 = data) === null || _data14 === void 0 ? void 0 : (_data14$institution = _data14.institution) === null || _data14$institution === void 0 ? void 0 : _data14$institution.nameOfAuthorizedPerson, data.owners[0].inistitutetype = {
      value: (_data15 = data) === null || _data15 === void 0 ? void 0 : _data15.institution.type,
      code: (_data16 = data) === null || _data16 === void 0 ? void 0 : _data16.institution.type
    }, data.owners[0].documents = document;
    data.owners[0].permanentAddress = (_data17 = data) === null || _data17 === void 0 ? void 0 : (_data17$owners$ = _data17.owners[0]) === null || _data17$owners$ === void 0 ? void 0 : _data17$owners$.correspondenceAddress;
    data.owners[0].isCorrespondenceAddress = (_data18 = data) === null || _data18 === void 0 ? void 0 : (_data18$owners$ = _data18.owners[0]) === null || _data18$owners$ === void 0 ? void 0 : _data18$owners$.isCorrespondenceAddress;
  } else {
    data.owners.map(owner => {
      let document = [];
      owner.documents && owner.documents.map(doc => {
        var _doc$documentType, _doc$documentType2;
        if (doc !== null && doc !== void 0 && doc.documentType && typeof (doc === null || doc === void 0 ? void 0 : doc.documentType) == "string" && doc !== null && doc !== void 0 && (_doc$documentType = doc.documentType) !== null && _doc$documentType !== void 0 && _doc$documentType.includes("SPECIALCATEGORYPROOF")) {
          doc.documentType = {
            code: doc === null || doc === void 0 ? void 0 : doc.documentType,
            i18nKey: stringReplaceAll(doc === null || doc === void 0 ? void 0 : doc.documentType, ".", "_")
          };
          document["specialProofIdentity"] = doc;
        }
        if (doc !== null && doc !== void 0 && doc.documentType && typeof (doc === null || doc === void 0 ? void 0 : doc.documentType) == "string" && doc !== null && doc !== void 0 && (_doc$documentType2 = doc.documentType) !== null && _doc$documentType2 !== void 0 && _doc$documentType2.includes("IDENTITYPROOF")) {
          doc.documentType = {
            code: doc === null || doc === void 0 ? void 0 : doc.documentType,
            i18nKey: stringReplaceAll(doc === null || doc === void 0 ? void 0 : doc.documentType, ".", "_")
          };
          document["proofIdentity"] = doc;
        }
      });
      owner.emailId = owner === null || owner === void 0 ? void 0 : owner.emailId;
      owner.fatherOrHusbandName = owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName;
      owner.isCorrespondenceAddress = owner === null || owner === void 0 ? void 0 : owner.isCorrespondenceAddress;
      owner.mobileNumber = owner === null || owner === void 0 ? void 0 : owner.mobileNumber;
      owner.name = owner === null || owner === void 0 ? void 0 : owner.name;
      owner.permanentAddress = owner === null || owner === void 0 ? void 0 : owner.permanentAddress;
      owner.gender = {
        code: owner === null || owner === void 0 ? void 0 : owner.gender
      };
      owner.ownerType = {
        code: owner === null || owner === void 0 ? void 0 : owner.ownerType
      };
      owner.relationship = {
        code: owner === null || owner === void 0 ? void 0 : owner.relationship
      };
      owner.documents = document;
    });
  }
  data.ownershipCategory = {
    code: (_data19 = data) === null || _data19 === void 0 ? void 0 : _data19.ownershipCategory,
    value: (_data20 = data) === null || _data20 === void 0 ? void 0 : _data20.ownershipCategory
  };
  if ((_data21 = data) !== null && _data21 !== void 0 && (_data21$address = _data21.address) !== null && _data21$address !== void 0 && (_data21$address$geoLo = _data21$address.geoLocation) !== null && _data21$address$geoLo !== void 0 && _data21$address$geoLo.latitude && (_data22 = data) !== null && _data22 !== void 0 && (_data22$address = _data22.address) !== null && _data22$address !== void 0 && (_data22$address$geoLo = _data22$address.geoLocation) !== null && _data22$address$geoLo !== void 0 && _data22$address$geoLo.longitude) {
    var _data23, _data23$address, _data23$address$geoLo, _data24, _data24$address, _data24$address$geoLo;
    data.address.geoLocation = {
      latitude: (_data23 = data) === null || _data23 === void 0 ? void 0 : (_data23$address = _data23.address) === null || _data23$address === void 0 ? void 0 : (_data23$address$geoLo = _data23$address.geoLocation) === null || _data23$address$geoLo === void 0 ? void 0 : _data23$address$geoLo.latitude,
      longitude: (_data24 = data) === null || _data24 === void 0 ? void 0 : (_data24$address = _data24.address) === null || _data24$address === void 0 ? void 0 : (_data24$address$geoLo = _data24$address.geoLocation) === null || _data24$address$geoLo === void 0 ? void 0 : _data24$address$geoLo.longitude
    };
  } else {
    data.address.geoLocation = {};
  }
  data.address.pincode = (_data25 = data) === null || _data25 === void 0 ? void 0 : (_data25$address = _data25.address) === null || _data25$address === void 0 ? void 0 : _data25$address.pincode;
  data.address.city = {
    code: (_data26 = data) === null || _data26 === void 0 ? void 0 : _data26.tenantId,
    i18nKey: `TENANT_TENANTS_${stringReplaceAll((_data27 = data) === null || _data27 === void 0 ? void 0 : _data27.tenantId.toUpperCase(), ".", "_")}`
  };
  data.address.locality.i18nkey = ((_data28 = data) === null || _data28 === void 0 ? void 0 : _data28.tenantId.replace(".", "_").toUpperCase()) + "_" + "REVENUE" + "_" + ((_data29 = data) === null || _data29 === void 0 ? void 0 : (_data29$address = _data29.address) === null || _data29$address === void 0 ? void 0 : (_data29$address$local = _data29$address.locality) === null || _data29$address$local === void 0 ? void 0 : _data29$address$local.code);
  let addressDocs = (_data30 = data) === null || _data30 === void 0 ? void 0 : (_data30$documents = _data30.documents) === null || _data30$documents === void 0 ? void 0 : _data30$documents.filter(doc => {
    var _doc$documentType3;
    return doc === null || doc === void 0 ? void 0 : (_doc$documentType3 = doc.documentType) === null || _doc$documentType3 === void 0 ? void 0 : _doc$documentType3.includes("ADDRESSPROOF");
  });
  if (checkArrayLength(addressDocs)) {
    var _addressDocs$, _addressDocs$2;
    addressDocs[0].documentType = {
      code: (_addressDocs$ = addressDocs[0]) === null || _addressDocs$ === void 0 ? void 0 : _addressDocs$.documentType,
      i18nKey: stringReplaceAll((_addressDocs$2 = addressDocs[0]) === null || _addressDocs$2 === void 0 ? void 0 : _addressDocs$2.documentType, ".", "_")
    };
  }
  if (!data.documents) {
    data = {
      ...data,
      documents: []
    };
  }
  if ((_data31 = data) !== null && _data31 !== void 0 && (_data31$address = _data31.address) !== null && _data31$address !== void 0 && _data31$address.documents) {
    data.address.documents["ProofOfAddress"] = addressDocs[0];
  } else {
    data.address.documents = [];
    data.address.documents["ProofOfAddress"] = addressDocs && Array.isArray(addressDocs) && addressDocs.length > 0 && addressDocs[0];
  }
  data.documents["ProofOfAddress"] = addressDocs && Array.isArray(addressDocs) && addressDocs.length > 0 && addressDocs[0];
  const getunitobjectforInd = (data, ob, flrno, extraunits, unitedit) => {
    let totbuiltarea = 0;
    let selfoccupiedtf = false,
      rentedtf = false,
      unoccupiedtf = false;
    ob["plotSize"] = `${data === null || data === void 0 ? void 0 : data.landArea}`;
    (data === null || data === void 0 ? void 0 : data.units) && (data === null || data === void 0 ? void 0 : data.units.map((unit1, index) => {
      if ((unit1 === null || unit1 === void 0 ? void 0 : unit1.floorNo) == flrno && ((unit1 === null || unit1 === void 0 ? void 0 : unit1.occupancyType) === "RENTED" && rentedtf == true || (unit1 === null || unit1 === void 0 ? void 0 : unit1.occupancyType) === "UNOCCUPIED" && unoccupiedtf == true || (unit1 === null || unit1 === void 0 ? void 0 : unit1.occupancyType) === "SELFOCCUPIED" && selfoccupiedtf == true || flrno > unitedit.length)) {
        if (!extraunits.includes(unit1)) {
          extraunits.push(unit1);
        }
      } else if ((unit1 === null || unit1 === void 0 ? void 0 : unit1.floorNo) == flrno && (unit1 === null || unit1 === void 0 ? void 0 : unit1.occupancyType) === "RENTED") {
        var _unit1$constructionDe, _unit1$constructionDe2;
        rentedtf = true;
        ob["AnnualRent"] = `${unit1.arv}` || "";
        ob["RentArea"] = `${unit1 === null || unit1 === void 0 ? void 0 : (_unit1$constructionDe = unit1.constructionDetail) === null || _unit1$constructionDe === void 0 ? void 0 : _unit1$constructionDe.builtUpArea}`;
        ob["SubUsageTypeOfRentedArea"] = {
          i18nKey: `COMMON_PROPSUBUSGTYPE_${(unit1.usageCategory.split(".")[0] + `_${unit1.usageCategory.split(".")[1]}` + `_${unit1.usageCategory.split(".").pop()}`).replaceAll(".", "_")}`,
          Subusagetypeofrentedareacode: unit1.usageCategory
        };
        totbuiltarea = totbuiltarea + parseInt(unit1 === null || unit1 === void 0 ? void 0 : (_unit1$constructionDe2 = unit1.constructionDetail) === null || _unit1$constructionDe2 === void 0 ? void 0 : _unit1$constructionDe2.builtUpArea);
      } else if ((unit1 === null || unit1 === void 0 ? void 0 : unit1.floorNo) == flrno && (unit1 === null || unit1 === void 0 ? void 0 : unit1.occupancyType) === "UNOCCUPIED") {
        var _unit1$constructionDe3, _unit1$constructionDe4;
        unoccupiedtf = true;
        ob["UnOccupiedArea"] = `${unit1 === null || unit1 === void 0 ? void 0 : (_unit1$constructionDe3 = unit1.constructionDetail) === null || _unit1$constructionDe3 === void 0 ? void 0 : _unit1$constructionDe3.builtUpArea}`;
        totbuiltarea = totbuiltarea + parseInt(unit1 === null || unit1 === void 0 ? void 0 : (_unit1$constructionDe4 = unit1.constructionDetail) === null || _unit1$constructionDe4 === void 0 ? void 0 : _unit1$constructionDe4.builtUpArea);
      } else if ((unit1 === null || unit1 === void 0 ? void 0 : unit1.floorNo) == flrno && (unit1 === null || unit1 === void 0 ? void 0 : unit1.occupancyType) === "SELFOCCUPIED") {
        var _unit1$constructionDe5, _unit1$constructionDe6;
        selfoccupiedtf = true;
        ob["floorarea"] = `${unit1 === null || unit1 === void 0 ? void 0 : (_unit1$constructionDe5 = unit1.constructionDetail) === null || _unit1$constructionDe5 === void 0 ? void 0 : _unit1$constructionDe5.builtUpArea}`;
        ob["SubUsageType"] = {
          i18nKey: `COMMON_PROPSUBUSGTYPE_${(unit1.usageCategory.split(".")[0] + `_${unit1.usageCategory.split(".")[1]}` + `_${unit1.usageCategory.split(".").pop()}`).replaceAll(".", "_")}`
        };
        totbuiltarea = totbuiltarea + parseInt(unit1 === null || unit1 === void 0 ? void 0 : (_unit1$constructionDe6 = unit1.constructionDetail) === null || _unit1$constructionDe6 === void 0 ? void 0 : _unit1$constructionDe6.builtUpArea);
      }
    }));
    if (unoccupiedtf == true && rentedtf == false && selfoccupiedtf == false) {
      ob["selfOccupied"] = "";
    } else {
      ob["selfOccupied"] = rentedtf == true ? selfoccupiedtf == true ? {
        i18nKey: "PT_PARTIALLY_RENTED_OUT",
        code: "RENTED"
      } : {
        i18nKey: "PT_FULLY_RENTED_OUT",
        code: "RENTED"
      } : {
        i18nKey: "PT_YES_IT_IS_SELFOCCUPIED",
        code: "SELFOCCUPIED"
      };
    }
    ob["IsAnyPartOfThisFloorUnOccupied"] = unoccupiedtf == true ? {
      i18nKey: "PT_COMMON_YES",
      code: "UNOCCUPIED"
    } : {
      i18nKey: "PT_COMMON_NO",
      code: "UNOCCUPIED"
    };
    ob["builtUpArea"] = `${totbuiltarea}`;
    return ob;
  };
  if (((_data32 = data) === null || _data32 === void 0 ? void 0 : _data32.channel) === "CFC_COUNTER" || ((_data33 = data) === null || _data33 === void 0 ? void 0 : _data33.PropertyType) === "BUILTUP.INDEPENDENTPROPERTY" && data.units.length == 0 || ((_data34 = data) === null || _data34 === void 0 ? void 0 : (_data34$additionalDet = _data34.additionalDetails) === null || _data34$additionalDet === void 0 ? void 0 : _data34$additionalDet.isRainwaterHarvesting) == false) {
    var _data35, _data41, _data61;
    if (((_data35 = data) === null || _data35 === void 0 ? void 0 : _data35.propertyType) === "VACANT") {
      var _data36, _data37, _data38, _data39, _data39$usageCategory, _data40;
      data.PropertyType = {
        code: (_data36 = data) === null || _data36 === void 0 ? void 0 : _data36.propertyType,
        i18nKey: `COMMON_PROPTYPE_${data.propertyType}`
      };
      data.isResdential = ((_data37 = data) === null || _data37 === void 0 ? void 0 : _data37.usageCategory) === "RESIDENTIAL" ? {
        code: "RESIDENTIAL",
        i18nKey: "PT_COMMON_YES"
      } : {
        code: "NONRESIDENTIAL",
        i18nKey: "PT_COMMON_NO"
      };
      data.usageCategoryMajor = {
        code: (_data38 = data) === null || _data38 === void 0 ? void 0 : _data38.usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(_data39 = data) === null || _data39 === void 0 ? void 0 : (_data39$usageCategory = _data39.usageCategory) === null || _data39$usageCategory === void 0 ? void 0 : _data39$usageCategory.split(".").pop()}`
      };
      data.landarea = {
        floorarea: (_data40 = data) === null || _data40 === void 0 ? void 0 : _data40.landArea
      };
    } else if (((_data41 = data) === null || _data41 === void 0 ? void 0 : _data41.propertyType) === "BUILTUP.SHAREDPROPERTY") {
      var _data42, _data43, _data44, _data44$usageCategory, _data45, _data46, _data46$units$, _data47, _data47$units$, _data48, _data48$units$, _data49, _data49$units$, _data50, _data50$units$, _data51, _data51$units$, _data52, _data53, _data60;
      let extraunitsFPB = [];
      let selfoccupiedtf = false,
        rentedtf = false,
        unoccupiedtf = false;
      data.isResdential = ((_data42 = data) === null || _data42 === void 0 ? void 0 : _data42.usageCategory) === "RESIDENTIAL" ? {
        code: "RESIDENTIAL",
        i18nKey: "PT_COMMON_YES"
      } : {
        code: "NONRESIDENTIAL",
        i18nKey: "PT_COMMON_NO"
      };
      data.usageCategoryMajor = {
        code: (_data43 = data) === null || _data43 === void 0 ? void 0 : _data43.usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(_data44 = data) === null || _data44 === void 0 ? void 0 : (_data44$usageCategory = _data44.usageCategory) === null || _data44$usageCategory === void 0 ? void 0 : _data44$usageCategory.split(".").pop()}`
      };
      data.PropertyType = {
        code: (_data45 = data) === null || _data45 === void 0 ? void 0 : _data45.propertyType,
        i18nKey: `COMMON_PROPTYPE_BUILTUP_${data.propertyType.split(".").pop()}`
      };
      data.Floorno = ((_data46 = data) === null || _data46 === void 0 ? void 0 : (_data46$units$ = _data46.units[0]) === null || _data46$units$ === void 0 ? void 0 : _data46$units$.floorNo) < 0 ? {
        i18nKey: `PROPERTYTAX_FLOOR__${((_data47 = data) === null || _data47 === void 0 ? void 0 : (_data47$units$ = _data47.units[0]) === null || _data47$units$ === void 0 ? void 0 : _data47$units$.floorNo) * -1}`
      } : {
        i18nKey: `PROPERTYTAX_FLOOR_${(_data48 = data) === null || _data48 === void 0 ? void 0 : (_data48$units$ = _data48.units[0]) === null || _data48$units$ === void 0 ? void 0 : _data48$units$.floorNo}`
      };
      data.Subusagetypeofrentedarea = {
        SubUsageTypeOfRentedArea: {
          i18nKey: `COMMON_PROPSUBUSGTYPE_${(_data49 = data) === null || _data49 === void 0 ? void 0 : (_data49$units$ = _data49.units[0]) === null || _data49$units$ === void 0 ? void 0 : _data49$units$.usageCategory.slice(0, (_data50 = data) === null || _data50 === void 0 ? void 0 : (_data50$units$ = _data50.units[0]) === null || _data50$units$ === void 0 ? void 0 : _data50$units$.usageCategory.lastIndexOf(".")).replaceAll(".", "_")}`
        },
        Subusagetypeofrentedareacode: (_data51 = data) === null || _data51 === void 0 ? void 0 : (_data51$units$ = _data51.units[0]) === null || _data51$units$ === void 0 ? void 0 : _data51$units$.usageCategory
      };
      ((_data52 = data) === null || _data52 === void 0 ? void 0 : _data52.units) && ((_data53 = data) === null || _data53 === void 0 ? void 0 : _data53.units.map((unit, index) => {
        var _data54, _data55, _data56, _data57, _data58, _data59;
        if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "RENTED" && rentedtf == true && unit.floorNo == ((_data54 = data) === null || _data54 === void 0 ? void 0 : _data54.units[0].floorNo) || (unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "UNOCCUPIED" && unoccupiedtf == true && unit.floorNo == ((_data55 = data) === null || _data55 === void 0 ? void 0 : _data55.units[0].floorNo) || (unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "SELFOCCUPIED" && selfoccupiedtf == true && unit.floorNo == ((_data56 = data) === null || _data56 === void 0 ? void 0 : _data56.units[0].floorNo)) {
          if (!extraunitsFPB.includes(unit)) {
            extraunitsFPB.push(unit);
          }
        } else if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "RENTED" && unit.floorNo == ((_data57 = data) === null || _data57 === void 0 ? void 0 : _data57.units[0].floorNo)) {
          var _unit$constructionDet;
          rentedtf = true;
          data.Constructiondetails = {
            RentArea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea,
            AnnualRent: unit === null || unit === void 0 ? void 0 : unit.arv
          };
          data.Subusagetypeofrentedarea = {
            SubUsageTypeOfRentedArea: {
              i18nKey: `COMMON_PROPSUBUSGTYPE_${unit === null || unit === void 0 ? void 0 : unit.usageCategory.slice(0, unit === null || unit === void 0 ? void 0 : unit.usageCategory.lastIndexOf(".")).replaceAll(".", "_")}`
            },
            Subusagetypeofrentedareacode: unit === null || unit === void 0 ? void 0 : unit.usageCategory
          };
        } else if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "UNOCCUPIED" && unit.floorNo == ((_data58 = data) === null || _data58 === void 0 ? void 0 : _data58.units[0].floorNo)) {
          var _unit$constructionDet2;
          unoccupiedtf = true;
          data.UnOccupiedArea = {
            UnOccupiedArea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet2 = unit.constructionDetail) === null || _unit$constructionDet2 === void 0 ? void 0 : _unit$constructionDet2.builtUpArea
          };
        } else if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "SELFOCCUPIED" && unit.floorNo == ((_data59 = data) === null || _data59 === void 0 ? void 0 : _data59.units[0].floorNo)) {
          var _unit$constructionDet3;
          selfoccupiedtf = true;
          data.landarea = {
            floorarea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet3 = unit.constructionDetail) === null || _unit$constructionDet3 === void 0 ? void 0 : _unit$constructionDet3.builtUpArea
          };
          data.subusagetype = {
            SubUsageType: {
              i18nKey: `COMMON_PROPSUBUSGTYPE_${unit === null || unit === void 0 ? void 0 : unit.usageCategory.slice(0, unit === null || unit === void 0 ? void 0 : unit.usageCategory.lastIndexOf(".")).replaceAll(".", "_")}`
            }
          };
        } else {
          if (!extraunitsFPB.includes(unit)) {
            extraunitsFPB.push(unit);
          }
        }
      }));
      data.selfOccupied = rentedtf == true ? selfoccupiedtf == true ? {
        i18nKey: "PT_PARTIALLY_RENTED_OUT",
        code: "RENTED"
      } : {
        i18nKey: "PT_FULLY_RENTED_OUT",
        code: "RENTED"
      } : {
        i18nKey: "PT_YES_IT_IS_SELFOCCUPIED",
        code: "SELFOCCUPIED"
      };
      data.IsAnyPartOfThisFloorUnOccupied = unoccupiedtf == true ? {
        i18nKey: "PT_COMMON_YES",
        code: "UNOCCUPIED"
      } : {
        i18nKey: "PT_COMMON_NO",
        code: "UNOCCUPIED"
      };
      data.floordetails = {
        plotSize: (_data60 = data) === null || _data60 === void 0 ? void 0 : _data60.landArea,
        builtUpArea: getSuperBuiltUpareafromob(data)
      };
      data["extraunitFPB"] = extraunitsFPB;
    } else if (((_data61 = data) === null || _data61 === void 0 ? void 0 : _data61.propertyType) === "BUILTUP.INDEPENDENTPROPERTY") {
      var _data62, _data63, _data64, _data65, _data65$usageCategory, _data66, _data67, _data68, _data69;
      data.landArea = {
        floorarea: (_data62 = data) === null || _data62 === void 0 ? void 0 : _data62.landArea
      };
      data.isResdential = ((_data63 = data) === null || _data63 === void 0 ? void 0 : _data63.usageCategory) === "RESIDENTIAL" ? {
        code: "RESIDENTIAL",
        i18nKey: "PT_COMMON_YES"
      } : {
        code: "NONRESIDENTIAL",
        i18nKey: "PT_COMMON_NO"
      };
      data.usageCategoryMajor = {
        code: (_data64 = data) === null || _data64 === void 0 ? void 0 : _data64.usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(_data65 = data) === null || _data65 === void 0 ? void 0 : (_data65$usageCategory = _data65.usageCategory) === null || _data65$usageCategory === void 0 ? void 0 : _data65$usageCategory.split(".").pop()}`
      };
      data.PropertyType = {
        code: (_data66 = data) === null || _data66 === void 0 ? void 0 : _data66.propertyType,
        i18nKey: `COMMON_PROPTYPE_BUILTUP_${data.propertyType.split(".").pop()}`
      };
      let unitedit = [];
      let ob = {};
      let flooradded = [];
      let flrno;
      let extraunits = [];
      data.units && data.units.sort((x, y) => {
        let a = x.floorNo,
          b = y.floorNo;
        if (x.floorNo < 0) {
          a = x.floorNo * -20;
        }
        if (y.floorNo < 0) {
          b = y.floorNo * -20;
        }
        if (a > b) {
          return 1;
        } else {
          return -1;
        }
      });
      ((_data67 = data) === null || _data67 === void 0 ? void 0 : _data67.units) && ((_data68 = data) === null || _data68 === void 0 ? void 0 : _data68.units.map((unit, index) => {
        ob = {};
        if (unit.floorNo == 0 || unit.floorNo == 1 || unit.floorNo == 2 || unit.floorNo == -1 || unit.floorNo == -2) {
          flrno = unit.floorNo;
          ob = getunitobjectforInd(data, ob, flrno, extraunits, unitedit);
          if (ob.selfOccupied == "") {
            extraunits.push(unit);
          }
        } else {
          extraunits.push(unit);
        }
        if (ob == {}) {
          extraunits.push(unit);
        }
        !flooradded.includes(unit.floorNo) && ob.builtUpArea > 0 && unit.floorNo > -1 && unit.floorNo < 3 && ob.selfOccupied !== "" && ob != {} && unitedit.push(ob);
        unit.floorNo == -1 && ob != {} && ob.selfOccupied !== "" && ob.builtUpArea > 0 && (unitedit["-1"] = ob);
        if (unitedit["-1"] && unit.floorNo == -2 && !extraunits.includes(unit)) {
          unit.floorNo == -2 && ob != {} && ob.selfOccupied !== "" && ob.builtUpArea > 0 && (unitedit["-2"] = ob);
        } else if (!unitedit["-1"] && unit.floorNo == -2 && !extraunits.includes(unit)) {
          extraunits.push(unit);
        }
        flooradded.push(flrno);
      }));
      data.noOfFloors = unitedit.length == 3 ? {
        i18nKey: "PT_GROUND_PLUS_TWO_OPTION",
        code: 2
      } : unitedit.length == 2 ? {
        i18nKey: "PT_GROUND_PLUS_ONE_OPTION",
        code: 1
      } : {
        i18nKey: "PT_GROUND_FLOOR_OPTION",
        code: 0
      };
      data.noOofBasements = unitedit["-2"] ? {
        i18nKey: "PT_TWO_BASEMENT_OPTION",
        code: 2
      } : unitedit["-1"] ? {
        i18nKey: "PT_ONE_BASEMENT_OPTION",
        code: 1
      } : {
        i18nKey: "PT_NO_BASEMENT_OPTION",
        code: 0
      };
      data.units = (_data69 = data) === null || _data69 === void 0 ? void 0 : _data69.units.map(ob => {
        var _ob$usageCategory, _ob$usageCategory2, _ob$usageCategory3, _ob$usageCategory4;
        return {
          ...ob,
          unitType: {
            code: (ob === null || ob === void 0 ? void 0 : ob.usageCategory) === "RESIDENTIAL" ? ob === null || ob === void 0 ? void 0 : ob.usageCategory : ob === null || ob === void 0 ? void 0 : (_ob$usageCategory = ob.usageCategory) === null || _ob$usageCategory === void 0 ? void 0 : _ob$usageCategory.split(".")[3],
            i18nKey: (ob === null || ob === void 0 ? void 0 : ob.usageCategory) === "RESIDENTIAL" ? `PROPERTYTAX_BILLING_SLAB_${ob === null || ob === void 0 ? void 0 : ob.usageCategory}` : `PROPERTYTAX_BILLING_SLAB_${ob === null || ob === void 0 ? void 0 : (_ob$usageCategory2 = ob.usageCategory) === null || _ob$usageCategory2 === void 0 ? void 0 : _ob$usageCategory2.split(".")[3]}`,
            usageCategoryMinor: (ob === null || ob === void 0 ? void 0 : ob.usageCategory) === "RESIDENTIAL" ? "" : ob === null || ob === void 0 ? void 0 : (_ob$usageCategory3 = ob.usageCategory) === null || _ob$usageCategory3 === void 0 ? void 0 : _ob$usageCategory3.split(".")[1],
            usageCategorySubMinor: (ob === null || ob === void 0 ? void 0 : ob.usageCategory) === "RESIDENTIAL" ? "" : ob === null || ob === void 0 ? void 0 : (_ob$usageCategory4 = ob.usageCategory) === null || _ob$usageCategory4 === void 0 ? void 0 : _ob$usageCategory4.split(".")[2]
          }
        };
      });
    }
  } else {
    var _data70, _data70$additionalDet, _data70$additionalDet2, _data71, _data71$propertyType, _data77, _data77$additionalDet, _data77$additionalDet2, _data78, _data78$propertyType, _data94, _data94$additionalDet, _data94$additionalDet2, _data95, _data95$propertyType, _data96;
    if (((_data70 = data) === null || _data70 === void 0 ? void 0 : (_data70$additionalDet = _data70.additionalDetails) === null || _data70$additionalDet === void 0 ? void 0 : (_data70$additionalDet2 = _data70$additionalDet.propertyType) === null || _data70$additionalDet2 === void 0 ? void 0 : _data70$additionalDet2.code) === "VACANT" || ((_data71 = data) === null || _data71 === void 0 ? void 0 : (_data71$propertyType = _data71.propertyType) === null || _data71$propertyType === void 0 ? void 0 : _data71$propertyType.code) === "VACANT") {
      var _data72, _data72$additionalDet, _data73, _data73$additionalDet, _data74, _data75, _data75$usageCategory, _data76;
      data.PropertyType = (_data72 = data) === null || _data72 === void 0 ? void 0 : (_data72$additionalDet = _data72.additionalDetails) === null || _data72$additionalDet === void 0 ? void 0 : _data72$additionalDet.propertyType;
      data.isResdential = (_data73 = data) === null || _data73 === void 0 ? void 0 : (_data73$additionalDet = _data73.additionalDetails) === null || _data73$additionalDet === void 0 ? void 0 : _data73$additionalDet.isResdential;
      data.usageCategoryMajor = {
        code: (_data74 = data) === null || _data74 === void 0 ? void 0 : _data74.usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(_data75 = data) === null || _data75 === void 0 ? void 0 : (_data75$usageCategory = _data75.usageCategory) === null || _data75$usageCategory === void 0 ? void 0 : _data75$usageCategory.split(".").pop()}`
      };
      data.landarea = {
        floorarea: (_data76 = data) === null || _data76 === void 0 ? void 0 : _data76.landArea
      };
    } else if (((_data77 = data) === null || _data77 === void 0 ? void 0 : (_data77$additionalDet = _data77.additionalDetails) === null || _data77$additionalDet === void 0 ? void 0 : (_data77$additionalDet2 = _data77$additionalDet.propertyType) === null || _data77$additionalDet2 === void 0 ? void 0 : _data77$additionalDet2.code) === "BUILTUP.SHAREDPROPERTY" || ((_data78 = data) === null || _data78 === void 0 ? void 0 : (_data78$propertyType = _data78.propertyType) === null || _data78$propertyType === void 0 ? void 0 : _data78$propertyType.code) === "BUILTUP.SHAREDPROPERTY") {
      var _data79, _data79$additionalDet, _data80, _data81, _data81$usageCategory, _data82, _data82$additionalDet, _data83, _data83$units$, _data84, _data84$units$, _data85, _data85$units$, _data86, _data86$additionalDet, _data87, _data87$additionalDet, _data88, _data88$additionalDet, _data89, _data89$additionalDet, _data90, _data91, _data92, _data93, _data93$additionalDet;
      data.isResdential = (_data79 = data) === null || _data79 === void 0 ? void 0 : (_data79$additionalDet = _data79.additionalDetails) === null || _data79$additionalDet === void 0 ? void 0 : _data79$additionalDet.isResdential;
      data.usageCategoryMajor = {
        code: (_data80 = data) === null || _data80 === void 0 ? void 0 : _data80.usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(_data81 = data) === null || _data81 === void 0 ? void 0 : (_data81$usageCategory = _data81.usageCategory) === null || _data81$usageCategory === void 0 ? void 0 : _data81$usageCategory.split(".").pop()}`
      };
      data.PropertyType = (_data82 = data) === null || _data82 === void 0 ? void 0 : (_data82$additionalDet = _data82.additionalDetails) === null || _data82$additionalDet === void 0 ? void 0 : _data82$additionalDet.propertyType;
      data.Floorno = ((_data83 = data) === null || _data83 === void 0 ? void 0 : (_data83$units$ = _data83.units[0]) === null || _data83$units$ === void 0 ? void 0 : _data83$units$.floorNo) < 0 ? {
        i18nKey: `PROPERTYTAX_FLOOR__${((_data84 = data) === null || _data84 === void 0 ? void 0 : (_data84$units$ = _data84.units[0]) === null || _data84$units$ === void 0 ? void 0 : _data84$units$.floorNo) * -1}`
      } : {
        i18nKey: `PROPERTYTAX_FLOOR_${(_data85 = data) === null || _data85 === void 0 ? void 0 : (_data85$units$ = _data85.units[0]) === null || _data85$units$ === void 0 ? void 0 : _data85$units$.floorNo}`
      };
      data.selfOccupied = (_data86 = data) === null || _data86 === void 0 ? void 0 : (_data86$additionalDet = _data86.additionalDetails) === null || _data86$additionalDet === void 0 ? void 0 : _data86$additionalDet.selfOccupied;
      data.Subusagetypeofrentedarea = (_data87 = data) === null || _data87 === void 0 ? void 0 : (_data87$additionalDet = _data87.additionalDetails) === null || _data87$additionalDet === void 0 ? void 0 : _data87$additionalDet.Subusagetypeofrentedarea;
      data.subusagetype = (_data88 = data) === null || _data88 === void 0 ? void 0 : (_data88$additionalDet = _data88.additionalDetails) === null || _data88$additionalDet === void 0 ? void 0 : _data88$additionalDet.subusagetype;
      data.IsAnyPartOfThisFloorUnOccupied = (_data89 = data) === null || _data89 === void 0 ? void 0 : (_data89$additionalDet = _data89.additionalDetails) === null || _data89$additionalDet === void 0 ? void 0 : _data89$additionalDet.IsAnyPartOfThisFloorUnOccupied;
      ((_data90 = data) === null || _data90 === void 0 ? void 0 : _data90.units) && ((_data91 = data) === null || _data91 === void 0 ? void 0 : _data91.units.map((unit, index) => {
        if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "RENTED") {
          var _unit$constructionDet4;
          data.Constructiondetails = {
            RentArea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet4 = unit.constructionDetail) === null || _unit$constructionDet4 === void 0 ? void 0 : _unit$constructionDet4.builtUpArea,
            AnnualRent: unit === null || unit === void 0 ? void 0 : unit.arv
          };
        } else if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "UNOCCUPIED") {
          var _unit$constructionDet5;
          data.UnOccupiedArea = {
            UnOccupiedArea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet5 = unit.constructionDetail) === null || _unit$constructionDet5 === void 0 ? void 0 : _unit$constructionDet5.builtUpArea
          };
        } else if ((unit === null || unit === void 0 ? void 0 : unit.occupancyType) === "SELFOCCUPIED") {
          var _unit$constructionDet6;
          data.landarea = {
            floorarea: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet6 = unit.constructionDetail) === null || _unit$constructionDet6 === void 0 ? void 0 : _unit$constructionDet6.builtUpArea
          };
        }
      }));
      data.floordetails = {
        plotSize: (_data92 = data) === null || _data92 === void 0 ? void 0 : _data92.landArea,
        builtUpArea: (_data93 = data) === null || _data93 === void 0 ? void 0 : (_data93$additionalDet = _data93.additionalDetails) === null || _data93$additionalDet === void 0 ? void 0 : _data93$additionalDet.builtUpArea
      };
    } else if (((_data94 = data) === null || _data94 === void 0 ? void 0 : (_data94$additionalDet = _data94.additionalDetails) === null || _data94$additionalDet === void 0 ? void 0 : (_data94$additionalDet2 = _data94$additionalDet.propertyType) === null || _data94$additionalDet2 === void 0 ? void 0 : _data94$additionalDet2.code) === "BUILTUP.INDEPENDENTPROPERTY" || ((_data95 = data) === null || _data95 === void 0 ? void 0 : (_data95$propertyType = _data95.propertyType) === null || _data95$propertyType === void 0 ? void 0 : _data95$propertyType.code) === "BUILTUP.INDEPENDENTPROPERTY" || ((_data96 = data) === null || _data96 === void 0 ? void 0 : _data96.propertyType) === "BUILTUP.INDEPENDENTPROPERTY") {
      var _data97, _data97$additionalDet, _data98, _data99, _data99$usageCategory, _data100, _data100$additionalDe, _data101, _data102, _data102$additionalDe, _data103, _data104, _data104$additionalDe, _data105, _data105$additionalDe, _data106, _data106$additionalDe, _data106$additionalDe2, _data107, _data107$additionalDe, _data108, _data108$additionalDe, _data109;
      data.isResdential = (_data97 = data) === null || _data97 === void 0 ? void 0 : (_data97$additionalDet = _data97.additionalDetails) === null || _data97$additionalDet === void 0 ? void 0 : _data97$additionalDet.isResdential;
      data.usageCategoryMajor = {
        code: (_data98 = data) === null || _data98 === void 0 ? void 0 : _data98.usageCategory,
        i18nKey: `PROPERTYTAX_BILLING_SLAB_${(_data99 = data) === null || _data99 === void 0 ? void 0 : (_data99$usageCategory = _data99.usageCategory) === null || _data99$usageCategory === void 0 ? void 0 : _data99$usageCategory.split(".").pop()}`
      };
      data.PropertyType = ((_data100 = data) === null || _data100 === void 0 ? void 0 : (_data100$additionalDe = _data100.additionalDetails) === null || _data100$additionalDe === void 0 ? void 0 : _data100$additionalDe.propertyType) || ((_data101 = data) === null || _data101 === void 0 ? void 0 : _data101.propertyType);
      data.noOfFloors = ((_data102 = data) === null || _data102 === void 0 ? void 0 : (_data102$additionalDe = _data102.additionalDetails) === null || _data102$additionalDe === void 0 ? void 0 : _data102$additionalDe.noOfFloors) || ((_data103 = data) === null || _data103 === void 0 ? void 0 : _data103.noOfFloors);
      data.noOofBasements = (_data104 = data) === null || _data104 === void 0 ? void 0 : (_data104$additionalDe = _data104.additionalDetails) === null || _data104$additionalDe === void 0 ? void 0 : _data104$additionalDe.noOofBasements;
      data.units = (_data105 = data) === null || _data105 === void 0 ? void 0 : (_data105$additionalDe = _data105.additionalDetails) === null || _data105$additionalDe === void 0 ? void 0 : _data105$additionalDe.unit;
      data.units[0].selfOccupied = (_data106 = data) === null || _data106 === void 0 ? void 0 : (_data106$additionalDe = _data106.additionalDetails) === null || _data106$additionalDe === void 0 ? void 0 : (_data106$additionalDe2 = _data106$additionalDe.unit[0]) === null || _data106$additionalDe2 === void 0 ? void 0 : _data106$additionalDe2.selfOccupied;
      data.units["-1"] = (_data107 = data) === null || _data107 === void 0 ? void 0 : (_data107$additionalDe = _data107.additionalDetails) === null || _data107$additionalDe === void 0 ? void 0 : _data107$additionalDe.basement1;
      data.units["-2"] = (_data108 = data) === null || _data108 === void 0 ? void 0 : (_data108$additionalDe = _data108.additionalDetails) === null || _data108$additionalDe === void 0 ? void 0 : _data108$additionalDe.basement2;
      data.landArea = {
        floorarea: (_data109 = data) === null || _data109 === void 0 ? void 0 : _data109.landArea
      };
    }
  }
  return data;
};
const EditProperty = ({
  parentRoute
}) => {
  var _Digit, _Digit$ComponentRegis, _Digit2, _Digit2$ComponentRegi;
  const queryClient = useQueryClient();
  const match = useRouteMatch();
  const {
    t
  } = useTranslation();
  const {
    pathname
  } = useLocation();
  const history = useHistory();
  let config = [];
  const [params, setParams, clearParams] = Digit.Hooks.useSessionStorage("PT_CREATE_PROPERTY", {});
  const stateId = Digit.ULBService.getStateId();
  let {
    data: commonFields,
    isLoading
  } = Digit.Hooks.pt.useMDMS(stateId, "PropertyTax", "CommonFieldsConfig");
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const acknowledgementIds = window.location.href.split("/").pop();
  const propertyIds = window.location.href.split("/").pop();
  let application = {};
  const updateProperty = window.location.href.includes("action=UPDATE");
  const typeOfProperty = window.location.href.includes("UPDATE") ? true : false;
  const ptProperty = JSON.parse(sessionStorage.getItem("pt-property")) || {};
  const {
    isLoading: isPTloading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearch({
    filters: updateProperty ? {
      propertyIds,
      isSearchInternal: true
    } : {
      acknowledgementIds,
      isSearchInternal: true
    }
  }, {
    filters: updateProperty ? {
      propertyIds,
      isSearchInternal: true
    } : {
      acknowledgementIds,
      isSearchInternal: true
    }
  });
  sessionStorage.setItem("isEditApplication", false);
  useEffect(() => {
    var _data$Properties;
    application = (data === null || data === void 0 ? void 0 : data.Properties) && data.Properties[0] && data.Properties[0];
    if (data && application && (data === null || data === void 0 ? void 0 : (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : _data$Properties.length) > 0) {
      application = data === null || data === void 0 ? void 0 : data.Properties[0];
      if (updateProperty) {
        application.isUpdateProperty = true;
        application.isEditProperty = false;
      } else {
        application.isUpdateProperty = typeOfProperty;
        application.isEditProperty = true;
      }
      sessionStorage.setItem("propertyInitialObject", JSON.stringify({
        ...application
      }));
      let propertyEditDetails = getPropertyEditDetails(application);
      setParams({
        ...params,
        ...propertyEditDetails
      });
    }
  }, [data]);
  const goNext = (skipStep, index, isAddMultiple, key) => {
    let currentPath = pathname.split("/").pop(),
      lastchar = currentPath.charAt(currentPath.length - 1),
      isMultiple = false,
      nextPage;
    if (Number(parseInt(currentPath)) || currentPath == "0" || currentPath == "-1") {
      if (currentPath == "-1" || currentPath == "-2") {
        currentPath = pathname.slice(0, -3);
        currentPath = currentPath.split("/").pop();
        isMultiple = true;
      } else {
        currentPath = pathname.slice(0, -2);
        currentPath = currentPath.split("/").pop();
        isMultiple = true;
      }
    } else {
      isMultiple = false;
    }
    if (!isNaN(lastchar)) {
      isMultiple = true;
    }
    let {
      nextStep = {}
    } = config.find(routeObj => routeObj.route === currentPath);
    if (typeof nextStep == "object" && nextStep != null && isMultiple != false) {
      if (nextStep[sessionStorage.getItem("ownershipCategory")]) {
        nextStep = `${nextStep[sessionStorage.getItem("ownershipCategory")]}/${index}`;
      } else if (nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]) {
        if (`${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}` === "un-occupied-area") {
          nextStep = `${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}/${index}`;
        } else {
          nextStep = `${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}`;
        }
      } else if (nextStep[sessionStorage.getItem("subusagetypevar")]) {
        nextStep = `${nextStep[sessionStorage.getItem("subusagetypevar")]}/${index}`;
      } else if (nextStep[sessionStorage.getItem("area")]) {
        if (`${nextStep[sessionStorage.getItem("area")]}` !== "map") {
          nextStep = `${nextStep[sessionStorage.getItem("area")]}/${index}`;
        } else {
          nextStep = `${nextStep[sessionStorage.getItem("area")]}`;
        }
      } else if (nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]) {
        nextStep = `${nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]}/${index}`;
      } else {
        nextStep = `${nextStep[sessionStorage.getItem("noOofBasements")]}/${index}`;
      }
    }
    if (typeof nextStep == "object" && nextStep != null && isMultiple == false) {
      if (nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")] && (nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")] == "map" || nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")] == "un-occupied-area")) {
        nextStep = `${nextStep[sessionStorage.getItem("IsAnyPartOfThisFloorUnOccupied")]}`;
      } else if (nextStep[sessionStorage.getItem("subusagetypevar")]) {
        nextStep = `${nextStep[sessionStorage.getItem("subusagetypevar")]}`;
      } else if (nextStep[sessionStorage.getItem("area")]) {
        nextStep = `${nextStep[sessionStorage.getItem("area")]}`;
      } else if (nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]) {
        nextStep = `${nextStep[sessionStorage.getItem("IsThisFloorSelfOccupied")]}`;
      } else if (nextStep[sessionStorage.getItem("PropertyType")]) {
        nextStep = `${nextStep[sessionStorage.getItem("PropertyType")]}`;
      } else if (nextStep[sessionStorage.getItem("isResdential")]) {
        nextStep = `${nextStep[sessionStorage.getItem("isResdential")]}`;
      }
    }
    let redirectWithHistory = history.push;
    if (skipStep) {
      redirectWithHistory = history.replace;
    }
    if (isAddMultiple) {
      nextStep = key;
    }
    if (nextStep === null) {
      return redirectWithHistory(`${match.path}/check`);
    }
    if (!isNaN(nextStep.split("/").pop())) {
      nextPage = `${match.path}/${nextStep}`;
    } else {
      nextPage = isMultiple && nextStep !== "map" ? `${match.path}/${nextStep}/${index}` : `${match.path}/${nextStep}`;
    }
    redirectWithHistory(nextPage);
  };
  const createProperty = async () => {
    history.push(`${match.path}/acknowledgement`);
  };
  function handleSelect(key, data, skipStep, index, isAddMultiple = false) {
    if (key === "owners") {
      let owners = params.owners || [];
      owners[index] = data;
      setParams({
        ...params,
        ...{
          [key]: [...owners]
        }
      });
    } else if (key === "units") {
      setParams({
        ...params,
        ...{
          [key]: [...data]
        }
      });
    } else {
      setParams({
        ...params,
        ...{
          [key]: {
            ...params[key],
            ...data
          }
        }
      });
    }
    goNext(skipStep, index, isAddMultiple, key);
  }
  const handleSkip = () => {};
  const handleMultiple = () => {};
  const onSuccess = () => {
    clearParams();
    queryClient.invalidateQueries("PT_CREATE_PROPERTY");
    sessionStorage.setItem("propertyInitialObject", JSON.stringify({}));
    sessionStorage.setItem("pt-property", JSON.stringify({}));
  };
  if (isLoading || isPTloading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  commonFields = newConfig;
  commonFields.forEach(obj => {
    config = config.concat(obj.body.filter(a => !a.hideInCitizen));
  });
  config.indexRoute = `info`;
  const CheckPage = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent('PTCheckPage');
  const PTAcknowledgement = (_Digit2 = Digit) === null || _Digit2 === void 0 ? void 0 : (_Digit2$ComponentRegi = _Digit2.ComponentRegistryService) === null || _Digit2$ComponentRegi === void 0 ? void 0 : _Digit2$ComponentRegi.getComponent('PTAcknowledgement');
  return /*#__PURE__*/React.createElement(Switch, null, config.map((routeObj, index) => {
    const {
      component,
      texts,
      inputs,
      key
    } = routeObj;
    const Component = typeof component === "string" ? Digit.ComponentRegistryService.getComponent(component) : component;
    return /*#__PURE__*/React.createElement(Route, {
      path: `${match.path}/${routeObj.route}`,
      key: index
    }, /*#__PURE__*/React.createElement(Component, {
      config: {
        texts,
        inputs,
        key
      },
      onSelect: handleSelect,
      onSkip: handleSkip,
      t: t,
      formData: params,
      onAdd: handleMultiple
    }));
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${match.path}/check`
  }, /*#__PURE__*/React.createElement(CheckPage, {
    onSubmit: createProperty,
    value: params
  })), /*#__PURE__*/React.createElement(Route, {
    path: `${match.path}/acknowledgement`
  }, /*#__PURE__*/React.createElement(PTAcknowledgement, {
    data: params,
    onSuccess: onSuccess
  })), /*#__PURE__*/React.createElement(Route, null, /*#__PURE__*/React.createElement(Redirect, {
    to: `${match.path}/${config.indexRoute}`
  })));
};

const newConfigMutate = [{
  head: "PT_MUTATION_TRANSFEROR_DETAILS",
  body: [{
    route: "info",
    component: "PropertyTax",
    nextStep: "transferer-details",
    hideInEmployee: true,
    key: "_Documents",
    isMutation: true,
    hideInEmployee: true
  }, {
    route: "search-property",
    component: "SearchPropertyCitizen",
    nextStep: "search-results",
    key: "searchParams",
    texts: {
      header: "SEARCH_PROPERTY",
      submitButtonLabel: "PT_HOME_SEARCH_RESULTS_BUTTON_SEARCH",
      text: "CS_PT_HOME_SEARCH_RESULTS_DESC"
    },
    inputs: [{
      label: "PT_HOME_SEARCH_RESULTS_OWN_MOB_LABEL",
      type: "mobileNumber",
      name: "mobileNumber",
      validation: {
        pattern: {
          value: /[6789][0-9]{9}/,
          message: "CORE_COMMON_MOBILE_ERROR"
        }
      },
      error: "CORE_COMMON_MOBILE_ERROR"
    }, {
      label: "PT_PROPERTY_UNIQUE_ID",
      description: "CS_PROPERTY_ID_FORMAT_MUST_BE",
      type: "text",
      name: "propertyIds",
      error: "ERR_INVALID_PROPERTY_ID",
      validation: {
        pattern: {
          value: /^[a-zA-Z0-9-]*$/i,
          message: "ERR_INVALID_PROPERTY_ID"
        }
      }
    }, {
      label: "PT_EXISTING_PROPERTY_ID",
      type: "text",
      name: "oldPropertyId",
      error: "ERR_INVALID_PROPERTY_ID",
      validation: {
        pattern: {
          value: /^[a-zA-Z0-9-]*$/i,
          message: "ERR_INVALID_PROPERTY_ID"
        }
      }
    }, {
      label: "PT_SEARCHPROPERTY_TABEL_OWNERNAME",
      type: "text",
      name: "name",
      validation: {
        pattern: {
          value: "[A-Za-z .`'-]{3,63}",
          message: "PAYMENT_INVALID_NAME"
        }
      },
      error: "PAYMENT_INVALID_NAME"
    }, {
      label: "PT_SEARCHPROPERTY_TABEL_DOOR_NO",
      type: "text",
      name: "doorNo",
      validation: {
        pattern: {
          value: "[A-Za-z0-9#,/ -()]{1,63}",
          message: "ERR_INVALID_DOOR_NO"
        }
      },
      error: "ERR_INVALID_DOOR_NO"
    }],
    action: "MUTATION",
    hideInEmployee: true
  }, {
    route: "search-results",
    component: "SearchResultCitizen",
    key: "searchResult",
    nextStep: "transferer-details",
    nextStep: "info",
    action: "MUTATION",
    hideInEmployee: true,
    texts: {
      header: "CS_SEARCH_RESULTS",
      actionButtonLabel: "PT_OWNERSHIP_TRANSFER",
      nextText: "PT_COMMON_NEXT"
    },
    labels: [{
      label: "PT_TOTAL_DUES",
      key: "total_due",
      noteStyle: {
        fontSize: "24px",
        fontWeight: "bold"
      }
    }, {
      label: "PT_PROPERTY_PTUID",
      key: "property_id"
    }, {
      label: "PT_OWNERSHIP_INFO_NAME",
      key: "owner_name"
    }, {
      label: "PT_PROPERTY_ADDRESS_SUB_HEADER",
      key: "property_address"
    }, {
      label: "PT_DUE_DATE",
      key: "bil_due__date"
    }]
  }, {
    route: "transferer-details",
    nextStep: "owner-ship-details@0",
    key: "transfererDetails",
    type: "component",
    withoutLabel: true,
    component: "TransfererDetails",
    texts: {
      nextText: "PT_COMMON_NEXT",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    labels: [{
      label: "PT_OWNERSHIP_INSTI_NAME",
      keyPath: ["searchResult", "property", "institution", "name"],
      ownershipType: "INSTITUTIONAL"
    }, {
      label: "PT_OWNERSHIP_INFO_DESIGNATION",
      keyPath: ["searchResult", "property", "institution", "designation"],
      ownershipType: "INSTITUTIONAL"
    }, {
      label: "PT_INSTI_OWNERSHIP_TYPE",
      keyPath: ["searchResult", "property", "institution", "type"],
      ownershipType: "INSTITUTIONAL"
    }, {
      label: "PT_OWNERSHIP_INFO_NAME_OF_AUTH",
      keyPath: ["searchResult", "property", "institution", "nameOfAuthorizedPerson"],
      ownershipType: "INSTITUTIONAL"
    }, {
      label: "PT_OWNERSHIP_INFO_TEL_NO",
      keyPath: ["searchResult", "property", "owners", "_index_", "altContactNumber"],
      ownershipType: "INSTITUTIONAL"
    }, {
      label: "PT_OWNERSHIP_INFO_NAME",
      keyPath: ["searchResult", "property", "owners", "_index_", "name"],
      ownershipType: "INDIVIDUAL"
    }, {
      label: "PT_GUARDIAN_NAME",
      keyPath: ["searchResult", "property", "owners", "_index_", "fatherOrHusbandName"],
      ownershipType: "INDIVIDUAL"
    }, {
      label: "PT_OWNERSHIP_INFO_MOBILE_NO",
      keyPath: ["searchResult", "property", "owners", "_index_", "mobileNumber"],
      ownershipType: "ALL"
    }, {
      label: "PT_OWNERSHIP_INFO_EMAIL_ID",
      keyPath: ["searchResult", "property", "owners", "_index_", "emailId"],
      ownershipType: "INDIVIDUAL"
    }, {
      label: "PT_OWNERSHIP_INFO_USER_CATEGORY",
      keyPath: ["searchResult", "property", "owners", "_index_", "ownerType"],
      ownershipType: "INDIVIDUAL"
    }, {
      label: "PT_OWNERSHIP_INFO_CORR_ADDR",
      keyPath: ["searchResult", "property", "owners", "_index_", "correspondenceAddress"],
      ownershipType: "ALL"
    }]
  }]
}, {
  head: "PT_MUTATION_TRANSFEREE_DETAILS_HEADER",
  body: [{
    type: "component",
    route: "owner-ship-details@0",
    isMandatory: true,
    component: "SelectOwnerShipDetails",
    texts: {
      headerCaption: "PT_MUTATION_TRANSFEREE_DETAILS_HEADER",
      header: "PT_PROVIDE_OWNERSHIP_DETAILS",
      cardText: "PT_PROVIDE_OWNERSHI_DETAILS_SUB_TEXT",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "ownershipCategory",
    withoutLabel: true,
    nextStep: {
      INSTITUTIONALPRIVATE: "inistitution-details",
      INSTITUTIONALGOVERNMENT: "inistitution-details",
      "INDIVIDUAL.SINGLEOWNER": "multiple-owners",
      "INDIVIDUAL.MULTIPLEOWNERS": "multiple-owners"
    }
  }, {
    route: "multiple-owners",
    component: "OwnerMutate",
    withoutLabel: true,
    nextStep: "is-mutatation-pending",
    key: "Owners",
    hideInEmployee: true
  }, {
    type: "component",
    route: "inistitution-details",
    isMandatory: true,
    component: "SelectInistitutionOwnerDetails",
    texts: {
      headerCaption: "",
      header: "PT_INSTITUTION_DETAILS_HEADER",
      cardText: "PT_FORM3_HEADER_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "institutional-owner-address",
    hideInEmployee: true
  }, {
    isMandatory: true,
    type: "component",
    route: "owner-details",
    key: "owners",
    component: "SelectOwnerDetails",
    texts: {
      headerCaption: "PT_MUTATION_TRANSFEREE_DETAILS_HEADER",
      header: "PT_OWNERSHIP_INFO_SUB_HEADER",
      cardText: "PT_FORM3_HEADER_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    withoutLabel: true,
    nextStep: "special-owner-category",
    hideInEmployee: true
  }, {
    type: "component",
    route: "special-owner-category",
    isMandatory: true,
    component: "SelectSpecialOwnerCategoryType",
    texts: {
      headerCaption: "PT_OWNERS_DETAILS",
      header: "PT_SPECIAL_OWNER_CATEGORY",
      cardText: "PT_FORM3_HEADER_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "owner-address",
    hideInEmployee: true
  }, {
    type: "component",
    route: "owner-address",
    isMandatory: true,
    component: "SelectOwnerAddress",
    texts: {
      headerCaption: "PT_OWNERS_DETAILS",
      header: "PT_OWNERS_ADDRESS",
      cardText: "",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "special-owner-category-proof",
    hideInEmployee: true
  }, {
    type: "component",
    component: "SelectAltContactNumber",
    key: "owners",
    withoutLabel: true,
    hideInEmployee: true
  }, {
    type: "component",
    route: "special-owner-category-proof",
    isMandatory: true,
    component: "SelectSpecialProofIdentity",
    texts: {
      headerCaption: "PT_OWNERS_DETAILS",
      header: "PT_SPECIAL_OWNER_CATEGORY_PROOF_HEADER",
      cardText: "",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "proof-of-identity",
    hideInEmployee: true
  }, {
    type: "component",
    route: "proof-of-identity",
    isMandatory: true,
    component: "SelectProofIdentity",
    texts: {
      headerCaption: "PT_OWNERS_DETAILS",
      header: "PT_PROOF_IDENTITY_HEADER",
      cardText: "",
      submitBarLabel: "PT_COMMON_NEXT",
      addMultipleText: "PT_COMMON_ADD_APPLICANT_LABEL"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: null,
    hideInEmployee: true
  }, {
    type: "component",
    route: "inistitution-details",
    isMandatory: true,
    component: "SelectInistitutionOwnerDetails",
    texts: {
      headerCaption: "",
      header: "PT_INSTITUTION_DETAILS_HEADER",
      cardText: "PT_FORM3_HEADER_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "institutional-owner-address",
    hideInEmployee: true
  }, {
    type: "component",
    route: "institutional-owner-address",
    isMandatory: true,
    component: "SelectOwnerAddress",
    texts: {
      headerCaption: "PT_OWNERS_DETAILS",
      header: "PT_OWNERS_ADDRESS",
      cardText: "",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "institutional-proof-of-identity",
    hideInEmployee: true
  }, {
    type: "component",
    route: "institutional-proof-of-identity",
    isMandatory: true,
    component: "SelectProofIdentity",
    texts: {
      headerCaption: "PT_OWNERS_DETAILS",
      header: "PT_PROOF_IDENTITY_HEADER",
      cardText: "",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    key: "owners",
    withoutLabel: true,
    nextStep: "is-mutatation-pending",
    hideInEmployee: true
  }, {
    type: "component",
    component: "PTEmployeeOwnershipDetails",
    key: "owners",
    withoutLabel: true,
    hideInCitizen: true
  }]
}, {
  head: "PT_MUTATION_DETAILS",
  body: [{
    key: "additionalDetails",
    texts: {
      headerCaption: "PT_MUTATION_DETAILS",
      header: "PT_MUTATION_COURT_PENDING_OR_NOT",
      cardText: "PT_MUTATION_PENDING_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    route: "is-mutatation-pending",
    withoutLabel: true,
    component: "IsMutationPending",
    nextStep: "is-under-govt-aquisition",
    type: "component"
  }, {
    key: "additionalDetails",
    route: "is-under-govt-aquisition",
    withoutLabel: true,
    texts: {
      headerCaption: "PT_MUTATION_DETAILS",
      header: "PT_MUTATION_STATE_ACQUISITION",
      cardText: "PT_STATE_AQUISTION_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    component: "UnderStateAquire",
    nextStep: "reason",
    type: "component"
  }]
}, {
  head: "PT_MUTATION_REGISTRATION_DETAILS",
  body: [{
    key: "additionalDetails",
    route: "reason",
    texts: {
      headerCaption: "PT_MUTATION_DETAILS",
      header: "PT_MUTATION_TRANSFER_REASON",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    withoutLabel: true,
    component: "PTReasonForTransfer",
    nextStep: "market-value",
    type: "component"
  }, {
    key: "additionalDetails",
    route: "market-value",
    texts: {
      headerCaption: "PT_MUTATION_DETAILS",
      header: "PT_MUTATION_MARKET_VALUE",
      cardText: "PT_MARKET_VALUE_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    withoutLabel: true,
    component: "PropertyMarketValue",
    nextStep: "registration-doc",
    type: "component"
  }, {
    key: "additionalDetails",
    route: "registration-doc",
    texts: {
      headerCaption: "PT_MUTATION_DETAILS",
      header: "PT_MUTATION_DOCUMENT_DETAILS",
      cardText: "PT_REGISTRATION_DOC_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    withoutLabel: true,
    component: "PTRegistrationDocument",
    nextStep: "comments",
    type: "component"
  }, {
    key: "additionalDetails",
    route: "comments",
    withoutLabel: true,
    component: "PTComments",
    texts: {
      headerCaption: "PT_MUTATION_DETAILS",
      header: "PT_MUTATION_REMARKS",
      cardText: "PT_REMARKS_MESSAGE",
      submitBarLabel: "PT_COMMON_NEXT"
    },
    nextStep: "transfer-reason-doc",
    type: "component"
  }, {
    type: "component",
    route: "transfer-reason-doc",
    component: "TransferProof",
    withoutLabel: true,
    texts: {
      headerCaption: "PT_TRANSFER_DOC_CAPTION",
      header: "PT_TRANSFER_DOC_HEADER",
      cardText: "PT_TRANSFER_DOC_MESSAGE",
      nextText: "PT_COMMONS_NEXT",
      submitBarLabel: "PT_COMMONS_NEXT"
    },
    key: "transferReasonProof",
    hideInEmployee: true,
    nextStep: "address-proof"
  }, {
    type: "component",
    route: "address-proof",
    component: "Proof",
    withoutLabel: true,
    texts: {
      headerCaption: "PT_PROPERTY_LOCATION_CAPTION",
      header: "Proof of Address",
      cardText: "",
      nextText: "PT_COMMONS_NEXT",
      submitBarLabel: "PT_COMMONS_NEXT"
    },
    key: "addressProof",
    hideInEmployee: true
  }, {
    component: "SelectDocuments",
    withoutLabel: true,
    key: "documents",
    type: "component"
  }]
}];

const CheckPage$1 = ({
  onSubmit,
  value: _value = {}
}) => {
  var _property$address, _property$address2, _property$address3, _property$address3$lo, _property$address4, _property$address5, _ownershipCategory$co, _additionalDetails$is, _additionalDetails$is2, _additionalDetails$re;
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [billAmount, setBillAmount] = useState(null);
  const [billStatus, setBillStatus] = useState(null);
  const {
    ownershipCategory,
    Constructiondetails,
    IsAnyPartOfThisFloorUnOccupied,
    propertyArea,
    selfOccupied,
    Owners,
    owners,
    isEditProperty,
    isUpdateProperty,
    searchResult,
    additionalDetails
  } = _value;
  const {
    property
  } = searchResult;
  const {
    address,
    propertyType,
    units = [{}],
    landarea,
    landArea,
    UnOccupiedArea
  } = property;
  useEffect(async () => {
    const res = await Digit.PaymentService.searchBill(tenantId, {
      Service: "PT.MUTATION",
      consumerCode: property === null || property === void 0 ? void 0 : property.acknowldgementNumber
    });
    if (!res.Bill.length) {
      var _res1$property$acknow;
      const res1 = await Digit.PTService.ptCalculateMutation({
        Property: {
          ...property,
          additionalDetails: {
            ...(property === null || property === void 0 ? void 0 : property.additionalDetails),
            ...additionalDetails,
            documentDate: new Date(additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.documentDate).getTime()
          }
        }
      }, tenantId);
      setBillAmount((res1 === null || res1 === void 0 ? void 0 : (_res1$property$acknow = res1[property === null || property === void 0 ? void 0 : property.acknowldgementNumber]) === null || _res1$property$acknow === void 0 ? void 0 : _res1$property$acknow.totalAmount) || t("CS_NA"));
      setBillStatus(t(`PT_MUT_BILL_ACTIVE`));
    } else {
      var _res$Bill$, _res$Bill$2, _res$Bill$2$status;
      setBillAmount((res === null || res === void 0 ? void 0 : (_res$Bill$ = res.Bill[0]) === null || _res$Bill$ === void 0 ? void 0 : _res$Bill$.totalAmount) || t("CS_NA"));
      setBillStatus(t(`PT_MUT_BILL_${res === null || res === void 0 ? void 0 : (_res$Bill$2 = res.Bill[0]) === null || _res$Bill$2 === void 0 ? void 0 : (_res$Bill$2$status = _res$Bill$2.status) === null || _res$Bill$2$status === void 0 ? void 0 : _res$Bill$2$status.toUpperCase()}`));
    }
  }, []);
  if (isPropertyselfoccupied(selfOccupied === null || selfOccupied === void 0 ? void 0 : selfOccupied.i18nKey)) {
    if (ispropertyunoccupied(IsAnyPartOfThisFloorUnOccupied === null || IsAnyPartOfThisFloorUnOccupied === void 0 ? void 0 : IsAnyPartOfThisFloorUnOccupied.i18nKey)) ;
  } else {
    if (!ispropertyunoccupied(IsAnyPartOfThisFloorUnOccupied === null || IsAnyPartOfThisFloorUnOccupied === void 0 ? void 0 : IsAnyPartOfThisFloorUnOccupied.i18nKey)) ;
  }
  if (isPropertyIndependent(propertyType)) ;
  const getCardSubHeadrStyles = () => {
    return {
      fontSize: "24px",
      fontWeight: "700",
      lineHeight: "28px",
      margin: "20px 0px 16px 0px"
    };
  };
  let documentDate = t("CS_NA");
  if (additionalDetails !== null && additionalDetails !== void 0 && additionalDetails.documentDate) {
    const date = new Date(additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.documentDate);
    const month = Digit.Utils.date.monthNames[date.getMonth()];
    documentDate = `${date.getDate()} ${month} ${date.getFullYear()}`;
  }
  const routeTo = jumpTo => location.href = jumpTo;
  const [agree, setAgree] = useState(false);
  const setdeclarationhandler = () => {
    setAgree(!agree);
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 4
  }) : null, /*#__PURE__*/React.createElement(Header, {
    styles: {
      fontSize: "32px",
      marginLeft: "8px"
    }
  }, t("WS_COMMON_SUMMARY")), /*#__PURE__*/React.createElement(Card, {
    style: {
      paddingRight: "16px"
    }
  }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_APPLICATION_NUMBER_LABEL"),
    text: property === null || property === void 0 ? void 0 : property.acknowldgementNumber,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_SEARCHPROPERTY_TABEL_PTUID"),
    text: property === null || property === void 0 ? void 0 : property.propertyId,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_APPLICATION_CHANNEL_LABEL"),
    text: t(`ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_${property === null || property === void 0 ? void 0 : property.channel}`)
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FEE_AMOUNT"),
    text: billAmount,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PAYMENT_STATUS"),
    text: billStatus,
    textStyle: {
      whiteSpace: "pre"
    }
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_PROPERTY_ADDRESS_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_PINCODE"),
    text: (property === null || property === void 0 ? void 0 : (_property$address = property.address) === null || _property$address === void 0 ? void 0 : _property$address.pincode) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_CITY"),
    text: (property === null || property === void 0 ? void 0 : (_property$address2 = property.address) === null || _property$address2 === void 0 ? void 0 : _property$address2.city) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_LOCALITY_OR_MOHALLA"),
    text: t(`${property === null || property === void 0 ? void 0 : (_property$address3 = property.address) === null || _property$address3 === void 0 ? void 0 : (_property$address3$lo = _property$address3.locality) === null || _property$address3$lo === void 0 ? void 0 : _property$address3$lo.area}`) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_STREET_NAME"),
    text: (property === null || property === void 0 ? void 0 : (_property$address4 = property.address) === null || _property$address4 === void 0 ? void 0 : _property$address4.street) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DOOR_OR_HOUSE"),
    text: (property === null || property === void 0 ? void 0 : (_property$address5 = property.address) === null || _property$address5 === void 0 ? void 0 : _property$address5.doorNo) || t("CS_NA")
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_MUTATION_TRANSFEROR_DETAILS")), /*#__PURE__*/React.createElement("div", null, Array.isArray(property === null || property === void 0 ? void 0 : property.owners) && (property === null || property === void 0 ? void 0 : property.owners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index,
    style: {
      margin: "none"
    }
  }, (property === null || property === void 0 ? void 0 : property.owners.length) != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " "), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_GUARDIAN_NAME"),
    text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
    text: (owner === null || owner === void 0 ? void 0 : owner.ownerType.toLowerCase()) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  })))))), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      justifyContent: "space-between"
    }
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_MUTATION_TRANSFEREE_DETAILS")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, null),
    onClick: () => routeTo(`/digit-ui/citizen/pt/property/property-mutation/owner-ship-details@0`)
  })), ownershipCategory !== null && ownershipCategory !== void 0 && (_ownershipCategory$co = ownershipCategory.code) !== null && _ownershipCategory$co !== void 0 && _ownershipCategory$co.includes("INSTITUTIONAL") ? /*#__PURE__*/React.createElement("div", null, Array.isArray(owners) && owners.map((transferorInstitution, index) => {
    var _transferorInstitutio;
    return /*#__PURE__*/React.createElement("div", {
      key: index
    }, owners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " "), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_INSTITUTION_NAME"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.inistitutionName) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_TYPE_OF_INSTITUTION"),
      text: `${t(transferorInstitution === null || transferorInstitution === void 0 ? void 0 : (_transferorInstitutio = transferorInstitution.inistitutetype) === null || _transferorInstitutio === void 0 ? void 0 : _transferorInstitutio.value)}` || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_NAME_AUTHORIZED_PERSON"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.name) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_LANDLINE_NUMBER"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.altContactNumber) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_MOBILE_NUMBER"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.mobileNumber) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_INSTITUTION_DESIGNATION"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.designation) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_MUTATION_AUTHORISED_EMAIL"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.emailId) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
      text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.correspondenceAddress) || t("CS_NA")
    })));
  })) : /*#__PURE__*/React.createElement("div", null, Array.isArray(Owners) && Owners.map((owner, index) => {
    var _owner$gender, _owner$relationship, _owner$ownerType;
    return /*#__PURE__*/React.createElement("div", {
      key: index
    }, Owners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " "), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
      text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_COMMON_GENDER_LABEL"),
      text: t(owner === null || owner === void 0 ? void 0 : (_owner$gender = owner.gender) === null || _owner$gender === void 0 ? void 0 : _owner$gender.i18nKey) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_MOBILE_NUMBER"),
      text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_GUARDIAN_NAME"),
      text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_RELATIONSHIP"),
      text: t(owner === null || owner === void 0 ? void 0 : (_owner$relationship = owner.relationship) === null || _owner$relationship === void 0 ? void 0 : _owner$relationship.i18nKey) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_MUTATION_AUTHORISED_EMAIL"),
      text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
      text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
      text: t(owner === null || owner === void 0 ? void 0 : (_owner$ownerType = owner.ownerType) === null || _owner$ownerType === void 0 ? void 0 : _owner$ownerType.i18nKey) || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_OWNERSHIP_TYPE"),
      text: `${property !== null && property !== void 0 && property.ownershipCategoryTemp ? t(`PT_OWNERSHIP_${property === null || property === void 0 ? void 0 : property.ownershipCategoryTemp}`) : t("CS_NA")}`
    })));
  })), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      justifyContent: "space-between"
    }
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_MUTATION_DETAILS")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, null),
    onClick: () => routeTo(`/digit-ui/citizen/pt/property/property-mutation/is-mutatation-pending`)
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_MUTATION_PENDING_COURT"),
    text: t(additionalDetails === null || additionalDetails === void 0 ? void 0 : (_additionalDetails$is = additionalDetails.isMutationInCourt) === null || _additionalDetails$is === void 0 ? void 0 : _additionalDetails$is.code) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DETAILS_COURT_CASE"),
    text: (additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.caseDetails) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROP_UNDER_GOV_AQUISITION"),
    text: t(additionalDetails === null || additionalDetails === void 0 ? void 0 : (_additionalDetails$is2 = additionalDetails.isPropertyUnderGovtPossession) === null || _additionalDetails$is2 === void 0 ? void 0 : _additionalDetails$is2.code) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DETAILS_GOV_AQUISITION"),
    text: (additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.govtAcquisitionDetails) || t("CS_NA")
  }))), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      justifyContent: "space-between"
    }
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_REGISTRATION_DETAILS")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, null),
    onClick: () => routeTo(`/digit-ui/citizen/pt/property/property-mutation/reason`)
  })), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REASON_PROP_TRANSFER"),
    text: `${t(additionalDetails === null || additionalDetails === void 0 ? void 0 : (_additionalDetails$re = additionalDetails.reasonForTransfer) === null || _additionalDetails$re === void 0 ? void 0 : _additionalDetails$re.i18nKey)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROP_MARKET_VALUE"),
    text: (additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.marketValue) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REG_NUMBER"),
    text: (additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.documentNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_DOC_ISSUE_DATE"),
    text: documentDate
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REG_DOC_VALUE"),
    text: (additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.documentValue) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_REMARKS"),
    text: (additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.remarks) || t("CS_NA")
  })), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      justifyContent: "space-between"
    }
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_COMMON_DOCS")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, null),
    onClick: () => routeTo(`/digit-ui/citizen/pt/property/property-mutation/transfer-reason-doc`)
  })), /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "0 important"
    }
  }, Array.isArray(property === null || property === void 0 ? void 0 : property.documents) ? (property === null || property === void 0 ? void 0 : property.documents.length) > 0 && /*#__PURE__*/React.createElement(PropertyDocument, {
    property: property
  }) : /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    text: t("PT_NO_DOCUMENTS_MSG")
  }))), /*#__PURE__*/React.createElement(CheckBox, {
    label: t("PT_MUTATION_FINAL_DECLARATION_MESSAGE"),
    onChange: setdeclarationhandler,
    styles: {
      height: "auto",
      margin: '2rem 0'
    }
  }), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_COMMON_BUTTON_SUBMIT"),
    onSubmit: onSubmit,
    disabled: !agree
  })));
};

const MutationCitizen = props => {
  var _Digit, _Digit$ComponentRegis;
  const {
    t
  } = useTranslation();
  const match = useRouteMatch();
  const {
    pathname
  } = useLocation();
  const [params, setParams, clearParams] = Digit.Hooks.useSessionStorage("PT_MUTATE_PROPERTY", {});
  const history = useHistory();
  const [submit, setSubmit] = useState(false);
  const [formData, setFormData] = useState(null);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    data: mutationDocs,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "PropertyTax", "MutationDocuments");
  const selectParams = (key, data) => {
    setParams(prev => ({
      ...prev,
      [key]: data
    }));
  };
  let config = [];
  newConfigMutate.forEach(obj => {
    config = config.concat(obj.body.filter(a => !a.hideInCitizen));
  });
  function handleSelect(key, data, skipStep, index, isAddMultiple = false, configObj) {
    let pathArray = pathname.split("/");
    let currentPath = pathArray.pop();
    if (configObj !== null && configObj !== void 0 && configObj.nesting) {
      for (let i = 0; i < (configObj === null || configObj === void 0 ? void 0 : configObj.nesting); i++) {
        currentPath = pathArray.pop();
      }
    }
    let activeRouteObj = config.filter(e => e.route === currentPath)[0];
    selectParams(key, data);
    let {
      queryParams
    } = configObj || {};
    let queryString = queryParams ? `?${Object.keys(queryParams).map(_key => `${_key}=${queryParams[_key]}`).join("&")}` : "";
    if (!activeRouteObj.nextStep) {
      setSubmit(true);
    } else if (typeof activeRouteObj.nextStep === "string") {
      if (skipStep) history.replace(`${pathArray.join("/")}/${activeRouteObj.nextStep}${queryString}`);else history.push(`${pathArray.join("/")}/${activeRouteObj.nextStep}${queryString}`);
    } else if (typeof activeRouteObj.nextStep === "object") {
      let nextStep = activeRouteObj.nextStep[configObj === null || configObj === void 0 ? void 0 : configObj.routeKey];
      if (skipStep) history.replace(`${pathArray.join("/")}/${nextStep}${queryString}`);else history.push(`${pathArray.join("/")}/${nextStep}${queryString}`);
    }
  }
  useEffect(() => {
    if (submit) {
      handleSubmit();
    }
  }, [submit]);
  const handleSubmit = () => {
    var _originalProperty$own, _additionalDetails$is, _originalProperty$doc, _originalProperty$doc2;
    const originalProperty = params.searchResult.property;
    const {
      additionalDetails,
      ownershipCategory,
      addressProof,
      transferReasonProof
    } = params;
    const ownersArray = ownershipCategory !== null && ownershipCategory !== void 0 && ownershipCategory.code.includes("INDIVIDUAL") ? params.Owners : params.owners;
    const ownerDocs = ownersArray.map(owner => {
      return Object.keys(owner.documents).map(key => {
        const {
          documentType,
          fileStoreId
        } = owner.documents[key];
        return {
          documentType: documentType.code,
          fileStoreId
        };
      });
    }).flat();
    const otherDocs = [addressProof, transferReasonProof].map((e, index) => {
      const {
        documentType,
        fileStoreId
      } = e;
      return {
        documentType: index === 1 ? documentType.code.split(".")[2] : documentType.code,
        fileStoreId
      };
    });
    const newDocs = [...ownerDocs, ...otherDocs];
    originalProperty.owners = originalProperty === null || originalProperty === void 0 ? void 0 : originalProperty.owners.filter(owner => owner.status == "ACTIVE");
    const data = {
      Property: {
        ...params.searchResult.property,
        creationReason: "MUTATION",
        owners: [...((_originalProperty$own = originalProperty.owners) === null || _originalProperty$own === void 0 ? void 0 : _originalProperty$own.map(e => ({
          ...e,
          status: "INACTIVE"
        }))), ...ownersArray.map(owner => {
          var _owner$gender, _owner$ownerType, _owner$relationship, _owner$inistitutetype;
          return {
            ...owner,
            documents: Object.keys(owner.documents).map(key => {
              const {
                documentType,
                fileStoreId
              } = owner.documents[key];
              return {
                documentType: documentType.code,
                fileStoreId
              };
            }),
            gender: (_owner$gender = owner.gender) === null || _owner$gender === void 0 ? void 0 : _owner$gender.code,
            ownerType: ((_owner$ownerType = owner.ownerType) === null || _owner$ownerType === void 0 ? void 0 : _owner$ownerType.code) || "NONE",
            relationship: (_owner$relationship = owner.relationship) === null || _owner$relationship === void 0 ? void 0 : _owner$relationship.code,
            inistitutetype: owner === null || owner === void 0 ? void 0 : (_owner$inistitutetype = owner.inistitutetype) === null || _owner$inistitutetype === void 0 ? void 0 : _owner$inistitutetype.value,
            landlineNumber: owner === null || owner === void 0 ? void 0 : owner.altContactNumber,
            status: "ACTIVE"
          };
        })],
        additionalDetails: {
          ...additionalDetails,
          isMutationInCourt: (_additionalDetails$is = additionalDetails.isMutationInCourt) === null || _additionalDetails$is === void 0 ? void 0 : _additionalDetails$is.code,
          reasonForTransfer: additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.reasonForTransfer.code,
          isPropertyUnderGovtPossession: additionalDetails.isPropertyUnderGovtPossession.code,
          documentDate: new Date(additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.documentDate).getTime(),
          marketValue: Number(additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.marketValue)
        },
        ownershipCategory: ownershipCategory.code,
        documents: [...(originalProperty !== null && originalProperty !== void 0 && originalProperty.documents && (originalProperty === null || originalProperty === void 0 ? void 0 : (_originalProperty$doc = originalProperty.documents) === null || _originalProperty$doc === void 0 ? void 0 : _originalProperty$doc.length) > 0 ? originalProperty === null || originalProperty === void 0 ? void 0 : (_originalProperty$doc2 = originalProperty.documents) === null || _originalProperty$doc2 === void 0 ? void 0 : _originalProperty$doc2.map(oldDoc => {
          var _mutationDocs$Propert;
          if (mutationDocs !== null && mutationDocs !== void 0 && (_mutationDocs$Propert = mutationDocs.PropertyTax) !== null && _mutationDocs$Propert !== void 0 && _mutationDocs$Propert.MutationDocuments.some(mut => oldDoc.documentType.includes(mut.code))) {
            return {
              ...oldDoc,
              status: "INACTIVE"
            };
          } else return oldDoc;
        }) : []), ...newDocs],
        workflow: {
          action: "OPEN",
          businessService: "PT.MUTATION",
          moduleName: "PT",
          tenantId: originalProperty.tenantId
        }
      }
    };
    if (!(ownershipCategory !== null && ownershipCategory !== void 0 && ownershipCategory.code.includes("INDIVIDUAL"))) {
      var _data$Property, _ownersArray$0$inisti, _data$Property$owners;
      data.Property.institution = {
        nameOfAuthorizedPerson: ownersArray[0].name,
        name: ownersArray[0].inistitutionName,
        designation: ownersArray[0].designation,
        tenantId: data === null || data === void 0 ? void 0 : (_data$Property = data.Property) === null || _data$Property === void 0 ? void 0 : _data$Property.address.tenantId,
        type: (_ownersArray$0$inisti = ownersArray[0].inistitutetype) === null || _ownersArray$0$inisti === void 0 ? void 0 : _ownersArray$0$inisti.value
      };
      data.Property.owners = (_data$Property$owners = data.Property.owners) === null || _data$Property$owners === void 0 ? void 0 : _data$Property$owners.map(owner => owner.status === "INACTIVE" ? {
        ...owner,
        altContactNumber: ownersArray[0].altContactNumber
      } : owner);
    } else {
      delete data.Property.institution;
    }
    setFormData(data);
  };
  useEffect(() => {
    if (formData) history.push(`${match.path}/check`);
  }, [formData]);
  const mutateProperty = () => {
    history.push(`${match.path}/acknowledgement`);
  };
  const handleSkip = () => {};
  config.indexRoute = "search-property";
  const PTAcknowledgement = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("PTAcknowledgement");
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Switch, null, config.map((routeObj, index) => {
    const {
      component
    } = routeObj;
    const Component = typeof component === "string" ? Digit.ComponentRegistryService.getComponent(component) : component;
    return /*#__PURE__*/React.createElement(Route, {
      path: `${match.path}/${routeObj.route}`,
      key: index
    }, Component ? /*#__PURE__*/React.createElement(Component, {
      config: routeObj,
      onSelect: handleSelect,
      onSkip: handleSkip,
      t: t,
      formData: params,
      clearParams: () => clearParams()
    }) : /*#__PURE__*/React.createElement("div", null, "Component not found"));
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${match.path}/check`
  }, /*#__PURE__*/React.createElement(CheckPage$1, {
    onSubmit: mutateProperty,
    value: params
  })), /*#__PURE__*/React.createElement(Route, {
    path: `${match.path}/acknowledgement`
  }, /*#__PURE__*/React.createElement(PTAcknowledgement, {
    data: formData,
    onSuccess: () => {
      clearParams();
      setFormData(null);
    }
  })), /*#__PURE__*/React.createElement(Route, null, /*#__PURE__*/React.createElement(Redirect, {
    to: `${match.path}/${config.indexRoute}`
  }))));
};

const setBillData = async (tenantId, propertyIds, updatefetchBillData, updateCanFetchBillData) => {
  var _assessmentData$Asses;
  const assessmentData = await Digit.PTService.assessmentSearch({
    tenantId,
    filters: {
      propertyIds
    }
  });
  let billData = {};
  if ((assessmentData === null || assessmentData === void 0 ? void 0 : (_assessmentData$Asses = assessmentData.Assessments) === null || _assessmentData$Asses === void 0 ? void 0 : _assessmentData$Asses.length) > 0) {
    billData = await Digit.PaymentService.fetchBill(tenantId, {
      businessService: "PT",
      consumerCode: propertyIds
    });
  }
  updatefetchBillData(billData);
  updateCanFetchBillData({
    loading: false,
    loaded: true,
    canLoad: true
  });
};
const getBillAmount = (fetchBillData = null) => {
  var _fetchBillData$Bill$;
  if (fetchBillData == null) return "CS_NA";
  return fetchBillData ? fetchBillData !== null && fetchBillData !== void 0 && fetchBillData.Bill && fetchBillData.Bill[0] ? (_fetchBillData$Bill$ = fetchBillData.Bill[0]) === null || _fetchBillData$Bill$ === void 0 ? void 0 : _fetchBillData$Bill$.totalAmount : "0" : "0";
};
const PropertyInformation = () => {
  var _property$documents, _units$, _Digit, _Digit$ComponentRegis, _property$address, _property$address2, _property$address2$lo, _property$address3, _property$address4;
  const {
    t
  } = useTranslation();
  const {
    propertyIds
  } = useParams();
  var isMobile = window.Digit.Utils.browser.isMobile();
  const [enableAudit, setEnableAudit] = useState(false);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    data: UpdateNumberConfig
  } = Digit.Hooks.useCommonMDMS(Digit.ULBService.getStateId(), "PropertyTax", ["UpdateNumber"], {
    select: data => {
      var _data$PropertyTax, _data$PropertyTax$Upd;
      return data === null || data === void 0 ? void 0 : (_data$PropertyTax = data.PropertyTax) === null || _data$PropertyTax === void 0 ? void 0 : (_data$PropertyTax$Upd = _data$PropertyTax.UpdateNumber) === null || _data$PropertyTax$Upd === void 0 ? void 0 : _data$PropertyTax$Upd[0];
    },
    retry: false,
    enable: false
  });
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearch({
    filters: {
      propertyIds,
      tenantId
    }
  }, {
    filters: {
      propertyIds,
      tenantId
    }
  });
  const {
    isLoading: auditDataLoading,
    isError: isAuditError,
    data: auditData
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds,
      audit: true
    }
  }, {
    enabled: enableAudit,
    select: d => {
      var _d$Properties$filter;
      return (_d$Properties$filter = d.Properties.filter(e => e.status === "ACTIVE")) === null || _d$Properties$filter === void 0 ? void 0 : _d$Properties$filter.sort((a, b) => b.auditDetails.lastModifiedTime - a.auditDetails.lastModifiedTime);
    }
  });
  const [popup, showPopup] = useState(false);
  const [billData, updateCanFetchBillData] = useState({
    loading: false,
    loaded: false,
    canLoad: false
  });
  const [fetchBillData, updatefetchBillData] = useState({});
  const [property, setProperty] = useState(() => (data === null || data === void 0 ? void 0 : data.Properties[0]) || " ");
  const mutation = Digit.Hooks.pt.usePropertyAPI(property === null || property === void 0 ? void 0 : property.tenantId, false);
  let specialCategoryDoc = [];
  property === null || property === void 0 ? void 0 : (_property$documents = property.documents) === null || _property$documents === void 0 ? void 0 : _property$documents.filter(ob => ob.documentType.includes("SPECIALCATEGORYPROOF")).map(doc => {
    specialCategoryDoc.push(doc);
  });
  useEffect(() => {
    if (data) {
      var _data$Properties$;
      setProperty(data === null || data === void 0 ? void 0 : data.Properties[0]);
      if ((data === null || data === void 0 ? void 0 : (_data$Properties$ = data.Properties[0]) === null || _data$Properties$ === void 0 ? void 0 : _data$Properties$.status) !== "ACTIVE") setEnableAudit(true);
    }
  }, [data]);
  useEffect(() => {
    if (auditData !== null && auditData !== void 0 && auditData[0]) {
      var _property$owners;
      const property = (auditData === null || auditData === void 0 ? void 0 : auditData[0]) || {};
      property.owners = property === null || property === void 0 ? void 0 : (_property$owners = property.owners) === null || _property$owners === void 0 ? void 0 : _property$owners.filter(owner => owner.status == "ACTIVE");
      setProperty(property);
    }
  }, [enableAudit, auditData]);
  sessionStorage.setItem("pt-property", JSON.stringify(property));
  let docs = [];
  docs = property === null || property === void 0 ? void 0 : property.documents;
  let units = [];
  let owners = [];
  owners = property === null || property === void 0 ? void 0 : property.owners;
  units = property === null || property === void 0 ? void 0 : property.units;
  units && units.sort((x, y) => {
    let a = x.floorNo,
      b = y.floorNo;
    if (x.floorNo < 0) {
      a = x.floorNo * -20;
    }
    if (y.floorNo < 0) {
      b = y.floorNo * -20;
    }
    if (a > b) {
      return 1;
    } else {
      return -1;
    }
  });
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if ((property === null || property === void 0 ? void 0 : property.status) == "ACTIVE" && !billData.loading && !billData.loaded && !billData.canLoad) {
    updateCanFetchBillData({
      loading: false,
      loaded: false,
      canLoad: true
    });
  }
  if (billData !== null && billData !== void 0 && billData.canLoad && !billData.loading && !billData.loaded) {
    updateCanFetchBillData({
      loading: true,
      loaded: false,
      canLoad: true
    });
    setBillData((property === null || property === void 0 ? void 0 : property.tenantId) || tenantId, propertyIds, updatefetchBillData, updateCanFetchBillData);
  }
  let flrno,
    i = 0;
  flrno = units && ((_units$ = units[0]) === null || _units$ === void 0 ? void 0 : _units$.floorNo);
  const ActionButton = ({
    jumpTo,
    style
  }) => {
    const {
      t
    } = useTranslation();
    const history = useHistory();
    function routeTo() {
      history.push(jumpTo);
    }
    return /*#__PURE__*/React.createElement(LinkButton, {
      style: style,
      label: t("PT_OWNER_HISTORY"),
      className: "check-page-link-button",
      onClick: routeTo
    });
  };
  const UpdatePropertyNumberComponent = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("UpdateNumber");
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, t("PT_PROPERTY_INFORMATION")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_PTUID"),
    text: `${property.propertyId || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("CS_COMMON_TOTAL_AMOUNT_DUE"),
    text: `₹${t(getBillAmount(fetchBillData))}`
  })), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_PROPERTY_ADDRESS_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_PINCODE"),
    text: `${((_property$address = property.address) === null || _property$address === void 0 ? void 0 : _property$address.pincode) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_CITY"),
    text: `${t(getCityLocale(property === null || property === void 0 ? void 0 : property.tenantId)) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_LOCALITY_OR_MOHALLA"),
    text: `${t(property === null || property === void 0 ? void 0 : (_property$address2 = property.address) === null || _property$address2 === void 0 ? void 0 : (_property$address2$lo = _property$address2.locality) === null || _property$address2$lo === void 0 ? void 0 : _property$address2$lo.name)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDRESS_STREET_NAME"),
    text: `${((_property$address3 = property.address) === null || _property$address3 === void 0 ? void 0 : _property$address3.street) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_PROPERTY_ADDR_DOOR_HOUSE_NO"),
    text: `${((_property$address4 = property.address) === null || _property$address4 === void 0 ? void 0 : _property$address4.doorNo) || t("CS_NA")}`
  })), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_PROPERTY_ASSESSMENT_DETAILS_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_COMMON_PROPERTY_TYPE"),
    text: `${t(getPropertyTypeLocale(property === null || property === void 0 ? void 0 : property.propertyType))}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_ASSESMENT1_PLOT_SIZE"),
    text: `${property.landArea} sq.ft` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("PT_ASSESMENT_INFO_NO_OF_FLOOR"),
    text: `${property.noOfFloors || t("CS_NA")}`
  })), /*#__PURE__*/React.createElement("div", null, Array.isArray(units) && units.length > 0 && units.map((unit, index) => {
    var _property$usageCatego, _property$usageCatego2, _unit$constructionDet;
    return /*#__PURE__*/React.createElement("div", {
      key: index
    }, (flrno !== (unit === null || unit === void 0 ? void 0 : unit.floorNo) ? i = 1 : i = i + 1) && i === 1 && /*#__PURE__*/React.createElement(CardSubHeader, null, t(`PROPERTYTAX_FLOOR_${unit === null || unit === void 0 ? void 0 : unit.floorNo}`)), /*#__PURE__*/React.createElement("div", {
      style: {
        border: "groove",
        marginBottom: "10px"
      }
    }, /*#__PURE__*/React.createElement(CardSubHeader, null, t("ES_APPLICATION_DETAILS_UNIT"), " ", i), (flrno = unit === null || unit === void 0 ? void 0 : unit.floorNo) > -5 && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_ASSESSMENT_UNIT_USAGE_TYPE"),
      text: `${t((property.usageCategory !== "RESIDENTIAL" ? "COMMON_PROPUSGTYPE_NONRESIDENTIAL_" : "COMMON_PROPUSGTYPE_") + (property !== null && property !== void 0 && (_property$usageCatego = property.usageCategory) !== null && _property$usageCatego !== void 0 && _property$usageCatego.split(".")[1] ? property === null || property === void 0 ? void 0 : (_property$usageCatego2 = property.usageCategory) === null || _property$usageCatego2 === void 0 ? void 0 : _property$usageCatego2.split(".")[1] : property.usageCategory))}` || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_OCCUPANY_TYPE_LABEL"),
      text: `${t("PROPERTYTAX_OCCUPANCYTYPE_" + (unit === null || unit === void 0 ? void 0 : unit.occupancyType))}` || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_BUILTUP_AREA_LABEL"),
      text: `${`${unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea} sq.ft` || t("CS_NA")}`
    }), unit.occupancyType == "RENTED" && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM2_TOTAL_ANNUAL_RENT"),
      text: `${(unit === null || unit === void 0 ? void 0 : unit.arv) && `₹${unit === null || unit === void 0 ? void 0 : unit.arv}` || t("CS_NA")}`
    }))));
  })), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_COMMON_PROPERTY_OWNERSHIP_DETAILS_HEADER")), /*#__PURE__*/React.createElement("div", null, Array.isArray(owners) && owners.map((owner, index) => {
    var _property$institution, _property$institution2, _property$institution3, _property$institution4, _Digit$UserService$ge, _Digit$UserService$ge2, _Digit$UserService$ge3, _Digit$UserService$ge4, _property$institution5, _property$institution6, _specialCategoryDoc$i, _specialCategoryDoc$i2;
    return /*#__PURE__*/React.createElement("div", {
      key: index
    }, /*#__PURE__*/React.createElement(CardSubHeader, null, owners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, (property === null || property === void 0 ? void 0 : property.institution) && (property === null || property === void 0 ? void 0 : (_property$institution = property.institution) === null || _property$institution === void 0 ? void 0 : _property$institution.name) && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_INSTITUTION_NAME"),
      text: `${(property === null || property === void 0 ? void 0 : (_property$institution2 = property.institution) === null || _property$institution2 === void 0 ? void 0 : _property$institution2.name) || t("CS_NA")}`
    }), (property === null || property === void 0 ? void 0 : property.institution) && (property === null || property === void 0 ? void 0 : (_property$institution3 = property.institution) === null || _property$institution3 === void 0 ? void 0 : _property$institution3.type) && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_INSTITUTION_TYPE"),
      text: `${t(`COMMON_MASTERS_OWNERSHIPCATEGORY_${property === null || property === void 0 ? void 0 : (_property$institution4 = property.institution) === null || _property$institution4 === void 0 ? void 0 : _property$institution4.type}`) || t("CS_NA")}`
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
      textStyle: isMobile ? {
        marginLeft: "27%",
        marginRight: "5%",
        wordBreak: "break-word"
      } : {
        marginLeft: "18%"
      },
      text: `${(owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")}`,
      actionButtonStyle: {
        marginRight: "-10px"
      },
      actionButton: /*#__PURE__*/React.createElement(ActionButton, {
        style: {
          marginRight: "-10px"
        },
        jumpTo: `/digit-ui/citizen/pt/property/owner-history/${property.tenantId}/${property.propertyId}`
      })
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_COMMON_GENDER_LABEL"),
      text: `${owner !== null && owner !== void 0 && owner.gender ? owner === null || owner === void 0 ? void 0 : owner.gender.toLowerCase() : t("CS_NA")}`
    }), (property === null || property === void 0 ? void 0 : property.institution) && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_LANDLINE_NUMBER_FLOATING_LABEL"),
      text: `${(owner === null || owner === void 0 ? void 0 : owner.altContactNumber) || t("CS_NA")}`
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_MOBILE_NUMBER"),
      text: `${t(owner === null || owner === void 0 ? void 0 : owner.mobileNumber)}` || t("CS_NA"),
      textStyle: isMobile ? {
        marginLeft: "16%"
      } : {
        marginLeft: "12%"
      },
      actionButton: (property === null || property === void 0 ? void 0 : property.status) === "ACTIVE" && (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) && ((_Digit$UserService$ge = Digit.UserService.getUser()) === null || _Digit$UserService$ge === void 0 ? void 0 : (_Digit$UserService$ge2 = _Digit$UserService$ge.info) === null || _Digit$UserService$ge2 === void 0 ? void 0 : _Digit$UserService$ge2.mobileNumber) && owner.mobileNumber === ((_Digit$UserService$ge3 = Digit.UserService.getUser()) === null || _Digit$UserService$ge3 === void 0 ? void 0 : (_Digit$UserService$ge4 = _Digit$UserService$ge3.info) === null || _Digit$UserService$ge4 === void 0 ? void 0 : _Digit$UserService$ge4.mobileNumber) && /*#__PURE__*/React.createElement("div", {
        onClick: () => showPopup({
          name: owner === null || owner === void 0 ? void 0 : owner.name,
          mobileNumber: owner === null || owner === void 0 ? void 0 : owner.mobileNumber,
          ownerIndex: index
        })
      }, /*#__PURE__*/React.createElement(EditIcon, null))
    }), (property === null || property === void 0 ? void 0 : property.institution) && (property === null || property === void 0 ? void 0 : (_property$institution5 = property.institution) === null || _property$institution5 === void 0 ? void 0 : _property$institution5.designation) && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("Designation"),
      text: `${(property === null || property === void 0 ? void 0 : (_property$institution6 = property.institution) === null || _property$institution6 === void 0 ? void 0 : _property$institution6.designation) || t("CS_NA")}`
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_GUARDIAN_NAME"),
      text: `${(owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")}`
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_OWNERSHIP_TYPE"),
      text: `${property !== null && property !== void 0 && property.ownershipCategory ? t(`PT_OWNERSHIP_${property === null || property === void 0 ? void 0 : property.ownershipCategory}`) : t("CS_NA")}`
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_FORM3_RELATIONSHIP"),
      text: `${(owner === null || owner === void 0 ? void 0 : owner.relationship) || t("CS_NA")}`
    }), specialCategoryDoc && specialCategoryDoc.length > 0 && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_SPL_CAT_DOC_TYPE"),
      text: `${t(stringReplaceAll((_specialCategoryDoc$i = specialCategoryDoc[index]) === null || _specialCategoryDoc$i === void 0 ? void 0 : _specialCategoryDoc$i.documentType, ".", "_"))}` || t("NA")
    }), specialCategoryDoc && specialCategoryDoc.length > 0 && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_SPL_CAT_DOC_ID"),
      text: `${t((_specialCategoryDoc$i2 = specialCategoryDoc[index]) === null || _specialCategoryDoc$i2 === void 0 ? void 0 : _specialCategoryDoc$i2.id)}` || t("CS_NA")
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_MUTATION_AUTHORISED_EMAIL"),
      text: owner !== null && owner !== void 0 && owner.emailId ? owner === null || owner === void 0 ? void 0 : owner.emailId : `${t("CS_NA")}`
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
      text: `${t(owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress)}` || t("CS_NA")
    }), (specialCategoryDoc === null || specialCategoryDoc === void 0 ? void 0 : specialCategoryDoc.length) == 0 && /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: t("PT_SPL_CAT"),
      text: t("CS_NONE")
    })));
  })), /*#__PURE__*/React.createElement(CardSubHeader, null, t("PT_COMMON_DOCS")), /*#__PURE__*/React.createElement("div", null, Array.isArray(docs) ? docs.length > 0 && /*#__PURE__*/React.createElement(PropertyDocument, {
    property: property
  }) : /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    text: t("PT_NO_DOCUMENTS_MSG")
  }))), /*#__PURE__*/React.createElement("div", null, (property === null || property === void 0 ? void 0 : property.status) === "ACTIVE" && !enableAudit && /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "1em",
      bottom: "0px",
      width: "100%",
      marginBottom: "1.2em"
    }
  }, /*#__PURE__*/React.createElement(Link, {
    to: {
      pathname: `/digit-ui/citizen/pt/property/edit-application/action=UPDATE/${property.propertyId}`
    }
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_UPDATE_PROPERTY_BUTTON")
  })))), popup && /*#__PURE__*/React.createElement(PopUp, {
    className: "updatenumber-warper-citizen"
  }, /*#__PURE__*/React.createElement(UpdatePropertyNumberComponent, {
    showPopup: showPopup,
    name: popup === null || popup === void 0 ? void 0 : popup.name,
    UpdateNumberConfig: UpdateNumberConfig,
    mobileNumber: popup === null || popup === void 0 ? void 0 : popup.mobileNumber,
    t: t,
    onValidation: (data, showToast) => {
      let newProp = {
        ...property
      };
      newProp.owners[popup === null || popup === void 0 ? void 0 : popup.ownerIndex].mobileNumber = data.mobileNumber;
      newProp.creationReason = "UPDATE";
      newProp.workflow = null;
      mutation.mutate({
        Property: newProp
      }, {
        onError: () => {},
        onSuccess: async successRes => {
          showToast();
          setTimeout(() => {
            window.location.reload();
          }, 3000);
        }
      });
    }
  })))));
};

const ProvideFloorNo = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _floordata$PropertyTa;
  let index = window.location.href.split("/").pop();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const [Floorno, setFloorno] = useState((formData === null || formData === void 0 ? void 0 : formData.Floorno) || "");
  const {
    data: floordata
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "Floor") || {};
  let floorlist = [];
  floorlist = floordata === null || floordata === void 0 ? void 0 : (_floordata$PropertyTa = floordata.PropertyTax) === null || _floordata$PropertyTa === void 0 ? void 0 : _floordata$PropertyTa.Floor;
  let i;
  let data = [];
  function getfloorlistdata(floorlist) {
    for (i = 0; Array.isArray(floorlist) && i < floorlist.length; i++) {
      data.push({
        i18nKey: "PROPERTYTAX_FLOOR_" + stringReplaceAll(floorlist[i].code, "-", "_")
      });
    }
    return data;
  }
  const onSkip = () => onSelect();
  function selectFloorno(value) {
    setFloorno(value);
  }
  function goNext() {
    onSelect(config.key, Floorno);
  }
  return /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !Floorno
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_FLOOR_NUMBER_LABEL")), /*#__PURE__*/React.createElement("div", {
    className: "form-pt-dropdown-only"
  }, data && /*#__PURE__*/React.createElement(RadioOrSelect, {
    t: t,
    optionKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: getfloorlistdata(floorlist) || {},
    selectedOption: Floorno,
    onSelect: selectFloorno
  })));
};

const returnTransferData = (value, rowContainerStyles) => {
  const {
    t
  } = useTranslation();
  return Object.keys(value).map(key => {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Row, {
      rowContainerStyle: rowContainerStyles,
      label: t(key),
      text: `${value[key] || "NA"}`
    }));
  });
};
const TransferDetails = ({
  data,
  showHorizontalBar,
  wrapperStyles,
  tableStyles,
  containerStyles,
  rowContainerStyles
}) => {
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperStyles
  }, data.map((value, index) => {
    return /*#__PURE__*/React.createElement("div", {
      className: containerStyles
    }, index !== 0 && showHorizontalBar && /*#__PURE__*/React.createElement("div", {
      className: "historyHorizontalBar"
    }), /*#__PURE__*/React.createElement(StatusTable, {
      style: tableStyles
    }, returnTransferData(value, rowContainerStyles)));
  }));
};

const propertyOwnerHistory = ({
  userType,
  propertyId: propertyIdFromProp
}) => {
  const {
    t
  } = useTranslation();
  const {
    propertyIds
  } = useParams();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const audit = true;
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds: userType === "employee" ? propertyIdFromProp : propertyIds,
      audit
    }
  });
  let properties = (data === null || data === void 0 ? void 0 : data.Properties) || " ";
  let ownershipInfo = {};
  const getUniqueList = (list = []) => {
    let newList = [];
    list.map(element => {
      if (!JSON.stringify(newList).includes(JSON.stringify(element.acknowldgementNumber))) {
        newList.push(element);
      }
    });
    return newList && Array.isArray(newList) && newList.filter(element => element.creationReason != "UPDATE");
  };
  const transformData = property => {
    const {
      owners,
      institution,
      ownershipCategory
    } = property;
    let itemKey = [];
    owners.map(item => {
      let owner = {};
      if (institution) {
        owner = {
          PT_COMMON_INSTITUTION_NAME: (institution === null || institution === void 0 ? void 0 : institution.name) || t("CS_NA"),
          PT_TYPE_OF_INSTITUTION: t(institution.type) || t("CS_NA"),
          PT_OWNER_NAME: institution.nameOfAuthorizedPerson || t("CS_NA"),
          PT_COMMON_AUTHORISED_PERSON_DESIGNATION: t(institution.designation) || t("CS_NA"),
          PT_FORM3_MOBILE_NUMBER: item.mobileNumber || t("CS_NA"),
          PT_OWNERSHIP_INFO_TEL_PHONE_NO: item.altContactNumber || t("CS_NA"),
          PT_FORM3_EMAIL_ID: item.emailId || t("CS_NA"),
          PT_OWNERSHIP_INFO_CORR_ADDR: (item === null || item === void 0 ? void 0 : item.correspondenceAddress) || t("CS_NA"),
          PT_FORM3_OWNERSHIP_TYPE: t(`PROPERTYTAX_BILLING_SLAB_${ownershipCategory.split(".")[0]}`) || t("CS_NA")
        };
      } else {
        owner = {
          PT_OWNER_NAME: item.name || t("CS_NA"),
          PT_FORM3_GENDER: t(item.gender) || t("CS_NA"),
          PT_FORM3_MOBILE_NUMBER: item.mobileNumber || t("CS_NA"),
          PT_FORM3_GUARDIAN_NAME: item.fatherOrHusbandName || t("CS_NA"),
          PT_FORM3_RELATIONSHIP: t(item.relationship) || t("CS_NA"),
          PT_SPECIAL_OWNER_CATEGORY: t(item.ownerType === "NONE" ? "CS_NA" : item.ownerType) || t("CS_NA"),
          PT_MUTATION_AUTHORISED_EMAIL: item.emailId || t("CS_NA"),
          PT_OWNERSHIP_INFO_CORR_ADDR: item.permanentAddress || t("CS_NA")
        };
      }
      itemKey.push(owner);
    });
    return itemKey;
  };
  if (properties && Array.isArray(properties) && properties.length > 0) {
    let ownerProperty = properties[0];
    properties = properties.filter(data => data.status == "ACTIVE");
    if (properties.length === 0) {
      properties.push(ownerProperty);
    }
    properties = getUniqueList(properties);
    properties && properties.length > 0 && properties.map(indProperty => {
      let lastModifiedDate = indProperty.auditDetails.lastModifiedTime;
      indProperty.owners = indProperty.owners.filter(owner => owner.status == "ACTIVE");
      if (!ownershipInfo[lastModifiedDate]) {
        ownershipInfo[lastModifiedDate] = [];
      }
      ownershipInfo[lastModifiedDate].push(...transformData(indProperty));
    });
  }
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if (propertyIdFromProp) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement("div", null, Object.keys(ownershipInfo).map((key, index, arr) => {
      const date = convertEpochToDate(Number(key));
      return /*#__PURE__*/React.createElement("div", {
        className: "historyContent"
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          display: "flex"
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "historyCheckpoint zIndex"
      }), index !== Object.keys(ownershipInfo).length - 1 ? /*#__PURE__*/React.createElement("div", {
        className: "rowContainerStyles"
      }, /*#__PURE__*/React.createElement(CardSubHeader, {
        className: "historyTableDateLabel bottomMargin"
      }, " ", t("PT_DATE_OF_TRANSFER"), " "), /*#__PURE__*/React.createElement(CardSubHeader, {
        className: "historyTableDate bottomMargin"
      }, date)) : null), /*#__PURE__*/React.createElement(TransferDetails, {
        data: ownershipInfo[key],
        wrapperStyles: "wrapperStyles",
        containerStyles: "containerStyles",
        rowContainerStyles: {
          display: "flex",
          flexDirection: "column"
        },
        tableStyles: {
          display: "grid",
          gridAutoRows: "min-content",
          gridTemplateColumns: "repeat(5, minmax(100px, 1fr))"
        }
      }), index !== arr.length - 1 && /*#__PURE__*/React.createElement("div", {
        className: "checkpoint-connect",
        style: {
          marginLeft: 0,
          top: "4px"
        }
      }));
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Header, null, t("PT_OWNER_HISTORY")), /*#__PURE__*/React.createElement("div", null, Object.keys(ownershipInfo).map(key => {
    const date = convertEpochToDate(Number(key));
    return /*#__PURE__*/React.createElement("div", {
      style: {
        padding: "10px"
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "historyCheckpoint"
    }), /*#__PURE__*/React.createElement(CardSubHeader, {
      className: "historyTableDateLabel smallText"
    }, " ", t("PT_DATE_OF_TRANSFER"), " "), /*#__PURE__*/React.createElement(CardSubHeader, {
      className: "historyTableDate smallText"
    }, "\xA0-\xA0", date), /*#__PURE__*/React.createElement(TransferDetails, {
      data: ownershipInfo[key],
      wrapperStyles: "wrapperStyles leftBorder",
      showHorizontalBar: true
    }));
  }))));
};

const TransfererDetails$1 = ({
  userType,
  formData,
  config,
  onSelect
}) => {
  var _propertyDetails$owne, _propertyDetails$owne2, _propertyDetails$owne5;
  const {
    t
  } = useTranslation();
  const propertyDetails = userType === "employee" ? formData.originalData : formData.searchResult.property;
  const ownershipType = propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$owne = propertyDetails.ownershipCategory) === null || _propertyDetails$owne === void 0 ? void 0 : (_propertyDetails$owne2 = _propertyDetails$owne.split) === null || _propertyDetails$owne2 === void 0 ? void 0 : _propertyDetails$owne2.call(_propertyDetails$owne, ".");
  if (userType === "employee") {
    var _propertyDetails$owne3;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StatusTable, null, propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$owne3 = propertyDetails.owners) === null || _propertyDetails$owne3 === void 0 ? void 0 : _propertyDetails$owne3.filter(e => e.status === "ACTIVE").map((owner, index, arr) => {
      var _propertyDetails$owne4, _config$labels;
      return /*#__PURE__*/React.createElement(React.Fragment, null, (propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$owne4 = propertyDetails.owners) === null || _propertyDetails$owne4 === void 0 ? void 0 : _propertyDetails$owne4.filter(e => e.status === "ACTIVE").length) > 1 ? /*#__PURE__*/React.createElement(CardCaption, {
        style: {
          marginTop: "24px",
          marginBottom: "12px",
          display: "block"
        }
      }, t("ES_OWNER") + "  " + (index + 1)) : null, (_config$labels = config.labels) === null || _config$labels === void 0 ? void 0 : _config$labels.filter(e => e.ownershipType === "ALL" || (ownershipType === null || ownershipType === void 0 ? void 0 : ownershipType[0].includes(e.ownershipType)) || e.ownershipType === (ownershipType === null || ownershipType === void 0 ? void 0 : ownershipType[0])).map(label => {
        var _label$keyPath, _label$keyPath$filter;
        let noteValue = label === null || label === void 0 ? void 0 : (_label$keyPath = label.keyPath) === null || _label$keyPath === void 0 ? void 0 : (_label$keyPath$filter = _label$keyPath.filter(e => !["searchResult", "property"].includes(e))) === null || _label$keyPath$filter === void 0 ? void 0 : _label$keyPath$filter.reduce((acc, curr) => curr === "_index_" ? acc === null || acc === void 0 ? void 0 : acc[index] : acc === null || acc === void 0 ? void 0 : acc[curr], propertyDetails);
        return /*#__PURE__*/React.createElement(Row, {
          key: label.label,
          label: t(label.label),
          text: noteValue || "N/A"
        });
      }));
    })));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: onSelect,
    onSkip: () => {},
    isDisabled: false
  }, /*#__PURE__*/React.createElement(CardHeader, null, t("PT_MUTATION_TRANSFEROR_DETAILS")), propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$owne5 = propertyDetails.owners) === null || _propertyDetails$owne5 === void 0 ? void 0 : _propertyDetails$owne5.filter(e => e.status === "ACTIVE").map((owner, index, arr) => {
    var _propertyDetails$owne6, _config$labels2;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, (propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$owne6 = propertyDetails.owners) === null || _propertyDetails$owne6 === void 0 ? void 0 : _propertyDetails$owne6.filter(e => e.status === "ACTIVE").length) > 1 ? /*#__PURE__*/React.createElement(CardCaption, {
      style: {
        marginTop: "24px",
        marginBottom: "12px",
        display: "block"
      }
    }, t("ES_OWNER") + "  " + (index + 1)) : null, (_config$labels2 = config.labels) === null || _config$labels2 === void 0 ? void 0 : _config$labels2.filter(e => e.ownershipType === "ALL" || (ownershipType === null || ownershipType === void 0 ? void 0 : ownershipType[0].includes(e.ownershipType)) || e.ownershipType === (ownershipType === null || ownershipType === void 0 ? void 0 : ownershipType[0])).map(label => {
      var _label$keyPath2;
      let noteValue = label === null || label === void 0 ? void 0 : (_label$keyPath2 = label.keyPath) === null || _label$keyPath2 === void 0 ? void 0 : _label$keyPath2.reduce((acc, curr) => curr === "_index_" ? acc === null || acc === void 0 ? void 0 : acc[index] : acc === null || acc === void 0 ? void 0 : acc[curr], formData);
      return /*#__PURE__*/React.createElement(KeyNote, {
        key: label.label,
        keyValue: t(label.label),
        note: typeof noteValue === "string" ? t(noteValue) : "N/A",
        noteStyle: label.noteStyle
      });
    }));
  })));
};

const createOwnerDetails$1 = () => ({
  name: "",
  mobileNumber: "",
  fatherOrHusbandName: "",
  emailId: "",
  permanentAddress: "",
  relationship: "",
  ownerType: "",
  gender: "",
  isCorrespondenceAddress: false,
  documents: {},
  key: Date.now()
});
const config$2 = [{
  isMandatory: true,
  type: "component",
  route: "owner-details",
  key: "owners",
  component: "SelectOwnerDetails",
  texts: {
    headerCaption: "PT_MUTATION_TRANSFEREE_DETAILS_HEADER",
    header: "PT_OWNERSHIP_INFO_SUB_HEADER",
    cardText: "PT_FORM3_HEADER_MESSAGE",
    submitBarLabel: "PT_COMMON_NEXT"
  },
  withoutLabel: true,
  nextStep: "special-owner-category",
  hideInEmployee: true
}, {
  type: "component",
  route: "special-owner-category",
  isMandatory: true,
  component: "SelectSpecialOwnerCategoryType",
  texts: {
    headerCaption: "PT_OWNERS_DETAILS",
    header: "PT_SPECIAL_OWNER_CATEGORY",
    cardText: "PT_FORM3_HEADER_MESSAGE",
    submitBarLabel: "PT_COMMON_NEXT"
  },
  key: "owners",
  withoutLabel: true,
  nextStep: "owner-address",
  hideInEmployee: true
}, {
  type: "component",
  route: "owner-address",
  isMandatory: true,
  component: "SelectOwnerAddress",
  texts: {
    headerCaption: "PT_OWNERS_DETAILS",
    header: "PT_OWNERS_ADDRESS",
    cardText: "",
    submitBarLabel: "PT_COMMON_NEXT"
  },
  key: "owners",
  withoutLabel: true,
  nextStep: "special-owner-category-proof",
  hideInEmployee: true
}, {
  type: "component",
  component: "SelectAltContactNumber",
  key: "owners",
  withoutLabel: true,
  hideInEmployee: true
}, {
  type: "component",
  route: "special-owner-category-proof",
  isMandatory: true,
  component: "SelectSpecialProofIdentity",
  texts: {
    headerCaption: "PT_OWNERS_DETAILS",
    header: "PT_SPECIAL_OWNER_CATEGORY_PROOF_HEADER",
    cardText: "",
    submitBarLabel: "PT_COMMON_NEXT"
  },
  key: "owners",
  withoutLabel: true,
  nextStep: "proof-of-identity",
  hideInEmployee: true
}, {
  type: "component",
  route: "proof-of-identity",
  isMandatory: true,
  component: "SelectProofIdentity",
  texts: {
    headerCaption: "PT_OWNERS_DETAILS",
    header: "PT_PROOF_IDENTITY_HEADER",
    cardText: "",
    submitBarLabel: "PT_COMMON_NEXT",
    addMultipleText: "PT_COMMON_ADD_APPLICANT_LABEL"
  },
  key: "owners",
  withoutLabel: true,
  nextStep: null,
  hideInEmployee: true
}];
const OwnerCitizen = props => {
  var _formData$ownershipCa;
  const {
    onSelect,
    onSkip,
    formData,
    config: propsConfig
  } = props;
  const {
    pathname
  } = useLocation();
  const [owners, setOwners] = Digit.Hooks.useSessionStorage("PT_MUTATE_MULTIPLE_OWNERS", [createOwnerDetails$1()]);
  const [lastPath, setLastPath] = Digit.Hooks.useSessionStorage("PT_MUTATE_MULTIPLE_OWNERS_LAST_PATH", `/0/${config$2[0].route}`);
  const {
    path,
    url
  } = useRouteMatch();
  const allowMultipleOwners = (formData === null || formData === void 0 ? void 0 : (_formData$ownershipCa = formData.ownershipCategory) === null || _formData$ownershipCa === void 0 ? void 0 : _formData$ownershipCa.code) === "INDIVIDUAL.MULTIPLEOWNERS";
  const history = useHistory();
  useEffect(() => {
    if (!owners.length) setOwners([createOwnerDetails$1()]);
  }, []);
  useEffect(() => {
    if (!allowMultipleOwners && owners.length > 1) {
      setOwners([owners[0]]);
      onSelect(propsConfig.key, [owners[0]]);
      history.replace(`${path}/0/${config$2[0].route}`);
    }
  }, [allowMultipleOwners]);
  useEffect(() => {
    if (lastPath !== pathname.split(path)[1]) {
      setLastPath(pathname.split(path)[1]);
    }
  }, [pathname]);
  const prevOwnerCount = useRef();
  useEffect(() => {
    prevOwnerCount.current = [...owners].length;
  });
  const prevOwnerLength = prevOwnerCount.current;
  const addNewOwner = () => {
    const newOwner = createOwnerDetails$1();
    if (allowMultipleOwners) setOwners(prev => [...prev, newOwner]);
  };
  useEffect(() => {
    if (owners.length > prevOwnerLength) history.push(`${path}/${owners.length - 1}/${config$2[0].route}`);
  }, [owners]);
  const removeOwner = owner => {
    setOwners(prev => prev.filter(o => o.key != owner.key));
  };
  const commonProps = {
    addNewOwner,
    removeOwner,
    setOwners,
    owners,
    ...props,
    propsConfig
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Switch, null, owners.map((owner, index) => {
    return /*#__PURE__*/React.createElement(Route, {
      key: owner.key,
      path: `${path}/${index}`
    }, /*#__PURE__*/React.createElement(OwnerSteps, Object.assign({
      owner: owner,
      ownerIndex: index
    }, commonProps)));
  }), /*#__PURE__*/React.createElement(Route, null, pathname != `${path}${lastPath}` && lastPath != "" ? /*#__PURE__*/React.createElement(Redirect, {
    to: `${path}${lastPath}`
  }) : null)));
};
const OwnerSteps = ({
  owner,
  addNewOwner,
  removeOwner,
  setOwners,
  owners,
  ownerIndex,
  propsConfig,
  ...props
}) => {
  const {
    t
  } = useTranslation();
  const {
    path
  } = useRouteMatch();
  const {
    pathname
  } = useLocation();
  const history = useHistory();
  const addOwner = data => {
    setOwners(prev => prev.map((o, index) => o.key === owner.key ? {
      ...o,
      ...data
    } : o));
    addNewOwner();
  };
  const handleSelectForOwner = (key, data, skipStep, index, isAddMultiple = false, queryParams, configObj) => {
    setOwners(prev => prev.map((o, index) => o.key === owner.key ? {
      ...o,
      ...data
    } : o));
    let pathArray = pathname.split("/");
    let currentPath = pathArray.pop();
    let activeRouteObj = config$2.filter(e => e.route === currentPath)[0];
    let queryString = queryParams ? `?${Object.keys(queryParams).map(_key => `${_key}=${queryParams[_key]}`).join("&")}` : "";
    const goToNext = skipStep ? history.replace : history.push;
    if (!activeRouteObj.nextStep) {
      if (ownerIndex !== owners.length - 1) {
        pathArray.pop();
        pathArray.push(ownerIndex + 1);
        goToNext(`${pathArray.join("/")}/${config$2[0].route}`);
      } else {
        props.onSelect(propsConfig.key, owners, "", "", "", {
          nesting: 2
        });
      }
    } else if (typeof activeRouteObj.nextStep === "string") {
      goToNext(`${pathArray.join("/")}/${activeRouteObj.nextStep}${queryString}`);
    } else if (typeof activeRouteObj.nextStep === "object" && activeRouteObj.nextStep) {
      let nextStep = activeRouteObj.nextStep[configObj.routeKey];
      goToNext(`${pathArray.join("/")}/${nextStep}${queryString}`);
    }
  };
  return /*#__PURE__*/React.createElement(Switch, null, config$2.map((routeObj, index) => {
    const {
      component
    } = routeObj;
    const Component = typeof component === "string" ? Digit.ComponentRegistryService.getComponent(component) : component;
    return /*#__PURE__*/React.createElement(Route, {
      key: index,
      path: `${path}/${routeObj.route}`
    }, /*#__PURE__*/React.createElement(Component, {
      config: routeObj,
      onSelect: handleSelectForOwner,
      onSkip: () => {},
      t: t,
      formData: {
        ...props.formData,
        owners
      },
      ownerIndex: ownerIndex,
      addNewOwner: addOwner
    }));
  }));
};

const Comments = props => {
  var _formData$config$key;
  const {
    t,
    config,
    onSelect,
    userType,
    formData
  } = props;
  const [remarks, setSelected] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.remarks);
  const goNext = () => {
    onSelect(config.key, {
      ...(formData === null || formData === void 0 ? void 0 : formData[config.key]),
      remarks
    });
  };
  const onSkip = () => {};
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_REMARKS")), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextArea, {
      onChange: e => setSelected(e.target.value),
      value: remarks
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(TextArea, {
    onChange: e => setSelected(e.target.value),
    value: remarks
  }))));
};

const IsMutationPending = props => {
  var _formData$config$key, _formData$config$key2;
  const {
    t,
    config,
    onSelect,
    userType,
    formData,
    setError,
    clearErrors,
    errors
  } = props;
  const menu = [{
    code: "YES"
  }, {
    code: "NO"
  }];
  const [isMutationInCourt, setMutationInCourt] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.isMutationInCourt);
  const [caseDetails, setCaseDetails] = useState((formData === null || formData === void 0 ? void 0 : (_formData$config$key2 = formData[config.key]) === null || _formData$config$key2 === void 0 ? void 0 : _formData$config$key2.caseDetails) || "");
  const goNext = () => {
    onSelect(config.key, {
      ...(formData === null || formData === void 0 ? void 0 : formData[config.key]),
      isMutationInCourt,
      caseDetails
    });
  };
  useEffect(() => {
    if ((isMutationInCourt === null || isMutationInCourt === void 0 ? void 0 : isMutationInCourt.code) === "NO" && caseDetails !== null && caseDetails !== void 0 && caseDetails.length) setCaseDetails("");
    if (userType === "employee") {
      if (!isMutationInCourt) {
        setError(config.key, {
          type: "Required"
        });
      } else if (errors !== null && errors !== void 0 && errors[config.key]) clearErrors(config.key);
      goNext();
    }
  }, [isMutationInCourt, caseDetails]);
  const onSkip = () => {};
  function setIsMutationInCourt(e) {
    if (e.target.checked == true) {
      setMutationInCourt({
        code: "YES"
      });
    } else {
      setMutationInCourt({
        code: "NO"
      });
    }
  }
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, {
      style: {
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start"
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "field",
      style: {
        width: "55%"
      }
    }, /*#__PURE__*/React.createElement(CheckBox, {
      label: `${t("PT_MUTATION_COURT_PENDING_OR_NOT")}*`,
      name: "isMutationInCourt",
      onChange: setIsMutationInCourt,
      checked: (isMutationInCourt === null || isMutationInCourt === void 0 ? void 0 : isMutationInCourt.code) === "YES" ? true : false,
      style: {
        paddingBottom: "10px",
        paddingTop: "3px",
        fontWeight: "bold",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#0b0c0c"
      }
    }))), /*#__PURE__*/React.createElement(LabelFieldPair, {
      style: {
        marginBottom: "50px"
      }
    }, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_COURT_CASE_DETAILS")), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      disable: (isMutationInCourt === null || isMutationInCourt === void 0 ? void 0 : isMutationInCourt.code) !== "YES",
      value: caseDetails,
      onChange: e => setCaseDetails(e.target.value)
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !isMutationInCourt
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: menu,
    selectedOption: isMutationInCourt,
    onSelect: v => {
      setMutationInCourt(v);
    },
    labelKey: "PT_MUTATION_PENDING",
    isDependent: true
  }), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_MUTATION_COURT_CASE_DETAILS")), /*#__PURE__*/React.createElement(TextInput, {
    disable: (isMutationInCourt === null || isMutationInCourt === void 0 ? void 0 : isMutationInCourt.code) !== "YES",
    value: caseDetails,
    onChange: e => setCaseDetails(e.target.value)
  }))));
};

const PTPropertyUnderStateAquire = ({
  ...props
}) => {
  var _formData$config$key, _formData$config$key2;
  const {
    t,
    config,
    onSelect,
    userType,
    formData,
    setError,
    clearErrors,
    errors
  } = props;
  const menu = [{
    code: "YES"
  }, {
    code: "NO"
  }];
  const [isPropertyUnderGovtPossession, setSelected] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.isPropertyUnderGovtPossession);
  const [govtAcquisitionDetails, setReason] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key2 = formData[config.key]) === null || _formData$config$key2 === void 0 ? void 0 : _formData$config$key2.govtAcquisitionDetails);
  useEffect(() => {
    if ((isPropertyUnderGovtPossession === null || isPropertyUnderGovtPossession === void 0 ? void 0 : isPropertyUnderGovtPossession.code) === "NO" && govtAcquisitionDetails !== null && govtAcquisitionDetails !== void 0 && govtAcquisitionDetails.length) setReason("");
    if (userType === "employee") {
      if (!isPropertyUnderGovtPossession) {
        setError(config.key, {
          type: "Required"
        });
      } else if (errors !== null && errors !== void 0 && errors[config.key]) clearErrors(config.key);
      goNext();
    }
  }, [isPropertyUnderGovtPossession, govtAcquisitionDetails]);
  const goNext = () => {
    onSelect(config.key, {
      ...(formData === null || formData === void 0 ? void 0 : formData[config.key]),
      isPropertyUnderGovtPossession,
      govtAcquisitionDetails
    });
  };
  const onSkip = () => {};
  function setPropertyUnderGovtPossession(e) {
    if (e.target.checked == true) {
      setSelected({
        code: "YES"
      });
    } else {
      setSelected({
        code: "NO"
      });
    }
  }
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, {
      style: {
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start"
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "field",
      style: {
        width: "55%"
      }
    }, /*#__PURE__*/React.createElement(CheckBox, {
      label: `${t("PT_MUTATION_STATE_ACQUISITION")}*`,
      name: "isPropertyUnderGovtPossession",
      onChange: setPropertyUnderGovtPossession,
      checked: (isPropertyUnderGovtPossession === null || isPropertyUnderGovtPossession === void 0 ? void 0 : isPropertyUnderGovtPossession.code) === "YES" ? true : false,
      style: {
        paddingBottom: "10px",
        paddingTop: "3px",
        fontWeight: "bold",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#0b0c0c"
      }
    }))), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_GOVT_ACQUISITION_DETAILS")), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      disable: (isPropertyUnderGovtPossession === null || isPropertyUnderGovtPossession === void 0 ? void 0 : isPropertyUnderGovtPossession.code) !== "YES",
      value: govtAcquisitionDetails,
      onChange: e => setReason(e.target.value)
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !(isPropertyUnderGovtPossession !== null && isPropertyUnderGovtPossession !== void 0 && isPropertyUnderGovtPossession.code)
  }, /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: menu,
    selectedOption: isPropertyUnderGovtPossession,
    onSelect: v => {
      setSelected(v);
    },
    labelKey: "PT_MUTATION_STATE_ACQUISITION",
    isDependent: true
  }), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_MUTATION_GOVT_ACQUISITION_DETAILS")), /*#__PURE__*/React.createElement(TextInput, {
    disable: (isPropertyUnderGovtPossession === null || isPropertyUnderGovtPossession === void 0 ? void 0 : isPropertyUnderGovtPossession.code) !== "YES",
    value: govtAcquisitionDetails,
    onChange: e => setReason(e.target.value)
  })));
};

const PropertyMarketValue = props => {
  var _formData$config$key;
  const {
    t,
    config,
    onSelect,
    userType,
    formData,
    setError,
    clearErrors,
    errors
  } = props;
  const [marketValue, setSelected] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.marketValue);
  useEffect(() => {
    if (userType === "employee") {
      if (!marketValue) {
        setError(config.key, {
          type: "Required"
        });
      } else if (errors !== null && errors !== void 0 && errors[config.key]) clearErrors(config.key);
      goNext();
    }
  }, [marketValue]);
  const goNext = () => {
    onSelect(config.key, {
      ...(formData === null || formData === void 0 ? void 0 : formData[config.key]),
      marketValue
    });
  };
  const onSkip = () => {};
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_MARKET_VALUE") + " *"), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      type: "number",
      min: 0,
      onChange: e => setSelected(e.target.value),
      value: marketValue
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !marketValue
  }, /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("span", {
    className: "citizen-card-input citizen-card-input--front"
  }, "\u20B9"), /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    min: 0,
    onChange: e => setSelected(e.target.value),
    value: marketValue
  }))));
};

const ReasonForTransfer = props => {
  var _formData$config$key;
  const {
    t,
    config,
    onSelect,
    userType,
    formData,
    setError,
    clearErrors,
    errors
  } = props;
  const {
    data,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "PropertyTax", "ReasonForTransfer", {});
  const [menu, setMenu] = useState([]);
  useEffect(() => {
    if (data) {
      let opt = data.PropertyTax.ReasonForTransfer.map(e => ({
        ...e,
        i18nKey: "PROPERTYTAX_REASONFORTRANSFER_" + e.code
      }));
      setMenu(opt);
    }
  }, [data]);
  const [reasonForTransfer, setSelected] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.reasonForTransfer);
  const goNext = () => {
    onSelect(config.key, {
      ...(formData === null || formData === void 0 ? void 0 : formData[config.key]),
      reasonForTransfer
    });
  };
  const onSkip = () => {};
  useEffect(() => {
    if (userType === "employee") {
      if (!reasonForTransfer) {
        setError(config.key, {
          type: "Required"
        });
      } else if (errors !== null && errors !== void 0 && errors[config.key]) clearErrors(config.key);
      goNext();
    }
  }, [reasonForTransfer]);
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_TRANSFER_REASON") + " *"), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(Dropdown, {
      t: t,
      option: menu,
      optionKey: "i18nKey",
      select: setSelected,
      selected: reasonForTransfer
    }))));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !reasonForTransfer
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioOrSelect, {
    t: t,
    optionKey: "i18nKey",
    isMandatory: config.isMandatory,
    options: menu,
    onSelect: setSelected,
    selectedOption: reasonForTransfer,
    optionCardStyles: {
      maxHeight: "50vh",
      overflow: "auto",
      zIndex: 100
    }
  }))));
};

const RegistrationDocument = props => {
  var _formData$config$key, _formData$config$key2, _formData$config$key3;
  const {
    t,
    config,
    onSelect,
    userType,
    formData,
    setError,
    clearErrors,
    errors
  } = props;
  const [documentNumber, setDocNo] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.documentNumber);
  const [documentValue, setDocValue] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key2 = formData[config.key]) === null || _formData$config$key2 === void 0 ? void 0 : _formData$config$key2.documentValue);
  const [documentDate, setDocDate] = useState(formData === null || formData === void 0 ? void 0 : (_formData$config$key3 = formData[config.key]) === null || _formData$config$key3 === void 0 ? void 0 : _formData$config$key3.documentDate);
  const [error, setLocalError] = useState(null);
  const selectDocDate = date => {
    setLocalError(null);
    let to_date = `${new Date().getFullYear()}-${(new Date().getMonth() + 1).toLocaleString('en-US', {
      minimumIntegerDigits: 2,
      useGrouping: false
    })}-${new Date().getDate().toLocaleString('en-US', {
      minimumIntegerDigits: 2,
      useGrouping: false
    })}`;
    if (new Date(date).getTime() <= new Date(to_date).getTime()) setDocDate(date);else setLocalError("PT_DOCUMENT_DATE_ERROR_MESSAGE");
  };
  const goNext = () => {
    onSelect(config.key, {
      ...(formData === null || formData === void 0 ? void 0 : formData[config.key]),
      documentNumber,
      documentValue,
      documentDate
    });
  };
  useEffect(() => {
    var _errors$config$key;
    if (userType === "employee" && !(errors !== null && errors !== void 0 && errors[config.key]) && error) {
      setError(config.key, {
        type: "invalid"
      });
    } else if (!error && (errors === null || errors === void 0 ? void 0 : (_errors$config$key = errors[config.key]) === null || _errors$config$key === void 0 ? void 0 : _errors$config$key.type) === "invalid") {
      clearErrors(config.key);
    }
  }, [error]);
  useEffect(() => {
    if (userType === "employee") {
      var _errors$config$key2;
      if (!documentDate || !documentNumber || !documentValue) {
        setError(config.key, {
          type: "Required"
        });
      } else if ((errors === null || errors === void 0 ? void 0 : (_errors$config$key2 = errors[config.key]) === null || _errors$config$key2 === void 0 ? void 0 : _errors$config$key2.type) === "Required") clearErrors(config.key);
      goNext();
    }
  }, [documentNumber, documentValue, documentDate]);
  const onSkip = () => {};
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_DOCUMENT_NO") + " *"), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      type: "number",
      min: 0,
      value: documentNumber,
      onChange: e => setDocNo(e.target.value)
    }))), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_DOCUMENT_VALUE") + " *"), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(TextInput, {
      type: "number",
      min: 0,
      value: documentValue,
      onChange: e => setDocValue(e.target.value)
    }))), /*#__PURE__*/React.createElement(LabelFieldPair, null, /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "bold"
      },
      className: "card-label-smaller"
    }, t("PT_MUTATION_DOCUMENT_ISSUE_DATE") + " *"), /*#__PURE__*/React.createElement("div", {
      className: "field"
    }, /*#__PURE__*/React.createElement(DatePicker, {
      max: new Date().toLocaleDateString(),
      date: documentDate,
      onChange: selectDocDate
    }))), error ? /*#__PURE__*/React.createElement(CardLabelError, {
      style: {
        marginLeft: "30%"
      }
    }, t(error)) : null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 2,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    isDisabled: !(documentNumber && documentValue && documentDate)
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_MUTATION_DOCUMENT_NO")), /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    min: 0,
    value: documentNumber,
    onChange: e => setDocNo(e.target.value)
  }), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_MUTATION_DOCUMENT_VALUE")), /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    min: 0,
    value: documentValue,
    onChange: e => setDocValue(e.target.value)
  }), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_MUTATION_DOCUMENT_ISSUE_DATE")), /*#__PURE__*/React.createElement(DatePicker, {
    max: new Date().toLocaleDateString(),
    date: documentDate,
    onChange: selectDocDate,
    style: {
      maxWidth: 540
    }
  }), error ? /*#__PURE__*/React.createElement(CardLabelError, null, t(error)) : null));
};

const TransferProof = ({
  t,
  config,
  onSelect,
  userType,
  formData
}) => {
  var _formData$config$key, _formData$config$key2, _Documentsob$Property;
  const {
    pathname: url
  } = useLocation();
  const isMutation = url.includes("property-mutation");
  let index = window.location.href.split("/").pop();
  const [uploadedFile, setUploadedFile] = useState((formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.fileStoreId) || null);
  const [file, setFile] = useState(null);
  const [error, setError] = useState(null);
  const cityDetails = Digit.ULBService.getCurrentUlb();
  const [dropdownValue, setDropdownValue] = useState((formData === null || formData === void 0 ? void 0 : (_formData$config$key2 = formData[config.key]) === null || _formData$config$key2 === void 0 ? void 0 : _formData$config$key2.documentType) || null);
  let dropdownData = [];
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: Documentsob
  } = Digit.Hooks.pt.useMDMS(stateId, "PropertyTax", "MutationDocuments");
  const docs = Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property.MutationDocuments;
  const transferReason = Array.isArray(docs) && docs.filter(doc => doc.code.includes("OWNER.TRANSFERREASONDOCUMENT"));
  if (transferReason.length > 0) {
    var _transferReason$;
    dropdownData = (_transferReason$ = transferReason[0]) === null || _transferReason$ === void 0 ? void 0 : _transferReason$.dropdownData.filter(e => {
      var _formData$additionalD, _formData$additionalD2;
      return e.code.includes(formData === null || formData === void 0 ? void 0 : (_formData$additionalD = formData.additionalDetails) === null || _formData$additionalD === void 0 ? void 0 : (_formData$additionalD2 = _formData$additionalD.reasonForTransfer) === null || _formData$additionalD2 === void 0 ? void 0 : _formData$additionalD2.code);
    });
    dropdownData.forEach(data => {
      data.i18nKey = stringReplaceAll(data.code, ".", "_");
    });
  }
  function setTypeOfDropdownValue(dropdownValue) {
    setDropdownValue(dropdownValue);
  }
  const handleSubmit = () => {
    let fileStoreId = uploadedFile;
    let fileDetails = {
      fileStoreId,
      documentType: dropdownValue
    };
    onSelect(config.key, fileDetails, "", index);
  };
  const onSkip = () => onSelect();
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 2000000) {
          setError(t("PT_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("property-upload", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("PT_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {}
        }
      }
    })();
  }, [file]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 3,
    flow: "PT_MUTATE"
  }), /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    t: t,
    isDisabled: !uploadedFile || !dropdownValue || error
  }, /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_TYPES`)), /*#__PURE__*/React.createElement(CardLabelDesc, null, t(`PT_UPLOAD_RESTRICTIONS_SIZE`)), /*#__PURE__*/React.createElement(CardLabel, null, `${t("PT_CATEGORY_DOCUMENT_TYPE")}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: dropdownData,
    selected: dropdownValue,
    optionKey: "i18nKey",
    select: setTypeOfDropdownValue,
    placeholder: t(`PT_MUTATION_SELECT_DOC_LABEL`)
  }), /*#__PURE__*/React.createElement(UploadFile, {
    id: "ptm-doc",
    extraStyleName: "propertyCreate",
    accept: ".jpg,.png,.pdf",
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
    },
    message: uploadedFile ? `1 ${t(`PT_ACTION_FILEUPLOADED`)}` : t(`PT_ACTION_NO_FILEUPLOADED`),
    error: error
  }), error ? /*#__PURE__*/React.createElement("div", {
    style: {
      height: "20px",
      width: "100%",
      fontSize: "20px",
      color: "red",
      marginTop: "5px"
    }
  }, error) : "", /*#__PURE__*/React.createElement("div", {
    style: {
      disabled: "true",
      height: "20px",
      width: "100%"
    }
  })));
};

const TYPE_REGISTER = {
  type: "register"
};
const TYPE_LOGIN = {
  type: "login"
};
const defaultState = {
  otpSentTo: false,
  isNewUser: false,
  invalid: false,
  showToast: null,
  error: false,
  warning: false,
  name: "",
  message: "",
  mobileNumber: "",
  previousAction: null,
  disable: false
};
const compStateReducer = (state, action) => {
  switch (action.type) {
    case "verifiedotp":
      return {
        ...state,
        previousAction: action.type,
        message: "",
        disable: false,
        showToast: false,
        error: true,
        warning: false,
        invalid: true
      };
    case "verifyotp":
      return {
        ...state,
        previousAction: action.type,
        message: "",
        disable: true,
        showToast: false,
        error: true,
        warning: false,
        invalid: false
      };
    case "otpsent":
      return {
        ...state,
        previousAction: action.type,
        message: "PT_SEC_OTP_SENT_SUCEESS",
        otpSentTo: action.value,
        isNewUser: action.isNewUser,
        showToast: true,
        error: false,
        warning: false
      };
    case "resettoast":
      return {
        ...state,
        previousAction: action.type,
        message: "",
        showToast: false,
        error: false,
        warning: false
      };
    case "success":
      return {
        ...state,
        previousAction: action.type,
        message: action.value,
        showToast: true,
        warning: false,
        error: false
      };
    case "warning":
      return {
        ...state,
        previousAction: action.type,
        message: action.value,
        showToast: true,
        warning: true,
        error: false
      };
    case "error":
      return {
        ...state,
        previousAction: action.type,
        message: action.value,
        showToast: true,
        error: true
      };
    case "reset":
      return {
        ...defaultState
      };
    default:
      return {
        ...defaultState
      };
  }
};
const sendOtp = async (data, stateCode) => {
  try {
    const res = await Digit.UserService.sendOtp(data, stateCode);
    return [res, null];
  } catch (err) {
    return [null, err];
  }
};
const UpdateNumber = ({
  showPopup,
  t,
  onValidation,
  mobileNumber,
  name,
  UpdateNumberConfig
}) => {
  var _Digit, _Digit$ComponentRegis, _formState$errors, _formState$errors$mob;
  const stateCode = Digit.ULBService.getStateId();
  const [compState, compStateDispatch] = useReducer(compStateReducer, {
    ...defaultState,
    name: name,
    mobileNumber: mobileNumber
  });
  const SelectOtp = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("SelectOtp");
  const onSubmit = useCallback(async _data => {
    compStateDispatch({
      type: "resettoast"
    });
    let invalidNo = (UpdateNumberConfig === null || UpdateNumberConfig === void 0 ? void 0 : UpdateNumberConfig.invalidNumber) === (_data === null || _data === void 0 ? void 0 : _data.mobileNumber) && "PTUPNO_INVALIDNO_HEADER" || false;
    invalidNo = (_data === null || _data === void 0 ? void 0 : _data.mobileNumber) === compState.mobileNumber ? "PT_SEC_SAME_NUMBER" : invalidNo;
    if (invalidNo) {
      compStateDispatch({
        type: "warning",
        value: invalidNo
      });
      return;
    } else {
      const requestData = {
        mobileNumber: _data === null || _data === void 0 ? void 0 : _data.mobileNumber,
        tenantId: stateCode,
        userType: "CITIZEN"
      };
      if (compState.otpSentTo == false) {
        const [res, err] = await sendOtp({
          otp: {
            ...requestData,
            ...TYPE_LOGIN
          }
        }, stateCode);
        if (err) {
          const [registerResponse, registerError] = await sendOtp({
            otp: {
              ...requestData,
              name: compState === null || compState === void 0 ? void 0 : compState.name,
              ...TYPE_REGISTER
            }
          }, stateCode);
          if (!registerError) {
            compStateDispatch({
              type: "otpsent",
              value: _data === null || _data === void 0 ? void 0 : _data.mobileNumber,
              isNewUser: true
            });
          } else {
            compStateDispatch({
              type: "error",
              value: registerError
            });
          }
        } else {
          compStateDispatch({
            type: "otpsent",
            value: _data === null || _data === void 0 ? void 0 : _data.mobileNumber
          });
        }
      } else {
        loginOrRegister(_data, d => {
          compStateDispatch({
            type: "success",
            value: "PT_MOBILE_NUM_UPDATED_SUCCESS"
          });
        });
      }
    }
  }, [compState]);
  const loginOrRegister = async (_data, onSuccess) => {
    try {
      compStateDispatch({
        type: "verifyotp"
      });
      const {
        mobileNumber,
        otp
      } = _data;
      if (!(compState !== null && compState !== void 0 && compState.isNewUser)) {
        const {
          ResponseInfo,
          UserRequest: info,
          ...tokens
        } = await Digit.UserService.authenticate({
          username: mobileNumber,
          password: otp,
          tenantId: stateCode,
          userType: "CITIZEN"
        });
        onValidation && onValidation(_data, onSuccess);
      } else {
        const {
          ResponseInfo,
          UserRequest: info,
          ...tokens
        } = await Digit.UserService.registerUser({
          name: compState === null || compState === void 0 ? void 0 : compState.name,
          username: mobileNumber,
          otpReference: otp,
          tenantId: stateCode
        }, stateCode);
        onValidation && onValidation(_data, onSuccess);
      }
    } catch (err) {
      compStateDispatch({
        type: "verifiedotp"
      });
    }
  };
  const resendOtp = useCallback(async () => {
    const data = {
      mobileNumber: compState === null || compState === void 0 ? void 0 : compState.otpSentTo,
      tenantId: stateCode,
      userType: "CITIZEN"
    };
    if (compState !== null && compState !== void 0 && compState.isNewUser) {
      const [res, err] = await sendOtp({
        otp: {
          ...data,
          ...TYPE_REGISTER
        }
      }, stateCode);
    } else {
      const [res, err] = await sendOtp({
        otp: {
          ...data,
          ...TYPE_LOGIN
        }
      }, stateCode);
    }
  }, [compState]);
  const {
    register,
    control,
    handleSubmit,
    getValues,
    reset,
    formState
  } = useForm({
    defaultValues: {
      mobileNumber: "",
      otp: ""
    }
  });
  return /*#__PURE__*/React.createElement("div", {
    className: "popup-module updatePropertyNumber"
  }, /*#__PURE__*/React.createElement("div", {
    className: "popup-close-icon",
    onClick: () => showPopup(false)
  }, /*#__PURE__*/React.createElement(CloseSvg, null)), /*#__PURE__*/React.createElement(Header, null, t("PTUPNO_HEADER")), /*#__PURE__*/React.createElement(SearchForm, {
    onSubmit: onSubmit,
    handleSubmit: handleSubmit
  }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PTUPNO_OWNER_NAME"),
    text: `${(compState === null || compState === void 0 ? void 0 : compState.name) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PTUPNO_CURR_NO"),
    text: `${(compState === null || compState === void 0 ? void 0 : compState.mobileNumber) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(CardLabel, {
    style: {
      marginBottom: "8px"
    }
  }, t("PT_UPDATE_NEWNO")), /*#__PURE__*/React.createElement(MobileNumber, {
    className: "field pt-update-no-field",
    name: "mobileNumber",
    inputRef: register({
      value: getValues("mobileNumber"),
      shouldUnregister: true,
      ...{
        required: "MANDATORY_MOBILE",
        minLength: {
          value: 10,
          message: "CORE_COMMON_MOBILE_ERROR"
        },
        maxLength: {
          value: 10,
          message: "CORE_COMMON_MOBILE_ERROR"
        },
        pattern: {
          value: /[6789][0-9]{9}/,
          message: "CORE_COMMON_MOBILE_ERROR"
        }
      }
    }),
    disable: (compState === null || compState === void 0 ? void 0 : compState.otpSentTo) && true
  }), /*#__PURE__*/React.createElement(CardLabelError, {
    style: {
      marginTop: "-10px"
    }
  }, t(formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$mob = _formState$errors.mobileNumber) === null || _formState$errors$mob === void 0 ? void 0 : _formState$errors$mob.message)), (compState === null || compState === void 0 ? void 0 : compState.otpSentTo) && /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "otp",
    rules: {
      required: "MANDATORY_OTP",
      minLength: {
        value: 6,
        message: "CORE_COMMON_OTP_ERROR"
      }
    },
    render: (props, customProps) => /*#__PURE__*/React.createElement(SelectOtp, {
      userType: "employee",
      config: {
        header: "OTPVERIFICATION",
        cardText: "ENTEROTP",
        nextText: "Next",
        submitBarLabel: "Next"
      },
      onOtpChange: d => {
        props.onChange(d);
      },
      onResend: resendOtp,
      error: !compState.invalid,
      t: t,
      otp: props.value
    })
  })), compState.showToast && /*#__PURE__*/React.createElement(Toast, {
    error: compState.error,
    warning: compState.warning,
    label: t(compState.message),
    onClose: () => {
      compStateDispatch({
        type: "resettoast"
      });
    }
  }), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t(compState !== null && compState !== void 0 && compState.otpSentTo ? "PTUPNO_VERUPD_NO" : "PTUPNO_SENDOTP"),
    submit: true,
    disabled: compState.disable
  })));
};

const defaultState$1 = {
  invalid: false,
  showToast: null,
  error: false,
  warning: false,
  name: "",
  message: "",
  mobileNumber: "",
  previousAction: null,
  disable: false
};
const getConfig = (t, selectFile, setUploadedFile, uploadedFile, UpdateNumberConfig) => {
  var _UpdateNumberConfig$d;
  const doc = (UpdateNumberConfig === null || UpdateNumberConfig === void 0 ? void 0 : (_UpdateNumberConfig$d = UpdateNumberConfig.documents) === null || _UpdateNumberConfig$d === void 0 ? void 0 : _UpdateNumberConfig$d.map(document => {
    return {
      label: t(document.code),
      populators: /*#__PURE__*/React.createElement("div", {
        style: {
          marginBottom: "2rem"
        }
      }, /*#__PURE__*/React.createElement(UploadFile, Object.assign({
        id: document.documentType
      }, document.inputProps, {
        onUpload: selectFile,
        onDelete: () => {
          setUploadedFile(pre => ({
            ...pre,
            [document === null || document === void 0 ? void 0 : document.documentType]: null
          }));
        },
        message: uploadedFile !== null && uploadedFile !== void 0 && uploadedFile[document === null || document === void 0 ? void 0 : document.documentType] ? `1 ${t(`HR_ACTION_FILEUPLOADED`)}` : t(`HR_ACTION_NO_FILEUPLOADED`)
      })), /*#__PURE__*/React.createElement("span", null, t("PT_ATTACH_RESTRICTIONS_SIZE")))
    };
  })) || [];
  return [{
    body: [{
      label: t("PTUPNO_CURR_NO"),
      type: "mobileNumber",
      populators: {
        name: "mobileNumber",
        validation: {
          required: "MANDATORY_MOBILE",
          minLength: {
            value: 10,
            message: "CORE_COMMON_MOBILE_ERROR"
          },
          maxLength: {
            value: 10,
            message: "CORE_COMMON_MOBILE_ERROR"
          },
          pattern: {
            value: /[6789][0-9]{9}/,
            message: "CORE_COMMON_MOBILE_ERROR"
          }
        }
      }
    }, ...doc]
  }];
};
const compStateReducer$1 = (state, action) => {
  switch (action.type) {
    case "verifiedotp":
      return {
        ...state,
        previousAction: action.type,
        message: "",
        disable: false,
        showToast: false,
        error: true,
        warning: false,
        invalid: true
      };
    case "verifyotp":
      return {
        ...state,
        previousAction: action.type,
        message: "",
        disable: true,
        showToast: false,
        error: true,
        warning: false,
        invalid: false
      };
    case "otpsent":
      return {
        ...state,
        previousAction: action.type,
        message: "PT_SEC_OTP_SENT_SUCEESS",
        showToast: true,
        error: false,
        warning: false
      };
    case "resettoast":
      return {
        ...state,
        previousAction: action.type,
        message: "",
        showToast: false,
        error: false,
        warning: false
      };
    case "success":
      return {
        ...state,
        previousAction: action.type,
        message: action.value,
        showToast: true,
        warning: false,
        error: false
      };
    case "warning":
      return {
        ...state,
        previousAction: action.type,
        message: action.value,
        showToast: true,
        warning: true,
        error: false
      };
    case "error":
      return {
        ...state,
        previousAction: action.type,
        message: action.value,
        showToast: true,
        error: true
      };
    case "reset":
      return {
        ...defaultState$1
      };
    default:
      return {
        ...defaultState$1
      };
  }
};
const UpdateNumber$1 = ({
  t,
  onValidation,
  mobileNumber,
  name,
  UpdateNumberConfig
}) => {
  const [compState, compStateDispatch] = useReducer(compStateReducer$1, {
    ...defaultState$1,
    name: name,
    mobileNumber: mobileNumber
  });
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  function selectFile(e) {
    var _e$target, _e$target$files;
    e !== null && e !== void 0 && (_e$target = e.target) !== null && _e$target !== void 0 && (_e$target$files = _e$target.files) !== null && _e$target$files !== void 0 && _e$target$files[0] ? setFile({
      [e.target.id]: e.target.files[0]
    }) : setFile(null);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        var _Object$keys;
        let key = (_Object$keys = Object.keys(file)) === null || _Object$keys === void 0 ? void 0 : _Object$keys[0];
        if (file[key].size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("PT", file[key], Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              setUploadedFile(prev => {
                var _response$data2, _response$data2$files;
                return {
                  ...prev,
                  [key]: response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId
                };
              });
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  const onSubmit = useCallback(async _data => {
    compStateDispatch({
      type: "resettoast"
    });
    let invalidNo = (UpdateNumberConfig === null || UpdateNumberConfig === void 0 ? void 0 : UpdateNumberConfig.invalidNumber) === (_data === null || _data === void 0 ? void 0 : _data.mobileNumber) && "PTUPNO_INVALIDNO_HEADER" || false;
    invalidNo = (_data === null || _data === void 0 ? void 0 : _data.mobileNumber) === compState.mobileNumber ? "PT_SEC_SAME_NUMBER" : invalidNo;
    if (invalidNo) {
      compStateDispatch({
        type: "warning",
        value: invalidNo
      });
      return;
    } else {
      onValidation && onValidation(_data, d => {
        compStateDispatch({
          type: "success",
          value: "PT_MOBILE_NUM_UPDATED_SUCCESS"
        });
      });
    }
  }, [compState]);
  const {
    register,
    control,
    handleSubmit,
    getValues,
    reset,
    formState
  } = useForm({
    defaultValues: {
      mobileNumber: ""
    }
  });
  const config = useMemo(() => getConfig(t, selectFile, setUploadedFile, uploadedFile, UpdateNumberConfig), [t, setUploadedFile, uploadedFile, UpdateNumberConfig]);
  return /*#__PURE__*/React.createElement("div", {
    className: "popup-module updateNumberEmployee"
  }, /*#__PURE__*/React.createElement(FormComposer, {
    config: config,
    noBoxShadow: true,
    inline: true,
    submitInForm: true,
    onSubmit: _data => onSubmit({
      ..._data,
      ...uploadedFile
    }),
    label: "ES_COMMON_UPDATE",
    defaultValues: {
      mobileNumber: ""
    },
    formId: "modal-action"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PTUPNO_OWNER_NAME"),
    text: `${(compState === null || compState === void 0 ? void 0 : compState.name) || t("CS_NA")}`
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PTUPNO_CURR_NO"),
    text: `${(compState === null || compState === void 0 ? void 0 : compState.mobileNumber) || t("CS_NA")}`
  })))), compState.showToast && /*#__PURE__*/React.createElement(Toast, {
    error: compState.error,
    warning: compState.warning,
    label: t(compState.message),
    onClose: () => {
      compStateDispatch({
        type: "resettoast"
      });
    }
  }));
};

const ApplicationTable = ({
  t,
  currentPage,
  columns,
  data,
  getCellProps,
  disableSort,
  onSort,
  onNextPage,
  onPrevPage,
  onPageSizeChange,
  pageSizeLimit,
  sortParams,
  totalRecords
}) => {
  return /*#__PURE__*/React.createElement(Table, {
    t: t,
    data: data,
    currentPage: currentPage,
    columns: columns,
    getCellProps: getCellProps,
    onNextPage: onNextPage,
    onPrevPage: onPrevPage,
    pageSizeLimit: pageSizeLimit,
    disableSort: disableSort,
    onPageSizeChange: onPageSizeChange,
    onSort: onSort,
    sortParams: sortParams,
    totalRecords: totalRecords
  });
};

const InboxLinks = ({
  parentRoute,
  businessService
}) => {
  const {
    t
  } = useTranslation();
  const allLinks = [{
    text: "ES_TITLE_NEW_REGISTRATION",
    link: "/digit-ui/employee/pt/new-application",
    businessService: "PT",
    roles: ["PT_CEMP"]
  }, {
    text: "PT_SEARCH_PROPERTY",
    link: `/digit-ui/employee/pt/search`,
    businessService: "PT",
    roles: []
  }, {
    text: "ES_COMMON_APPLICATION_SEARCH",
    link: `/digit-ui/employee/pt/application-search`,
    businessService: "PT",
    roles: []
  }];
  const [links, setLinks] = useState([]);
  const {
    roles: userRoles
  } = Digit.UserService.getUser().info;
  useEffect(() => {
    let linksToShow = allLinks.filter(e => e.businessService === businessService).filter(({
      roles
    }) => roles.some(e => userRoles.map(({
      code
    }) => code).includes(e)) || !(roles !== null && roles !== void 0 && roles.length));
    setLinks(linksToShow);
  }, []);
  const GetLogo = () => /*#__PURE__*/React.createElement("div", {
    className: "header"
  }, /*#__PURE__*/React.createElement("span", {
    className: "logo"
  }, /*#__PURE__*/React.createElement(PropertyHouse, null)), " ", /*#__PURE__*/React.createElement("span", {
    className: "text"
  }, t("ES_TITLE_PROPERTY_TAX")));
  return (
    /*#__PURE__*/
    React.createElement(Card, {
      className: "employeeCard filter inboxLinks"
    }, /*#__PURE__*/React.createElement("div", {
      className: "complaint-links-container"
    }, GetLogo(), /*#__PURE__*/React.createElement("div", {
      className: "body"
    }, links.map(({
      link,
      text,
      hyperlink: _hyperlink = false,
      roles: _roles = []
    }, index) => {
      return /*#__PURE__*/React.createElement("span", {
        className: "link",
        key: index
      }, _hyperlink ? /*#__PURE__*/React.createElement("a", {
        href: link
      }, text) : /*#__PURE__*/React.createElement(Link, {
        to: link
      }, t(text)));
    }))))
  );
};

const fieldComponents = {
  date: DatePicker,
  mobileNumber: MobileNumber,
  Locality: props => /*#__PURE__*/React.createElement(Localities, {
    tenantId: Digit.ULBService.getCurrentTenantId(),
    selectLocality: props.onChange,
    keepNull: false,
    boundaryType: "revenue",
    selected: props.value,
    disableLoader: true,
    sortFn: (a, b) => a.i18nkey < b.i18nkey ? -1 : 1
  })
};
const SearchApplication = ({
  onSearch,
  type,
  onClose,
  searchFields,
  searchParams,
  isInboxPage,
  defaultSearchParams,
  clearSearch: _clearSearch
}) => {
  var _searchFields$filter;
  const {
    t
  } = useTranslation();
  const {
    handleSubmit,
    reset,
    watch,
    control,
    setError,
    clearErrors,
    formState,
    setValue
  } = useForm({
    defaultValues: isInboxPage ? searchParams : {
      locality: null,
      city: null,
      ...searchParams
    }
  });
  const form = watch();
  const formValueEmpty = () => {
    var _form$locality;
    let isEmpty = true;
    Object.keys(form).forEach(key => {
      if (!["locality", "city"].includes(key) && form[key]) isEmpty = false;
    });
    if (searchFields !== null && searchFields !== void 0 && searchFields.find(e => e.name === "locality") && !(form !== null && form !== void 0 && (_form$locality = form.locality) !== null && _form$locality !== void 0 && _form$locality.code)) isEmpty = true;
    return isEmpty;
  };
  const mobileView = innerWidth <= 640;
  useEffect(() => {
    searchFields.forEach(({
      pattern,
      name,
      maxLength,
      minLength,
      errorMessages,
      ...el
    }) => {
      const value = form[name];
      const error = formState.errors[name];
      if (pattern) {
        if (!new RegExp(pattern).test(value) && !error) setError(name, {
          type: "pattern",
          message: t(errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages.pattern) || t(`PATTERN_${name.toUpperCase()}_FAILED`)
        });else if (new RegExp(pattern).test(value) && (error === null || error === void 0 ? void 0 : error.type) === "pattern") clearErrors([name]);
      }
      if (minLength) {
        if ((value === null || value === void 0 ? void 0 : value.length) < minLength && !error) setError(name, {
          type: "minLength",
          message: t((errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages.minLength) || `MINLENGTH_${name.toUpperCase()}_FAILED`)
        });else if ((value === null || value === void 0 ? void 0 : value.length) >= minLength && (error === null || error === void 0 ? void 0 : error.type) === "minLength") clearErrors([name]);
      }
      if (maxLength) {
        if ((value === null || value === void 0 ? void 0 : value.length) > maxLength && !error) setError(name, {
          type: "maxLength",
          message: t((errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages.maxLength) || `MAXLENGTH_${name.toUpperCase()}_FAILED`)
        });else if ((value === null || value === void 0 ? void 0 : value.length) <= maxLength && (error === null || error === void 0 ? void 0 : error.type) === "maxLength") clearErrors([name]);
      }
    });
  }, [form, formState, setError, clearErrors]);
  const onSubmitInput = data => {
    if (!data.mobileNumber) {
      delete data.mobileNumber;
    }
    data.delete = [];
    searchFields.forEach(field => {
      if (!data[field.name]) data.delete.push(field.name);
    });
    onSearch(data);
    if (type === "mobile") {
      onClose();
    }
  };
  function clearSearch() {
    const resetValues = searchFields.reduce((acc, field) => ({
      ...acc,
      [field === null || field === void 0 ? void 0 : field.name]: ""
    }), {});
    reset(resetValues);
    if (isInboxPage) {
      const _newParams = {
        ...searchParams
      };
      _newParams.delete = [];
      searchFields.forEach(e => {
        _newParams.delete.push(e === null || e === void 0 ? void 0 : e.name);
      });
      onSearch({
        ..._newParams
      });
    } else {
      _clearSearch();
    }
  }
  const clearAll = mobileView => {
    const mobileViewStyles = mobileView ? {
      margin: 0
    } : {};
    return /*#__PURE__*/React.createElement(LinkLabel, {
      style: {
        display: "inline",
        ...mobileViewStyles
      },
      onClick: clearSearch
    }, t("ES_COMMON_CLEAR_SEARCH"));
  };
  return /*#__PURE__*/React.createElement("form", {
    onSubmit: handleSubmit(onSubmitInput)
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "search-container",
    style: {
      width: "auto",
      marginLeft: isInboxPage ? "24px" : "revert"
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "search-complaint-container"
  }, (type === "mobile" || mobileView) && /*#__PURE__*/React.createElement("div", {
    className: "complaint-header"
  }, /*#__PURE__*/React.createElement("h2", null, t("ES_COMMON_SEARCH_BY")), /*#__PURE__*/React.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React.createElement(CloseSvg, null))), /*#__PURE__*/React.createElement("div", {
    className: "complaint-input-container for-pt " + (!isInboxPage ? "for-search" : ""),
    style: {
      width: "100%",
      display: "grid"
    }
  }, searchFields === null || searchFields === void 0 ? void 0 : (_searchFields$filter = searchFields.filter(e => true)) === null || _searchFields$filter === void 0 ? void 0 : _searchFields$filter.map((input, index) => {
    var _formState$dirtyField, _formState$errors, _formState$errors$inp;
    return /*#__PURE__*/React.createElement("div", {
      key: input.name,
      className: "input-fields"
    }, /*#__PURE__*/React.createElement("span", {
      className: "mobile-input"
    }, /*#__PURE__*/React.createElement(Label, null, t(input.label) + ` ${input.isMendatory ? "*" : ""}`), !input.type ? /*#__PURE__*/React.createElement(Controller, {
      render: props => {
        return /*#__PURE__*/React.createElement(TextInput, {
          onChange: props.onChange,
          value: props.value
        });
      },
      name: input.name,
      control: control,
      defaultValue: ""
    }) : /*#__PURE__*/React.createElement(Controller, {
      render: props => {
        const Comp = fieldComponents === null || fieldComponents === void 0 ? void 0 : fieldComponents[input.type];
        return /*#__PURE__*/React.createElement(Comp, {
          formValue: form,
          setValue: setValue,
          onChange: props.onChange,
          value: props.value
        });
      },
      name: input.name,
      control: control,
      defaultValue: ""
    })), formState !== null && formState !== void 0 && (_formState$dirtyField = formState.dirtyFields) !== null && _formState$dirtyField !== void 0 && _formState$dirtyField[input.name] ? /*#__PURE__*/React.createElement("span", {
      style: {
        fontWeight: "700",
        color: "rgba(212, 53, 28)",
        paddingLeft: "8px",
        marginTop: "-20px",
        fontSize: "12px"
      },
      className: "inbox-search-form-error"
    }, formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$inp = _formState$errors[input.name]) === null || _formState$errors$inp === void 0 ? void 0 : _formState$errors$inp.message) : null);
  }), isInboxPage && /*#__PURE__*/React.createElement("div", {
    style: {
      gridColumn: "2/3",
      textAlign: "right",
      paddingTop: "10px"
    },
    className: "input-fields"
  }, /*#__PURE__*/React.createElement("div", null, clearAll())), type === "desktop" && !mobileView && /*#__PURE__*/React.createElement("div", {
    style: {
      maxWidth: "unset",
      marginLeft: "unset"
    },
    className: "search-submit-wrapper"
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    className: "submit-bar-search",
    label: t("ES_COMMON_SEARCH"),
    disabled: !!Object.keys(formState.errors).length || formValueEmpty(),
    submit: true
  }), !isInboxPage && /*#__PURE__*/React.createElement("div", null, clearAll()))))), (type === "mobile" || mobileView) && /*#__PURE__*/React.createElement(ActionBar, {
    className: "clear-search-container"
  }, /*#__PURE__*/React.createElement("button", {
    className: "clear-search",
    style: {
      flex: 1
    }
  }, clearAll(mobileView)), /*#__PURE__*/React.createElement(SubmitBar, {
    disabled: !!Object.keys(formState.errors).length,
    label: t("ES_COMMON_SEARCH"),
    style: {
      flex: 1
    },
    submit: true
  }))));
};

const DesktopInbox = ({
  tableConfig,
  filterComponent,
  ...props
}) => {
  const {
    data,
    useNewInboxAPI
  } = props;
  const {
    t
  } = useTranslation();
  const [FilterComponent, setComp] = useState(() => {
    var _Digit$ComponentRegis;
    return (_Digit$ComponentRegis = Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent(filterComponent);
  });
  const [EmptyInboxComp, setEmptyInboxComp] = useState(() => {
    var _Digit$ComponentRegis2;
    const com = (_Digit$ComponentRegis2 = Digit.ComponentRegistryService) === null || _Digit$ComponentRegis2 === void 0 ? void 0 : _Digit$ComponentRegis2.getComponent(props.EmptyResultInboxComp);
    return com;
  });
  const [clearSearchCalled, setClearSearchCalled] = useState(false);
  const columns = React.useMemo(() => props.isSearch ? tableConfig.searchColumns(props) : tableConfig.inboxColumns(props) || [], []);
  let result;
  if (props.isLoading) {
    result = /*#__PURE__*/React.createElement(Loader, null);
  } else if (clearSearchCalled) {
    result = null;
  } else if (!data || (data === null || data === void 0 ? void 0 : data.length) === 0 || useNewInboxAPI && data !== null && data !== void 0 && data[0].dataEmpty) {
    result = EmptyInboxComp && /*#__PURE__*/React.createElement(EmptyInboxComp, {
      data: data
    }) || ((data === null || data === void 0 ? void 0 : data.length) === 0 || useNewInboxAPI && data !== null && data !== void 0 && data[0].dataEmpty ? /*#__PURE__*/React.createElement(Card, {
      style: {
        marginTop: 20
      }
    }, t("CS_MYAPPLICATIONS_NO_APPLICATION").split("\\n").map((text, index) => /*#__PURE__*/React.createElement("p", {
      key: index,
      style: {
        textAlign: "center"
      }
    }, text))) : /*#__PURE__*/React.createElement(Loader, null));
  } else if ((data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React.createElement(ApplicationTable, {
      t: t,
      data: data,
      columns: columns,
      getCellProps: cellInfo => {
        return {
          style: {
            minWidth: cellInfo.column.Header === t("ES_INBOX_APPLICATION_NO") ? "240px" : "",
            padding: "20px 18px",
            fontSize: "16px"
          }
        };
      },
      onPageSizeChange: props.onPageSizeChange,
      currentPage: props.currentPage,
      onNextPage: props.onNextPage,
      onPrevPage: props.onPrevPage,
      pageSizeLimit: props.pageSizeLimit,
      onSort: props.onSort,
      disableSort: props.disableSort,
      sortParams: props.sortParams,
      totalRecords: props.totalRecords
    });
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "inbox-container"
  }, !props.isSearch && /*#__PURE__*/React.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React.createElement(InboxLinks, {
    parentRoute: props.parentRoute,
    businessService: props.moduleCode
  }), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(FilterComponent, {
    defaultSearchParams: props.defaultSearchParams,
    onFilterChange: props.onFilterChange,
    searchParams: props.searchParams,
    type: "desktop",
    useNewInboxAPI: useNewInboxAPI,
    statusMap: useNewInboxAPI ? data === null || data === void 0 ? void 0 : data[0].statusMap : null,
    moduleCode: props.moduleCode
  }))), /*#__PURE__*/React.createElement("div", {
    style: {
      flex: 1
    }
  }, /*#__PURE__*/React.createElement(SearchApplication, {
    defaultSearchParams: props.defaultSearchParams,
    onSearch: d => {
      props.onSearch(d);
      setClearSearchCalled(false);
    },
    type: "desktop",
    searchFields: props.searchFields,
    isInboxPage: !(props !== null && props !== void 0 && props.isSearch),
    searchParams: props.searchParams,
    clearSearch: () => setClearSearchCalled(true)
  }), /*#__PURE__*/React.createElement("div", {
    className: "result",
    style: {
      marginLeft: !(props !== null && props !== void 0 && props.isSearch) ? "24px" : "",
      flex: 1
    }
  }, result)));
};

const SortBy = props => {
  const {
    t
  } = useTranslation();
  const [selectedOption, setSelectedOption] = useState(() => {
    var _props$sortParams, _props$sortParams$;
    return (_props$sortParams = props.sortParams) !== null && _props$sortParams !== void 0 && (_props$sortParams$ = _props$sortParams[0]) !== null && _props$sortParams$ !== void 0 && _props$sortParams$.desc ? {
      code: "DESC",
      name: t("ES_INBOX_DATE_LATEST_FIRST")
    } : {
      code: "ASC",
      name: t("ES_INBOX_DATE_LATEST_LAST")
    };
  });
  function clearAll() {}
  function onSort(option) {
    props.onSort([{
      id: "createdTime",
      desc: option.code === "DESC" ? true : false
    }]);
    props.onClose();
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "filter"
  }, /*#__PURE__*/React.createElement("div", {
    className: "filter-card"
  }, /*#__PURE__*/React.createElement("div", {
    className: "heading"
  }, /*#__PURE__*/React.createElement("div", {
    className: "filter-label"
  }, t("SORT_BY"), ":"), /*#__PURE__*/React.createElement("div", {
    className: "clearAll",
    onClick: clearAll
  }, t("ES_COMMON_CLEAR_ALL")), props.type === "desktop" && /*#__PURE__*/React.createElement("span", {
    className: "clear-search",
    onClick: clearAll
  }, t("ES_COMMON_CLEAR_ALL")), props.type === "mobile" && /*#__PURE__*/React.createElement("span", {
    onClick: props.onClose
  }, /*#__PURE__*/React.createElement(CloseSvg, null))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtons, {
    onSelect: onSort,
    selectedOption: selectedOption,
    optionsKey: "name",
    options: [{
      code: "DESC",
      name: t("ES_INBOX_DATE_LATEST_FIRST")
    }, {
      code: "ASC",
      name: t("ES_INBOX_DATE_LATEST_LAST")
    }]
  })))));
};

const ApplicationCard = ({
  t,
  data,
  onFilterChange,
  onSearch,
  onSort,
  serviceRequestIdKey,
  isFstpOperator,
  isLoading,
  isSearch,
  searchParams,
  searchFields,
  sortParams,
  linkPrefix,
  removeParam,
  filterComponent
}) => {
  const [type, setType] = useState(isSearch ? "SEARCH" : "");
  const [popup, setPopup] = useState(isSearch ? true : false);
  const [_sortparams, setSortParams] = useState(sortParams);
  const [FilterComp] = useState(() => {
    var _Digit$ComponentRegis;
    return (_Digit$ComponentRegis = Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent(filterComponent);
  });
  const onSearchFilter = params => {
    onFilterChange(params);
    setPopup(false);
  };
  useEffect(() => {
    if (type) setPopup(true);
  }, [type]);
  const handlePopupClose = () => {
    setPopup(false);
    setType("");
    setSortParams(sortParams);
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  let result;
  if (!data || (data === null || data === void 0 ? void 0 : data.length) === 0) {
    result = /*#__PURE__*/React.createElement(Card, {
      style: {
        marginTop: 20
      }
    }, t("CS_MYAPPLICATIONS_NO_APPLICATION").split("\\n").map((text, index) => /*#__PURE__*/React.createElement("p", {
      key: index,
      style: {
        textAlign: "center"
      }
    }, text)));
  } else if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React.createElement(DetailsCard, {
      data: data,
      serviceRequestIdKey: serviceRequestIdKey,
      linkPrefix: linkPrefix ? linkPrefix : "/digit-ui/employee/pt/"
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "searchBox"
  }, onSearch && /*#__PURE__*/React.createElement(SearchAction, {
    text: "SEARCH",
    handleActionClick: () => {
      setType("SEARCH");
      setPopup(true);
    }
  }), !isSearch && onFilterChange && /*#__PURE__*/React.createElement(FilterAction, {
    text: "FILTER",
    handleActionClick: () => {
      setType("FILTER");
      setPopup(true);
    }
  }), /*#__PURE__*/React.createElement(FilterAction, {
    text: "SORT",
    handleActionClick: () => {
      setType("SORT");
      setPopup(true);
    }
  })), result, popup && /*#__PURE__*/React.createElement(PopUp, null, type === "FILTER" && /*#__PURE__*/React.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React.createElement(FilterComp, {
    onFilterChange: onSearchFilter,
    Close: handlePopupClose,
    type: "mobile",
    searchParams: searchParams
  })), type === "SORT" && /*#__PURE__*/React.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React.createElement(SortBy, {
    type: "mobile",
    sortParams: sortParams,
    onClose: handlePopupClose,
    onSort: onSort
  })), type === "SEARCH" && /*#__PURE__*/React.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React.createElement(SearchApplication, {
    type: "mobile",
    onClose: handlePopupClose,
    onSearch: onSearch,
    isFstpOperator: isFstpOperator,
    searchParams: searchParams,
    searchFields: searchFields
  }))));
};

const ApplicationLinks = ({
  linkPrefix,
  classNameForMobileView: _classNameForMobileView = ""
}) => {
  const {
    t
  } = useTranslation();
  const allLinks = [{
    text: t("ES_TITLE_NEW_REGISTRATION"),
    link: "/digit-ui/employee/pt/new-application"
  }, {
    text: t("ES_TITILE_SEARCH_APPLICATION"),
    link: `${linkPrefix}/search`
  }];
  const [links, setLinks] = useState([]);
  const {
    roles
  } = Digit.UserService.getUser().info;
  const hasAccess = accessTo => {
    return roles.filter(role => accessTo.includes(role.code)).length;
  };
  useEffect(() => {
    let linksToShow = [];
    allLinks.forEach(link => {
      if (link.accessTo) {
        if (hasAccess(link.accessTo)) {
          linksToShow.push(link);
        }
      } else {
        linksToShow.push(link);
      }
    });
    setLinks(linksToShow);
  }, []);
  const GetLogo = () => /*#__PURE__*/React.createElement("div", {
    className: "header"
  }, /*#__PURE__*/React.createElement("span", {
    className: "logo"
  }, /*#__PURE__*/React.createElement(ShippingTruck, null)), " ", /*#__PURE__*/React.createElement("span", {
    className: "text"
  }, t("ES_TITLE_PROPERTY_TAX")));
  return /*#__PURE__*/React.createElement(Card, {
    className: "employeeCard filter"
  }, /*#__PURE__*/React.createElement("div", {
    className: `complaint-links-container ${_classNameForMobileView}`
  }, GetLogo(), /*#__PURE__*/React.createElement("div", {
    className: "body"
  }, links.map(({
    link,
    text
  }, index) => /*#__PURE__*/React.createElement("span", {
    className: "link",
    key: index
  }, /*#__PURE__*/React.createElement(Link, {
    to: link
  }, text))))));
};

const MobileInbox = ({
  data,
  isLoading,
  isSearch,
  searchFields,
  onFilterChange,
  onSearch,
  onSort,
  parentRoute,
  searchParams,
  sortParams,
  linkPrefix,
  tableConfig,
  filterComponent
}) => {
  const {
    t
  } = useTranslation();
  const getData = () => {
    return data === null || data === void 0 ? void 0 : data.map(dataObj => {
      const obj = {};
      const columns = isSearch ? tableConfig.searchColumns() : tableConfig.inboxColumns();
      columns.forEach(el => {
        if (el.mobileCell) obj[el.Header] = el.mobileCell(dataObj);
      });
      return obj;
    });
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {
      padding: 0
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "filters-container"
  }, !isSearch && /*#__PURE__*/React.createElement(ApplicationLinks, {
    classNameForMobileView: "linksWrapperForMobileInbox",
    linkPrefix: parentRoute,
    isMobile: true
  }), /*#__PURE__*/React.createElement(ApplicationCard, {
    t: t,
    data: getData(),
    onFilterChange: onFilterChange,
    isLoading: isLoading,
    isSearch: isSearch,
    onSearch: onSearch,
    onSort: onSort,
    searchParams: searchParams,
    searchFields: searchFields,
    linkPrefix: linkPrefix,
    sortParams: sortParams,
    serviceRequestIdKey: tableConfig === null || tableConfig === void 0 ? void 0 : tableConfig.serviceRequestIdKey,
    filterComponent: filterComponent
  }))));
};

const Inbox = ({
  useNewInboxAPI,
  parentRoute,
  moduleCode: _moduleCode = "PT",
  initialStates: _initialStates = {},
  filterComponent,
  isInbox,
  rawWfHandler,
  rawSearchHandler,
  combineResponse,
  wfConfig,
  searchConfig,
  middlewaresWf,
  middlewareSearch,
  EmptyResultInboxComp
}) => {
  var _sortParams$, _sortParams$2, _sortParams$3, _sortParams$4, _rest$data;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    t
  } = useTranslation();
  const [enableSarch, setEnableSearch] = useState(() => isInbox ? {} : {
    enabled: false
  });
  const [TableConfig, setTableConfig] = useState(() => {
    var _Digit$ComponentRegis;
    return (_Digit$ComponentRegis = Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("PTInboxTableConfig");
  });
  const [pageOffset, setPageOffset] = useState(_initialStates.pageOffset || 0);
  const [pageSize, setPageSize] = useState(_initialStates.pageSize || 10);
  const [sortParams, setSortParams] = useState(_initialStates.sortParams || [{
    id: "createdTime",
    desc: false
  }]);
  const [searchParams, setSearchParams] = useState(_initialStates.searchParams || {});
  let isMobile = window.Digit.Utils.browser.isMobile();
  let paginationParams = isMobile ? {
    limit: 100,
    offset: 0,
    sortBy: sortParams === null || sortParams === void 0 ? void 0 : (_sortParams$ = sortParams[0]) === null || _sortParams$ === void 0 ? void 0 : _sortParams$.id,
    sortOrder: sortParams !== null && sortParams !== void 0 && (_sortParams$2 = sortParams[0]) !== null && _sortParams$2 !== void 0 && _sortParams$2.desc ? "DESC" : "ASC"
  } : {
    limit: pageSize,
    offset: pageOffset,
    sortBy: sortParams === null || sortParams === void 0 ? void 0 : (_sortParams$3 = sortParams[0]) === null || _sortParams$3 === void 0 ? void 0 : _sortParams$3.id,
    sortOrder: sortParams !== null && sortParams !== void 0 && (_sortParams$4 = sortParams[0]) !== null && _sortParams$4 !== void 0 && _sortParams$4.desc ? "DESC" : "ASC"
  };
  const {
    isFetching,
    isLoading: hookLoading,
    searchResponseKey,
    data,
    searchFields,
    ...rest
  } = useNewInboxAPI ? Digit.Hooks.useNewInboxGeneral({
    tenantId,
    ModuleCode: _moduleCode,
    filters: {
      ...searchParams,
      ...paginationParams,
      sortParams
    }
  }) : Digit.Hooks.useInboxGeneral({
    tenantId,
    businessService: _moduleCode,
    isInbox,
    filters: {
      ...searchParams,
      ...paginationParams,
      sortParams
    },
    rawWfHandler,
    rawSearchHandler,
    combineResponse,
    wfConfig,
    searchConfig: {
      ...enableSarch,
      ...searchConfig
    },
    middlewaresWf,
    middlewareSearch
  });
  useEffect(() => {
    setPageOffset(0);
  }, [searchParams]);
  const fetchNextPage = () => {
    setPageOffset(prevState => prevState + pageSize);
  };
  const fetchPrevPage = () => {
    setPageOffset(prevState => prevState - pageSize);
  };
  const handleFilterChange = filterParam => {
    let keys_to_delete = filterParam.delete;
    let _new = {
      ...searchParams,
      ...filterParam
    };
    if (keys_to_delete) keys_to_delete.forEach(key => delete _new[key]);
    delete filterParam.delete;
    setSearchParams({
      ..._new
    });
    setEnableSearch({
      enabled: true
    });
  };
  const handleSort = useCallback(args => {
    if (args.length === 0) return;
    setSortParams(args);
  }, []);
  const handlePageSizeChange = e => {
    setPageSize(Number(e.target.value));
  };
  if ((rest === null || rest === void 0 ? void 0 : (_rest$data = rest.data) === null || _rest$data === void 0 ? void 0 : _rest$data.length) !== null) {
    if (isMobile) {
      var _res;
      return /*#__PURE__*/React.createElement(MobileInbox, {
        data: data,
        isLoading: hookLoading,
        isSearch: !isInbox,
        searchFields: searchFields,
        onFilterChange: handleFilterChange,
        onSearch: handleFilterChange,
        onSort: handleSort,
        parentRoute: parentRoute,
        searchParams: searchParams,
        sortParams: sortParams,
        linkPrefix: `${parentRoute}/application-details/`,
        tableConfig: rest !== null && rest !== void 0 && rest.tableConfig ? (_res = res) === null || _res === void 0 ? void 0 : _res.tableConfig : TableConfig(t)["PT"],
        filterComponent: filterComponent,
        EmptyResultInboxComp: EmptyResultInboxComp,
        useNewInboxAPI: useNewInboxAPI
      });
    } else {
      var _data$;
      return /*#__PURE__*/React.createElement("div", null, isInbox && /*#__PURE__*/React.createElement(Header, null, t("ES_COMMON_INBOX")), !isInbox && /*#__PURE__*/React.createElement(Header, null, t("SEARCH_PROPERTY")), /*#__PURE__*/React.createElement(DesktopInbox, {
        moduleCode: _moduleCode,
        data: data,
        tableConfig: TableConfig(t)["PT"],
        isLoading: hookLoading,
        defaultSearchParams: _initialStates.searchParams,
        isSearch: !isInbox,
        onFilterChange: handleFilterChange,
        searchFields: searchFields,
        onSearch: handleFilterChange,
        onSort: handleSort,
        onNextPage: fetchNextPage,
        onPrevPage: fetchPrevPage,
        currentPage: Math.floor(pageOffset / pageSize),
        pageSizeLimit: pageSize,
        disableSort: false,
        onPageSizeChange: handlePageSizeChange,
        parentRoute: parentRoute,
        searchParams: searchParams,
        sortParams: sortParams,
        totalRecords: Number(data === null || data === void 0 ? void 0 : (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.totalCount),
        filterComponent: filterComponent,
        EmptyResultInboxComp: EmptyResultInboxComp,
        useNewInboxAPI: useNewInboxAPI
      }));
    }
  }
};

const printReciept = async (businessService, receiptNumber) => {
  await Digit.Utils.downloadReceipt(null, businessService, "consolidatedreceipt", undefined, receiptNumber);
};
const getFormattedDate = date => {
  const dateArray = new Date(date).toString().split(" ");
  if (dateArray.length > 0) {
    return dateArray[2] + "-" + dateArray[1] + "-" + dateArray[3];
  } else {
    return "dd-mmm-yyyy";
  }
};
const getBillPeriod = (billDetails = []) => {
  let latest = billDetails.sort((x, y) => y.fromPeriod - x.fromPeriod);
  const billPeriod = getFormattedDate(latest[latest.length - 1].fromPeriod) + " to " + getFormattedDate(latest[0].toPeriod);
  return billPeriod;
};
const PaymentDetails = () => {
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  let {
    id: applicationNumber
  } = useParams();
  const index = applicationNumber.indexOf("?");
  if (index != -1) applicationNumber = applicationNumber.slice(0, index);
  const [paymentObject, setPaymentObject] = useState([]);
  const isMobile = window.Digit.Utils.browser.isMobile();
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.receipts.useReceiptsSearch({
    businessServices: "PT",
    consumerCodes: applicationNumber
  }, tenantId, [], false);
  useEffect(() => {
    if (data) {
      var _data$Payments;
      setPaymentObject(data === null || data === void 0 ? void 0 : (_data$Payments = data.Payments) === null || _data$Payments === void 0 ? void 0 : _data$Payments.map(payment => {
        return {
          receiptNumber: payment.paymentDetails[0].receiptNumber,
          billPeriod: getBillPeriod(payment.paymentDetails[0].bill.billDetails),
          transactionDate: getFormattedDate(payment.transactionDate),
          billNo: payment.paymentDetails[0].bill.billNumber,
          paymentStatus: payment.paymentStatus ? `CS_${payment.paymentStatus}` : "PT_NA",
          amountPaid: payment.totalAmountPaid === 0 ? "0" : payment.totalAmountPaid
        };
      }));
    }
  }, [data]);
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, t("PT_PAYMENT_HISTORY")), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      paddingBottom: "8px",
      marginBottom: "8px"
    }
  }, /*#__PURE__*/React.createElement("h2", {
    style: isMobile ? {
      marginLeft: "15px",
      fontSize: "16px",
      lineHeight: "24px",
      width: "30%",
      fontWeight: "700"
    } : {
      fontSize: "16px",
      lineHeight: "24px",
      width: "30%",
      fontWeight: "700"
    }
  }, t("PT_PROPERTY_PTUID")), /*#__PURE__*/React.createElement("div", {
    style: {
      whiteSpace: "pre",
      width: "50%",
      fontSize: "16px",
      lineHeight: "24px"
    }
  }, applicationNumber)), paymentObject.length > 0 ? paymentObject === null || paymentObject === void 0 ? void 0 : paymentObject.map(payment => /*#__PURE__*/React.createElement("div", {
    style: isMobile ? {} : {
      marginLeft: "-16px"
    }
  }, /*#__PURE__*/React.createElement(Card, {
    style: isMobile ? {
      marginBottom: "10px"
    } : {}
  }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_HISTORY_BILL_PERIOD"),
    text: payment === null || payment === void 0 ? void 0 : payment.billPeriod,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_HISTORY_BILL_NO"),
    text: payment === null || payment === void 0 ? void 0 : payment.billNo,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_HISTORY_RECEIPT_NO"),
    text: payment === null || payment === void 0 ? void 0 : payment.receiptNumber,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_HISTORY_PAYMENT_DATE"),
    text: payment === null || payment === void 0 ? void 0 : payment.transactionDate,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_HISTORY_AMOUNT_PAID"),
    text: payment === null || payment === void 0 ? void 0 : payment.amountPaid
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_HISTORY_PAYMENT_STATUS"),
    text: t(payment === null || payment === void 0 ? void 0 : payment.paymentStatus),
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(LinkLabel, {
    style: isMobile ? {
      marginLeft: "0px"
    } : {},
    onClick: () => printReciept("PT", payment === null || payment === void 0 ? void 0 : payment.receiptNumber)
  }, t("PT_DOWNLOAD_RECEIPT")))))) : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardText, null, t("PT_NO_PAYMENTS_HISTORY"))));
};

const SearchFields = ({
  register,
  control,
  reset,
  tenantId,
  t,
  formState,
  setShowToast,
  previousPage
}) => {
  var _formState$errors, _formState$errors$mob;
  const applicationTypes = [{
    code: "CREATE",
    i18nKey: "CREATE"
  }, {
    code: "UPDATE",
    i18nKey: "UPDATE"
  }, {
    code: "MUTATION",
    i18nKey: "MUTATION"
  }];
  const applicationStatuses = [{
    code: "ACTIVE",
    i18nKey: "WF_PT_ACTIVE"
  }, {
    code: "INACTIVE",
    i18nKey: "WF_PT_INACTIVE"
  }, {
    code: "INWORKFLOW",
    i18nKey: "WF_PT_INWORKFLOW"
  }];
  return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_APPLICATION_NO_LABEL")), /*#__PURE__*/React.createElement(TextInput, {
    name: "acknowledgementIds",
    inputRef: register({})
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_SEARCHPROPERTY_TABEL_PID")), /*#__PURE__*/React.createElement(TextInput, {
    name: "propertyIds",
    inputRef: register({})
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_OWNER_MOBILE_NO")), /*#__PURE__*/React.createElement(MobileNumber, {
    name: "mobileNumber",
    inputRef: register({
      minLength: {
        value: 10,
        message: t("CORE_COMMON_MOBILE_ERROR")
      },
      maxLength: {
        value: 10,
        message: t("CORE_COMMON_MOBILE_ERROR")
      },
      pattern: {
        value: /[6789][0-9]{9}/,
        message: t("CORE_COMMON_MOBILE_ERROR")
      }
    }),
    type: "number",
    componentInFront: /*#__PURE__*/React.createElement("div", {
      className: "employee-card-input employee-card-input--front"
    }, "+91")
  }), /*#__PURE__*/React.createElement(CardLabelError, null, formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$mob = _formState$errors["mobileNumber"]) === null || _formState$errors$mob === void 0 ? void 0 : _formState$errors$mob.message)), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_SEARCHPROPERTY_TABEL_APPLICATIONTYPE")), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "creationReason",
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      option: applicationTypes,
      optionKey: "i18nKey",
      t: t,
      disable: false
    })
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("ES_SEARCH_PROPERTY_STATUS")), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "status",
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      option: applicationStatuses,
      optionKey: "i18nKey",
      t: t,
      disable: false
    })
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_FROM_DATE")), /*#__PURE__*/React.createElement(Controller, {
    render: props => /*#__PURE__*/React.createElement(DatePicker, {
      date: props.value,
      disabled: false,
      onChange: props.onChange
    }),
    name: "fromDate",
    control: control
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_TO_DATE")), /*#__PURE__*/React.createElement(Controller, {
    render: props => /*#__PURE__*/React.createElement(DatePicker, {
      date: props.value,
      disabled: false,
      onChange: props.onChange
    }),
    name: "toDate",
    control: control
  })), /*#__PURE__*/React.createElement(SearchField, {
    className: "submit"
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("ES_COMMON_SEARCH"),
    submit: true
  }), /*#__PURE__*/React.createElement("p", {
    style: {
      marginTop: "10px"
    },
    onClick: () => {
      reset({
        acknowledgementIds: "",
        fromDate: "",
        toDate: "",
        propertyIds: "",
        mobileNumber: "",
        status: "",
        creationReason: "",
        offset: 0,
        limit: 10,
        sortBy: "commencementDate",
        sortOrder: "DESC"
      });
      setShowToast(null);
      previousPage();
    }
  }, t(`ES_COMMON_CLEAR_ALL`))));
};

const MobileSearchApplication = ({
  Controller,
  register,
  control,
  t,
  reset,
  previousPage,
  handleSubmit,
  tenantId,
  data,
  onSubmit,
  formState,
  setShowToast
}) => {
  function activateModal(state, action) {
    switch (action.type) {
      case "set":
        return action.payload;
      case "remove":
        return false;
    }
  }
  const [currentlyActiveMobileModal, setActiveMobileModal] = useReducer(activateModal, false);
  const closeMobilePopupModal = () => {
    setActiveMobileModal({
      type: "remove"
    });
  };
  const MobilePopUpCloseButton = () => /*#__PURE__*/React.createElement("div", {
    className: "InboxMobilePopupCloseButtonWrapper",
    onClick: closeMobilePopupModal
  }, /*#__PURE__*/React.createElement(CloseSvg, null));
  const searchFormFieldsComponentProps = {
    Controller,
    register,
    control,
    t,
    reset,
    previousPage,
    formState,
    setShowToast
  };
  const MobileComponentDirectory = ({
    currentlyActiveMobileModal,
    searchFormFieldsComponentProps,
    tenantId,
    ...props
  }) => {
    const {
      closeMobilePopupModal
    } = props;
    switch (currentlyActiveMobileModal) {
      case "SearchFormComponent":
        return /*#__PURE__*/React.createElement(SearchForm, props, /*#__PURE__*/React.createElement(MobilePopUpCloseButton, null), /*#__PURE__*/React.createElement("div", {
          className: "MobilePopupHeadingWrapper"
        }, /*#__PURE__*/React.createElement("h2", null, t("ES_COMMON_SEARCH"), ":")), /*#__PURE__*/React.createElement(SearchFields, Object.assign({}, searchFormFieldsComponentProps, {
          closeMobilePopupModal,
          tenantId,
          t
        })));
      default:
        return /*#__PURE__*/React.createElement("span", null);
    }
  };
  const CurrentMobileModalComponent = useCallback(({
    currentlyActiveMobileModal,
    searchFormFieldsComponentProps,
    tenantId,
    ...props
  }) => MobileComponentDirectory({
    currentlyActiveMobileModal,
    searchFormFieldsComponentProps,
    tenantId,
    ...props
  }), [currentlyActiveMobileModal]);
  const propsMobileInboxCards = useMemo(() => {
    if (data !== null && data !== void 0 && data.display) {
      return [];
    }
    if (data === "") {
      return [];
    }
    return data === null || data === void 0 ? void 0 : data.map(data => {
      var _data$owners, _data$address, _data$address2, _data$address3, _data$address4, _data$address5, _data$address6, _data$address7, _data$address8, _data$address9;
      return {
        [t("PT_SEARCHPROPERTY_TABEL_PID")]: data === null || data === void 0 ? void 0 : data.propertyId,
        [t("PT_APPLICATION_NO_LABEL")]: (data === null || data === void 0 ? void 0 : data.acknowldgementNumber) || "-",
        [t("PT_SEARCHPROPERTY_TABEL_APPLICATIONTYPE")]: (data === null || data === void 0 ? void 0 : data.creationReason) || "",
        [t("PT_COMMON_TABLE_COL_OWNER_NAME")]: (data === null || data === void 0 ? void 0 : (_data$owners = data.owners) === null || _data$owners === void 0 ? void 0 : _data$owners.map(o => o.name).join(",")) || "",
        [t("ES_SEARCH_PROPERTY_STATUS")]: t((data === null || data === void 0 ? void 0 : data.status) && `WF_PT_${data === null || data === void 0 ? void 0 : data.status}` || "NA") || "",
        [t("PT_ADDRESS_LABEL")]: `${data !== null && data !== void 0 && (_data$address = data.address) !== null && _data$address !== void 0 && _data$address.doorNo ? `${data === null || data === void 0 ? void 0 : (_data$address2 = data.address) === null || _data$address2 === void 0 ? void 0 : _data$address2.doorNo}, ` : ""} ${data !== null && data !== void 0 && (_data$address3 = data.address) !== null && _data$address3 !== void 0 && _data$address3.street ? `${data === null || data === void 0 ? void 0 : (_data$address4 = data.address) === null || _data$address4 === void 0 ? void 0 : _data$address4.street}, ` : ""}${data !== null && data !== void 0 && (_data$address5 = data.address) !== null && _data$address5 !== void 0 && _data$address5.landmark ? `${data === null || data === void 0 ? void 0 : (_data$address6 = data.address) === null || _data$address6 === void 0 ? void 0 : _data$address6.landmark}, ` : ""}${t(data === null || data === void 0 ? void 0 : (_data$address7 = data.address) === null || _data$address7 === void 0 ? void 0 : _data$address7.locality.code)}, ${t(data === null || data === void 0 ? void 0 : (_data$address8 = data.address) === null || _data$address8 === void 0 ? void 0 : _data$address8.city.code)} ${t(data === null || data === void 0 ? void 0 : (_data$address9 = data.address) === null || _data$address9 === void 0 ? void 0 : _data$address9.pincode) ? `${data === null || data === void 0 ? void 0 : data.address.pincode}` : " "}` || "NA"
      };
    });
  }, [data]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "searchBox"
  }, /*#__PURE__*/React.createElement(SearchAction, Object.assign({
    text: t("ES_COMMON_SEARCH"),
    handleActionClick: () => setActiveMobileModal({
      type: "set",
      payload: "SearchFormComponent"
    })
  }, {
    tenantId,
    t
  }))), currentlyActiveMobileModal ? /*#__PURE__*/React.createElement(PopUp, null, /*#__PURE__*/React.createElement(CurrentMobileModalComponent, Object.assign({
    onSubmit: data => {
      setActiveMobileModal({
        type: "remove"
      });
      onSubmit(data);
    },
    handleSubmit: handleSubmit,
    id: "search-form",
    className: "rm-mb form-field-flex-one inboxPopupMobileWrapper"
  }, {
    searchFormFieldsComponentProps,
    currentlyActiveMobileModal,
    closeMobilePopupModal,
    tenantId
  }))) : null, data !== null && data !== void 0 && data.display ? /*#__PURE__*/React.createElement(Card, {
    style: {
      marginTop: 20
    }
  }, t(data === null || data === void 0 ? void 0 : data.display).split("\\n").map((text, index) => /*#__PURE__*/React.createElement("p", {
    key: index,
    style: {
      textAlign: "center"
    }
  }, text))) : /*#__PURE__*/React.createElement(DetailsCard, {
    data: propsMobileInboxCards,
    linkPrefix: `/digit-ui/employee/pt/applicationsearch/application-details/`,
    serviceRequestIdKey: t("PT_SEARCHPROPERTY_TABEL_PID")
  }));
};

const PTSearchApplication = ({
  tenantId,
  isLoading,
  t,
  onSubmit,
  data,
  count,
  setShowToast
}) => {
  var _formState$errors, _formState$errors$mob;
  const isMobile = window.Digit.Utils.browser.isMobile();
  const {
    register,
    control,
    handleSubmit,
    setValue,
    getValues,
    reset,
    formState
  } = useForm({
    defaultValues: {
      offset: 0,
      limit: !isMobile && 10,
      sortBy: "commencementDate",
      sortOrder: "DESC"
    }
  });
  useEffect(() => {
    register("offset", 0);
    register("limit", 10);
    register("sortBy", "commencementDate");
    register("sortOrder", "DESC");
  }, [register]);
  const applicationTypes = [{
    code: "CREATE",
    i18nKey: "CREATE"
  }, {
    code: "UPDATE",
    i18nKey: "UPDATE"
  }, {
    code: "MUTATION",
    i18nKey: "MUTATION"
  }];
  const applicationStatuses = [{
    code: "ACTIVE",
    i18nKey: "WF_PT_ACTIVE"
  }, {
    code: "INACTIVE",
    i18nKey: "WF_PT_INACTIVE"
  }, {
    code: "INWORKFLOW",
    i18nKey: "WF_PT_INWORKFLOW"
  }];
  const getaddress = address => {
    let newaddr = `${address !== null && address !== void 0 && address.doorNo ? `${address === null || address === void 0 ? void 0 : address.doorNo}, ` : ""} ${address !== null && address !== void 0 && address.street ? `${address === null || address === void 0 ? void 0 : address.street}, ` : ""}${address !== null && address !== void 0 && address.landmark ? `${address === null || address === void 0 ? void 0 : address.landmark}, ` : ""}${t(address === null || address === void 0 ? void 0 : address.locality.code)}, ${t(address === null || address === void 0 ? void 0 : address.city)},${t(address === null || address === void 0 ? void 0 : address.pincode) ? `${address.pincode}` : " "}`;
    return newaddr;
  };
  const GetCell = value => /*#__PURE__*/React.createElement("span", {
    className: "cell-text"
  }, value);
  const columns = useMemo(() => [{
    Header: t("PT_SEARCHPROPERTY_TABEL_PID"),
    disableSortBy: true,
    accessor: row => GetCell(row.propertyId || "")
  }, {
    Header: t("PT_APPLICATION_NO_LABEL"),
    accessor: "acknowldgementNumber",
    disableSortBy: true,
    Cell: ({
      row
    }) => {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
        className: "link"
      }, /*#__PURE__*/React.createElement(Link, {
        to: `/digit-ui/employee/pt/applicationsearch/application-details/${row.original["propertyId"]}`
      }, row.original["acknowldgementNumber"])));
    }
  }, {
    Header: t("PT_SEARCHPROPERTY_TABEL_APPLICATIONTYPE"),
    disableSortBy: true,
    accessor: row => GetCell(row.creationReason || "")
  }, {
    Header: t("PT_COMMON_TABLE_COL_OWNER_NAME"),
    accessor: row => GetCell(row.owners.map(o => o.name).join(",") || ""),
    disableSortBy: true
  }, {
    Header: t("ES_SEARCH_PROPERTY_STATUS"),
    accessor: row => GetCell(t((row === null || row === void 0 ? void 0 : row.status) && `WF_PT_${row.status}` || "NA")),
    disableSortBy: true
  }, {
    Header: t("PT_ADDRESS_LABEL"),
    disableSortBy: true,
    accessor: row => GetCell(getaddress(row.address) || "")
  }], []);
  const onSort = useCallback(args => {
    if (args.length === 0) return;
    setValue("sortBy", args.id);
    setValue("sortOrder", args.desc ? "DESC" : "ASC");
  }, []);
  function onPageSizeChange(e) {
    setValue("limit", Number(e.target.value));
    handleSubmit(onSubmit)();
  }
  function nextPage() {
    setValue("offset", getValues("offset") + getValues("limit"));
    handleSubmit(onSubmit)();
  }
  function previousPage() {
    setValue("offset", getValues("offset") - getValues("limit"));
    handleSubmit(onSubmit)();
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, isMobile ? /*#__PURE__*/React.createElement(MobileSearchApplication, {
    Controller,
    register,
    control,
    t,
    reset,
    previousPage,
    handleSubmit,
    tenantId,
    data,
    onSubmit,
    formState,
    setShowToast
  }) : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Header, null, t("PT_SEARCH_PROP_APP")), /*#__PURE__*/React.createElement(Card, {
    className: "card-search-heading"
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      color: "#505A5F"
    }
  }, t("Provide at least one parameter to search for an application"))), /*#__PURE__*/React.createElement(SearchForm, {
    onSubmit: onSubmit,
    handleSubmit: handleSubmit
  }, /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_APPLICATION_NO_LABEL")), /*#__PURE__*/React.createElement(TextInput, {
    name: "acknowledgementIds",
    inputRef: register({})
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_SEARCHPROPERTY_TABEL_PID")), /*#__PURE__*/React.createElement(TextInput, {
    name: "propertyIds",
    inputRef: register({})
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_OWNER_MOBILE_NO")), /*#__PURE__*/React.createElement(MobileNumber, {
    name: "mobileNumber",
    inputRef: register({
      minLength: {
        value: 10,
        message: t("CORE_COMMON_MOBILE_ERROR")
      },
      maxLength: {
        value: 10,
        message: t("CORE_COMMON_MOBILE_ERROR")
      },
      pattern: {
        value: /[6789][0-9]{9}/,
        message: t("CORE_COMMON_MOBILE_ERROR")
      }
    }),
    type: "number",
    componentInFront: /*#__PURE__*/React.createElement("div", {
      className: "employee-card-input employee-card-input--front"
    }, "+91")
  }), /*#__PURE__*/React.createElement(CardLabelError, null, formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$mob = _formState$errors["mobileNumber"]) === null || _formState$errors$mob === void 0 ? void 0 : _formState$errors$mob.message)), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_SEARCHPROPERTY_TABEL_APPLICATIONTYPE")), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "creationReason",
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      option: applicationTypes,
      optionKey: "i18nKey",
      t: t,
      disable: false
    })
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("ES_SEARCH_PROPERTY_STATUS")), /*#__PURE__*/React.createElement(Controller, {
    control: control,
    name: "status",
    render: props => /*#__PURE__*/React.createElement(Dropdown, {
      selected: props.value,
      select: props.onChange,
      onBlur: props.onBlur,
      option: applicationStatuses,
      optionKey: "i18nKey",
      t: t,
      disable: false
    })
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_FROM_DATE")), /*#__PURE__*/React.createElement(Controller, {
    render: props => /*#__PURE__*/React.createElement(DatePicker, {
      date: props.value,
      disabled: false,
      onChange: props.onChange
    }),
    name: "fromDate",
    control: control
  })), /*#__PURE__*/React.createElement(SearchField, null, /*#__PURE__*/React.createElement("label", null, t("PT_TO_DATE")), /*#__PURE__*/React.createElement(Controller, {
    render: props => /*#__PURE__*/React.createElement(DatePicker, {
      date: props.value,
      disabled: false,
      onChange: props.onChange
    }),
    name: "toDate",
    control: control
  })), /*#__PURE__*/React.createElement(SearchField, {
    className: "submit"
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("ES_COMMON_SEARCH"),
    submit: true
  }), /*#__PURE__*/React.createElement("p", {
    style: {
      marginTop: "10px"
    },
    onClick: () => {
      reset({
        acknowledgementIds: "",
        fromDate: "",
        toDate: "",
        propertyIds: "",
        mobileNumber: "",
        status: "",
        creationReason: "",
        offset: 0,
        limit: 10,
        sortBy: "commencementDate",
        sortOrder: "DESC"
      });
      setShowToast(null);
      previousPage();
    }
  }, t(`ES_COMMON_CLEAR_ALL`)))), !isLoading && data !== null && data !== void 0 && data.display ? /*#__PURE__*/React.createElement(Card, {
    style: {
      marginTop: 20
    }
  }, t(data.display).split("\\n").map((text, index) => /*#__PURE__*/React.createElement("p", {
    key: index,
    style: {
      textAlign: "center"
    }
  }, text))) : !isLoading && data !== "" ? /*#__PURE__*/React.createElement(Table, {
    t: t,
    data: data,
    totalRecords: count,
    columns: columns,
    getCellProps: cellInfo => {
      return {
        style: {
          minWidth: cellInfo.column.Header === t("ES_INBOX_APPLICATION_NO") ? "240px" : "",
          padding: "20px 18px",
          fontSize: "16px"
        }
      };
    },
    onPageSizeChange: onPageSizeChange,
    currentPage: getValues("offset") / getValues("limit"),
    onNextPage: nextPage,
    onPrevPage: previousPage,
    pageSizeLimit: getValues("limit"),
    onSort: onSort,
    disableSort: false,
    sortParams: [{
      id: getValues("sortBy"),
      desc: getValues("sortOrder") === "DESC" ? true : false
    }]
  }) : data !== "" || isLoading && /*#__PURE__*/React.createElement(Loader, null)));
};

const SearchApp = ({
  path
}) => {
  const {
    variant
  } = useParams();
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [payload, setPayload] = useState({});
  const [showToast, setShowToast] = useState(null);
  function onSubmit(_data) {
    var fromDate = new Date(_data === null || _data === void 0 ? void 0 : _data.fromDate);
    fromDate === null || fromDate === void 0 ? void 0 : fromDate.setSeconds((fromDate === null || fromDate === void 0 ? void 0 : fromDate.getSeconds()) - 19800);
    var toDate = new Date(_data === null || _data === void 0 ? void 0 : _data.toDate);
    toDate === null || toDate === void 0 ? void 0 : toDate.setSeconds((toDate === null || toDate === void 0 ? void 0 : toDate.getSeconds()) + 86399 - 19800);
    const data = {
      ..._data,
      ...(_data.toDate ? {
        toDate: toDate === null || toDate === void 0 ? void 0 : toDate.getTime()
      } : {}),
      ...(_data.fromDate ? {
        fromDate: fromDate === null || fromDate === void 0 ? void 0 : fromDate.getTime()
      } : {})
    };
    let payload = Object.keys(data).filter(k => data[k]).reduce((acc, key) => ({
      ...acc,
      [key]: typeof data[key] === "object" ? data[key].code : data[key]
    }), {});
    if (Object.entries(payload).length > 0 && !payload.acknowledgementIds && !payload.creationReason && !payload.fromDate && !payload.mobileNumber && !payload.propertyIds && !payload.status && !payload.toDate) setShowToast({
      warning: true,
      label: "ERR_PT_FILL_VALID_FIELDS"
    });else if (Object.entries(payload).length > 0 && (payload.creationReason || payload.status) && !payload.acknowledgementIds && !payload.fromDate && !payload.mobileNumber && !payload.propertyIds && !payload.toDate) setShowToast({
      warning: true,
      label: "ERR_PROVIDE_MORE_PARAM_WITH_TYPE_STATUS"
    });else if (Object.entries(payload).length > 0 && payload.fromDate && !payload.toDate || !payload.fromDate && payload.toDate) setShowToast({
      warning: true,
      label: "ERR_PROVIDE_BOTH_FORM_TO_DATE"
    });else setPayload(payload);
  }
  const config = {
    enabled: !!(payload && Object.keys(payload).length > 0)
  };
  const {
    isLoading,
    isSuccess,
    isError,
    error,
    data: {
      Properties: searchReult,
      Count: count
    } = {}
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: payload
  }, config);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PTSearchApplication, {
    t: t,
    isLoading: isLoading,
    tenantId: tenantId,
    setShowToast: setShowToast,
    onSubmit: onSubmit,
    data: isSuccess && !isLoading ? searchReult.length > 0 ? searchReult : {
      display: "ES_COMMON_NO_DATA"
    } : "",
    count: count
  }), showToast && /*#__PURE__*/React.createElement(Toast, {
    error: showToast.error,
    warning: showToast.warning,
    label: t(showToast.label),
    isDleteBtn: true,
    onClose: () => {
      setShowToast(null);
    }
  }));
};

const EmployeeApp = ({
  path,
  url,
  userType
}) => {
  var _Digit, _Digit$ComponentRegis, _Digit2, _Digit2$ComponentRegi, _Digit3, _Digit3$ComponentRegi, _Digit4, _Digit4$ComponentRegi, _Digit5, _Digit5$ComponentRegi, _Digit6, _Digit6$ComponentRegi, _Digit7, _Digit7$ComponentRegi, _Digit8, _Digit8$ComponentRegi;
  const {
    t
  } = useTranslation();
  const location = useLocation();
  sessionStorage.removeItem("revalidateddone");
  const isMobile = window.Digit.Utils.browser.isMobile();
  const inboxInitialState = {
    searchParams: {
      uuid: {
        code: "ASSIGNED_TO_ALL",
        name: "ES_INBOX_ASSIGNED_TO_ALL"
      },
      services: ["PT.CREATE", "PT.MUTATION", "PT.UPDATE"],
      applicationStatus: [],
      locality: []
    }
  };
  const combineTaxDueInSearchData = async (searchData, _break, _next) => {
    let returnData;
    const tenantId = Digit.ULBService.getCurrentTenantId();
    let businessService = ["PT"].join();
    let consumerCode = searchData.map(e => e.propertyId).join();
    try {
      const res = await Digit.PaymentService.fetchBill(tenantId, {
        consumerCode,
        businessService
      });
      let obj = {};
      res.Bill.forEach(e => {
        obj[e.consumerCode] = e.totalAmount;
      });
      returnData = searchData.map(e => ({
        ...e,
        due_tax: obj[e.propertyId] || 0
      }));
    } catch (er) {
      var _er$response, _err$Errors;
      const err = er === null || er === void 0 ? void 0 : (_er$response = er.response) === null || _er$response === void 0 ? void 0 : _er$response.data;
      if (["EG_BS_BILL_NO_DEMANDS_FOUND", "EMPTY_DEMANDS"].includes(err === null || err === void 0 ? void 0 : (_err$Errors = err.Errors) === null || _err$Errors === void 0 ? void 0 : _err$Errors[0].code)) {
        returnData = searchData.map(e => ({
          ...e,
          due_tax: 0
        }));
      }
    }
    return _next(returnData);
  };
  const searchMW = [{
    combineTaxDueInSearchData
  }];
  const PTBreadCrumbs = ({
    location
  }) => {
    const {
      t
    } = useTranslation();
    const search = useLocation().search;
    const fromScreen = new URLSearchParams(search).get("from") || null;
    const {
      from: fromScreen2
    } = Digit.Hooks.useQueryParams();
    const crumbs = [{
      path: "/digit-ui/employee",
      content: t("ES_COMMON_HOME"),
      show: true
    }, {
      path: "/digit-ui/employee/pt/inbox",
      content: t("ES_TITLE_INBOX"),
      show: location.pathname.includes("pt/inbox") ? true : false
    }, {
      path: "/digit-ui/employee/pt/search",
      content: t("PT_COMMON_SEARCH_PROPERTY_SUB_HEADER"),
      show: location.pathname.includes("/pt/search") || location.pathname.includes("/pt/ptsearch") ? true : false
    }, {
      path: "digit-ui/employee/pt/property-mutate-docs-required",
      content: t("PT_REQIURED_DOC_TRANSFER_OWNERSHIP"),
      show: location.pathname.includes("pt/property-mutate-docs-required") ? true : false
    }, {
      path: "/digit-ui/employee/pt/property-mutate/",
      content: t("ES_TITLE_MUTATE_PROPERTY"),
      show: location.pathname.includes("pt/property-mutate/") ? true : false
    }, {
      path: "/digit-ui/employee/pt/modify-application/",
      content: t("PT_UPDATE_PROPERTY"),
      show: location.pathname.includes("pt/modify-application") ? true : false
    }, {
      path: "/digit-ui/employee/pt/application-search",
      content: t("ES_COMMON_APPLICATION_SEARCH"),
      show: location.pathname.includes("/pt/application-search") || location.pathname.includes("/pt/applicationsearch/application-details/") ? true : false
    }, {
      path: `/digit-ui/employee/pt/ptsearch/property-details/${sessionStorage.getItem("propertyIdinPropertyDetail")}`,
      content: fromScreen || fromScreen2 ? `${t(fromScreen || fromScreen2)} / ${t("PT_PROPERTY_INFORMATION")}` : t("PT_PROPERTY_INFORMATION"),
      show: location.pathname.includes("/pt/ptsearch/property-details/") || location.pathname.includes("/pt/ptsearch/payment-details/") || location.pathname.includes("/pt/ptsearch/assessment-details/") ? true : false,
      isBack: fromScreen && true
    }, {
      path: `/digit-ui/employee/pt/property-details/${sessionStorage.getItem("propertyIdinPropertyDetail")}?${fromScreen2 ? `from=${fromScreen2}` : ''}`,
      content: fromScreen || fromScreen2 ? `${t(fromScreen || fromScreen2)} / ${t("PT_PROPERTY_INFORMATION")}` : t("PT_PROPERTY_INFORMATION"),
      show: location.pathname.includes("/pt/property-details/") || location.pathname.includes("/pt/payment-details/") ? true : false,
      isBack: true
    }, {
      path: `/digit-ui/employee/pt/applicationsearch/application-details/${sessionStorage.getItem("applicationNoinAppDetails")}`,
      content: t("PT_APPLICATION_TITLE"),
      show: location.pathname.includes("/pt/application-details/") || location.pathname.includes("/pt/applicationsearch/application-details/") ? true : false
    }, {
      path: "/digit-ui/employee/pt/payment-details/",
      content: fromScreen ? `${t(fromScreen)} / ${t("PT_PAYMENT_HISTORY")} ` : t("PT_PAYMENT_HISTORY"),
      show: location.pathname.includes("/pt/ptsearch/payment-details") || location.pathname.includes("/pt/payment-details") ? true : false,
      isBack: fromScreen && true
    }, {
      path: "/digit-ui/employee/pt/assessment-details/",
      content: t("PT_ASSESS_PROPERTY"),
      show: location.pathname.includes("pt/ptsearch/assessment-details") ? true : false
    }];
    return /*#__PURE__*/React.createElement(BreadCrumb, {
      style: isMobile ? {
        display: "flex"
      } : {},
      spanStyle: {
        maxWidth: "min-content"
      },
      crumbs: crumbs
    });
  };
  const NewApplication = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("PTNewApplication");
  const ApplicationDetails = (_Digit2 = Digit) === null || _Digit2 === void 0 ? void 0 : (_Digit2$ComponentRegi = _Digit2.ComponentRegistryService) === null || _Digit2$ComponentRegi === void 0 ? void 0 : _Digit2$ComponentRegi.getComponent("ApplicationDetails");
  const PropertyDetails = (_Digit3 = Digit) === null || _Digit3 === void 0 ? void 0 : (_Digit3$ComponentRegi = _Digit3.ComponentRegistryService) === null || _Digit3$ComponentRegi === void 0 ? void 0 : _Digit3$ComponentRegi.getComponent("PTPropertyDetails");
  const AssessmentDetails = (_Digit4 = Digit) === null || _Digit4 === void 0 ? void 0 : (_Digit4$ComponentRegi = _Digit4.ComponentRegistryService) === null || _Digit4$ComponentRegi === void 0 ? void 0 : _Digit4$ComponentRegi.getComponent("PTAssessmentDetails");
  const EditApplication = (_Digit5 = Digit) === null || _Digit5 === void 0 ? void 0 : (_Digit5$ComponentRegi = _Digit5.ComponentRegistryService) === null || _Digit5$ComponentRegi === void 0 ? void 0 : _Digit5$ComponentRegi.getComponent("PTEditApplication");
  const Response = (_Digit6 = Digit) === null || _Digit6 === void 0 ? void 0 : (_Digit6$ComponentRegi = _Digit6.ComponentRegistryService) === null || _Digit6$ComponentRegi === void 0 ? void 0 : _Digit6$ComponentRegi.getComponent("PTResponse");
  const TransferOwnership = (_Digit7 = Digit) === null || _Digit7 === void 0 ? void 0 : (_Digit7$ComponentRegi = _Digit7.ComponentRegistryService) === null || _Digit7$ComponentRegi === void 0 ? void 0 : _Digit7$ComponentRegi.getComponent("PTTransferOwnership");
  const DocsRequired = (_Digit8 = Digit) === null || _Digit8 === void 0 ? void 0 : (_Digit8$ComponentRegi = _Digit8.ComponentRegistryService) === null || _Digit8$ComponentRegi === void 0 ? void 0 : _Digit8$ComponentRegi.getComponent("PTDocsRequired");
  const isRes = window.location.href.includes("pt/response");
  const isLocation = window.location.href.includes("pt") || window.location.href.includes("application");
  const isNewRegistration = window.location.href.includes("new-application") || window.location.href.includes("modify-application") || window.location.href.includes("pt/application-details");
  return /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "ground-container"
  }, !isRes ? /*#__PURE__*/React.createElement("div", {
    style: isNewRegistration ? {
      marginLeft: "12px"
    } : {
      marginLeft: "-4px"
    }
  }, /*#__PURE__*/React.createElement(PTBreadCrumbs, {
    location: location
  })) : null, /*#__PURE__*/React.createElement(PrivateRoute, {
    exact: true,
    path: `${path}/`,
    component: () => /*#__PURE__*/React.createElement(PTLinks, {
      matchPath: path,
      userType: userType
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/inbox`,
    component: () => /*#__PURE__*/React.createElement(Inbox, {
      useNewInboxAPI: true,
      parentRoute: path,
      businessService: "PT",
      filterComponent: "PT_INBOX_FILTER",
      initialStates: inboxInitialState,
      isInbox: true
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/new-application`,
    component: () => /*#__PURE__*/React.createElement(NewApplication, {
      parentUrl: url
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/application-details/:id`,
    component: () => /*#__PURE__*/React.createElement(ApplicationDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property-details/:id`,
    component: () => /*#__PURE__*/React.createElement(PropertyDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/applicationsearch/application-details/:id`,
    component: () => /*#__PURE__*/React.createElement(ApplicationDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/ptsearch/property-details/:id`,
    component: () => /*#__PURE__*/React.createElement(PropertyDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/payment-details/:id`,
    component: () => /*#__PURE__*/React.createElement(PaymentDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/ptsearch/payment-details/:id`,
    component: () => /*#__PURE__*/React.createElement(PaymentDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/assessment-details/:id`,
    component: () => /*#__PURE__*/React.createElement(AssessmentDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/ptsearch/assessment-details/:id`,
    component: () => /*#__PURE__*/React.createElement(AssessmentDetails, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/modify-application/:id`,
    component: () => /*#__PURE__*/React.createElement(EditApplication, null)
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/response`,
    component: props => /*#__PURE__*/React.createElement(Response, Object.assign({}, props, {
      parentRoute: path
    }))
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property-mutate/:id`,
    component: () => /*#__PURE__*/React.createElement(TransferOwnership, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/property-mutate-docs-required/:id`,
    component: () => /*#__PURE__*/React.createElement(DocsRequired, {
      parentRoute: path
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/search`,
    component: props => /*#__PURE__*/React.createElement(Search, Object.assign({}, props, {
      t: t,
      parentRoute: path
    }))
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/searchold`,
    component: () => /*#__PURE__*/React.createElement(Inbox, {
      parentRoute: path,
      businessService: "PT",
      middlewareSearch: searchMW,
      initialStates: inboxInitialState,
      isInbox: false,
      EmptyResultInboxComp: "PTEmptyResultInbox"
    })
  }), /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/application-search`,
    component: props => /*#__PURE__*/React.createElement(SearchApp, Object.assign({}, props, {
      parentRoute: path
    }))
  }))));
};

const PTCard = () => {
  const {
    t
  } = useTranslation();
  const [total, setTotal] = useState("-");
  const {
    data,
    isLoading,
    isFetching,
    isSuccess
  } = Digit.Hooks.useNewInboxGeneral({
    tenantId: Digit.ULBService.getCurrentTenantId(),
    ModuleCode: "PT",
    filters: {
      limit: 10,
      offset: 0,
      services: ["PT.CREATE", "PT.MUTATION", "PT.UPDATE"]
    },
    config: {
      select: data => {
        return {
          totalCount: data === null || data === void 0 ? void 0 : data.totalCount,
          nearingSlaCount: data === null || data === void 0 ? void 0 : data.nearingSlaCount
        } || "-";
      },
      enabled: Digit.Utils.ptAccess()
    }
  });
  useEffect(() => {
    if (!isFetching && isSuccess) setTotal(data);
  }, [isFetching]);
  if (!Digit.Utils.ptAccess()) {
    return null;
  }
  const links = [{
    count: isLoading ? "-" : total === null || total === void 0 ? void 0 : total.totalCount,
    label: t("ES_COMMON_INBOX"),
    link: `/digit-ui/employee/pt/inbox`
  }, {
    label: t("ES_TITLE_NEW_REGISTRATION"),
    link: `/digit-ui/employee/pt/new-application`,
    role: "PT_CEMP"
  }, {
    label: t("SEARCH_PROPERTY"),
    link: `/digit-ui/employee/pt/search`
  }, {
    label: t("ES_COMMON_APPLICATION_SEARCH"),
    link: `/digit-ui/employee/pt/application-search`
  }];
  const PT_CEMP = Digit.UserService.hasAccess(["PT_CEMP"]) || false;
  const propsForModuleCard = {
    Icon: /*#__PURE__*/React.createElement(PropertyHouse, null),
    moduleName: t("ES_TITLE_PROPERTY_TAX"),
    kpis: [{
      count: total === null || total === void 0 ? void 0 : total.totalCount,
      label: t("ES_TITLE_INBOX"),
      link: `/digit-ui/employee/pt/inbox`
    }, {
      count: total === null || total === void 0 ? void 0 : total.nearingSlaCount,
      label: t("TOTAL_NEARING_SLA"),
      link: `/digit-ui/employee/pt/inbox`
    }],
    links: links.filter(link => !(link !== null && link !== void 0 && link.role) || PT_CEMP)
  };
  return /*#__PURE__*/React.createElement(EmployeeModuleCard, propsForModuleCard);
};

const StatusCount = ({
  status,
  searchParams,
  onAssignmentChange,
  statusMap,
  businessServices
}) => {
  var _statusMap$find;
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(CheckBox, {
    styles: {
      height: "unset"
    },
    onChange: e => onAssignmentChange({
      ...e,
      state: status.state
    }, status),
    checked: (() => {
      return searchParams === null || searchParams === void 0 ? void 0 : searchParams.applicationStatus.some(e => e.uuid === status.uuid);
    })(),
    label: `${status.name} (${(statusMap === null || statusMap === void 0 ? void 0 : (_statusMap$find = statusMap.find(e => e.statusid === status.uuid)) === null || _statusMap$find === void 0 ? void 0 : _statusMap$find.count) || "-"})`
  });
};

const Status = ({
  onAssignmentChange,
  searchParams,
  businessServices,
  statusMap,
  moduleCode
}) => {
  var _userRoleStates$filte, _userRoleStates$filte2, _userRoleStates$filte3, _userRoleStates$filte4, _userRoleStates$filte5;
  const {
    t
  } = useTranslation();
  const [moreStatus, showMoreStatus] = useState(false);
  const {
    data: statusData,
    isLoading
  } = Digit.Hooks.useApplicationStatusGeneral({
    businessServices
  }, {});
  const {
    userRoleStates,
    otherRoleStates
  } = statusData || {};
  const map = {
    "PT.CREATE": "ES_PT_NEW_PROPERTY",
    "PT.MUTATION": "ES_PT_TRANSFER_OWNERSHIP",
    "PT.UPDATE": "ES_PT_UPDATE_PROPERTY"
  };
  const translateState = (state, t) => {
    return `${t(map[state.stateBusinessService])}` + " - " + t(`ES_PT_COMMON_STATUS_${state.state || "CREATED"}`);
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return userRoleStates !== null && userRoleStates !== void 0 && userRoleStates.filter(e => !e.isTerminateState).length ? /*#__PURE__*/React.createElement("div", {
    className: "status-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "filter-label",
    style: {
      fontWeight: "normal"
    }
  }, t("ES_INBOX_STATUS")), userRoleStates === null || userRoleStates === void 0 ? void 0 : (_userRoleStates$filte = userRoleStates.filter(e => !e.isTerminateState)) === null || _userRoleStates$filte === void 0 ? void 0 : (_userRoleStates$filte2 = _userRoleStates$filte.slice(0, 4)) === null || _userRoleStates$filte2 === void 0 ? void 0 : _userRoleStates$filte2.map((option, index) => {
    return /*#__PURE__*/React.createElement(StatusCount, {
      businessServices: businessServices,
      key: index,
      onAssignmentChange: onAssignmentChange,
      status: {
        name: translateState(option, t),
        code: option.applicationStatus,
        ...option
      },
      searchParams: searchParams,
      statusMap: statusMap
    });
  }), (userRoleStates === null || userRoleStates === void 0 ? void 0 : (_userRoleStates$filte3 = userRoleStates.filter(e => !e.isTerminateState)) === null || _userRoleStates$filte3 === void 0 ? void 0 : _userRoleStates$filte3.slice(4).length) > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, moreStatus && (userRoleStates === null || userRoleStates === void 0 ? void 0 : (_userRoleStates$filte4 = userRoleStates.filter(e => !e.isTerminateState)) === null || _userRoleStates$filte4 === void 0 ? void 0 : (_userRoleStates$filte5 = _userRoleStates$filte4.slice(4)) === null || _userRoleStates$filte5 === void 0 ? void 0 : _userRoleStates$filte5.map((option, index) => {
    return /*#__PURE__*/React.createElement(StatusCount, {
      businessServices: businessServices,
      key: option.uuid,
      onAssignmentChange: onAssignmentChange,
      status: {
        name: translateState(option, t),
        code: option.applicationStatus,
        ...option
      },
      searchParams: searchParams,
      statusMap: statusMap
    });
  })), /*#__PURE__*/React.createElement("div", {
    className: "filter-button",
    onClick: () => showMoreStatus(!moreStatus)
  }, " ", moreStatus ? t("ES_COMMON_LESS") : t("ES_COMMON_MORE"), " ")) : null) : null;
};

const Filter = ({
  searchParams,
  onFilterChange,
  defaultSearchParams,
  statusMap,
  moduleCode,
  ...props
}) => {
  var _searchParams$localit;
  const {
    t
  } = useTranslation();
  const client = useQueryClient();
  const [_searchParams, setSearchParams] = useState(() => ({
    ...searchParams,
    services: []
  }));
  const ApplicationTypeMenu = [{
    label: "ES_PT_NEW_PROPERTY",
    value: "PT.CREATE"
  }, {
    label: "ES_PT_TRANSFER_OWNERSHIP",
    value: "PT.MUTATION"
  }, {
    label: "ES_PT_UPDATE_PROPERTY",
    value: "PT.UPDATE"
  }];
  const localParamChange = filterParam => {
    let keys_to_delete = filterParam.delete;
    let _new = {
      ..._searchParams,
      ...filterParam
    };
    if (keys_to_delete) keys_to_delete.forEach(key => delete _new[key]);
    delete filterParam.delete;
    setSearchParams({
      ..._new
    });
  };
  const applyLocalFilters = () => {
    if (_searchParams.services.length === 0) onFilterChange({
      ..._searchParams,
      services: ApplicationTypeMenu.map(e => e.value)
    });else onFilterChange(_searchParams);
  };
  const clearAll = () => {
    setSearchParams({
      ...defaultSearchParams,
      services: []
    });
    onFilterChange({
      ...defaultSearchParams
    });
  };
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const onServiceSelect = (e, label) => {
    var _searchParams$applica;
    if (e.target.checked) localParamChange({
      services: Array.isArray(_searchParams.services) ? [..._searchParams.services, label] : [label]
    });else localParamChange({
      services: _searchParams.services.filter(o => o !== label),
      applicationStatus: (_searchParams$applica = _searchParams.applicationStatus) === null || _searchParams$applica === void 0 ? void 0 : _searchParams$applica.filter(e => e.stateBusinessService !== label)
    });
  };
  const selectLocality = d => {
    localParamChange({
      locality: [...((_searchParams === null || _searchParams === void 0 ? void 0 : _searchParams.locality) || []), d]
    });
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "filter"
  }, /*#__PURE__*/React.createElement("div", {
    className: "filter-card"
  }, /*#__PURE__*/React.createElement("div", {
    className: "heading",
    style: {
      alignItems: "center"
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "filter-label",
    style: {
      display: "flex",
      alignItems: "center"
    }
  }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("svg", {
    width: "17",
    height: "17",
    viewBox: "0 0 22 22",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M0.66666 2.48016C3.35999 5.9335 8.33333 12.3335 8.33333 12.3335V20.3335C8.33333 21.0668 8.93333 21.6668 9.66666 21.6668H12.3333C13.0667 21.6668 13.6667 21.0668 13.6667 20.3335V12.3335C13.6667 12.3335 18.6267 5.9335 21.32 2.48016C22 1.60016 21.3733 0.333496 20.2667 0.333496H1.71999C0.613327 0.333496 -0.01334 1.60016 0.66666 2.48016Z",
    fill: "#505A5F"
  }))), /*#__PURE__*/React.createElement("span", {
    style: {
      marginLeft: "8px",
      fontWeight: "normal"
    }
  }, t("ES_COMMON_FILTER_BY"), ":")), /*#__PURE__*/React.createElement("div", {
    className: "clearAll",
    onClick: clearAll
  }, t("ES_COMMON_CLEAR_ALL")), props.type === "desktop" && /*#__PURE__*/React.createElement("span", {
    className: "clear-search",
    onClick: clearAll,
    style: {
      border: "1px solid #e0e0e0",
      padding: "6px"
    }
  }, /*#__PURE__*/React.createElement("svg", {
    width: "17",
    height: "17",
    viewBox: "0 0 16 22",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M8 5V8L12 4L8 0V3C3.58 3 0 6.58 0 11C0 12.57 0.46 14.03 1.24 15.26L2.7 13.8C2.25 12.97 2 12.01 2 11C2 7.69 4.69 5 8 5ZM14.76 6.74L13.3 8.2C13.74 9.04 14 9.99 14 11C14 14.31 11.31 17 8 17V14L4 18L8 22V19C12.42 19 16 15.42 16 11C16 9.43 15.54 7.97 14.76 6.74Z",
    fill: "#505A5F"
  }))), props.type === "mobile" && /*#__PURE__*/React.createElement("span", {
    onClick: props.onClose
  }, /*#__PURE__*/React.createElement(CloseSvg, null))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtons, {
    onSelect: d => localParamChange({
      uuid: d
    }),
    selectedOption: _searchParams === null || _searchParams === void 0 ? void 0 : _searchParams.uuid,
    t: t,
    optionsKey: "name",
    options: [{
      code: "ASSIGNED_TO_ME",
      name: "ES_INBOX_ASSIGNED_TO_ME"
    }, {
      code: "ASSIGNED_TO_ALL",
      name: "ES_INBOX_ASSIGNED_TO_ALL"
    }]
  }), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "filter-label",
    style: {
      fontWeight: "normal"
    }
  }, t("ES_INBOX_LOCALITY"), ":"), /*#__PURE__*/React.createElement(Localities, {
    selectLocality: selectLocality,
    tenantId: tenantId,
    boundaryType: "revenue"
  }), /*#__PURE__*/React.createElement("div", {
    className: "tag-container"
  }, _searchParams === null || _searchParams === void 0 ? void 0 : (_searchParams$localit = _searchParams.locality) === null || _searchParams$localit === void 0 ? void 0 : _searchParams$localit.map((locality, index) => {
    return /*#__PURE__*/React.createElement(RemoveableTag, {
      key: index,
      text: t(locality.i18nkey),
      onClick: () => {
        localParamChange({
          locality: _searchParams === null || _searchParams === void 0 ? void 0 : _searchParams.locality.filter(loc => loc.code !== locality.code)
        });
      }
    });
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "filter-label",
    style: {
      fontWeight: "normal"
    }
  }, t("ES_PT_APP_TYPE")), ApplicationTypeMenu.map((e, index) => {
    var _searchParams$service;
    const checked = _searchParams === null || _searchParams === void 0 ? void 0 : (_searchParams$service = _searchParams.services) === null || _searchParams$service === void 0 ? void 0 : _searchParams$service.includes(e.value);
    return /*#__PURE__*/React.createElement(CheckBox, {
      key: index + "service",
      label: t(e.label),
      value: e.label,
      checked: checked,
      onChange: event => onServiceSelect(event, e.value)
    });
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Status, {
    searchParams: _searchParams,
    businessServices: _searchParams.services,
    statusMap: statusMap || client.getQueryData(`INBOX_STATUS_MAP_${moduleCode}`),
    moduleCode: moduleCode,
    onAssignmentChange: (e, status) => {
      if (e.target.checked) localParamChange({
        applicationStatus: [...(_searchParams === null || _searchParams === void 0 ? void 0 : _searchParams.applicationStatus), status]
      });else {
        let applicationStatus = _searchParams === null || _searchParams === void 0 ? void 0 : _searchParams.applicationStatus.filter(e => e.state !== status.state);
        localParamChange({
          applicationStatus
        });
      }
    }
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SubmitBar, {
    onSubmit: () => applyLocalFilters(),
    label: t("ES_COMMON_APPLY")
  }))))));
};

const EmptyResultInbox = props => {
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const addNewProprty = () => {
    history.push("/digit-ui/employee/pt/new-application");
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, props.data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: "center",
      marginTop: "50px",
      marginBottom: "24px"
    }
  }, t("PT_NO_MATCHING_PROPERTY_FOUND")), /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: "center"
    }
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    onSubmit: addNewProprty,
    label: t("PT_ADD_NEW_PROPERTY_BUTTON")
  }))) : null);
};

const GetCell$1 = value => /*#__PURE__*/React.createElement("span", {
  className: "cell-text"
}, value);
const GetSlaCell = value => {
  if (isNaN(value)) return /*#__PURE__*/React.createElement("span", {
    className: "sla-cell-success"
  }, "0");
  return value < 0 ? /*#__PURE__*/React.createElement("span", {
    className: "sla-cell-error"
  }, value) : /*#__PURE__*/React.createElement("span", {
    className: "sla-cell-success"
  }, value);
};
const GetMobCell = value => /*#__PURE__*/React.createElement("span", {
  className: "sla-cell"
}, value);
const TableConfig = t => ({
  PT: {
    searchColumns: props => [{
      Header: t("ES_INBOX_UNIQUE_PROPERTY_ID"),
      disableSortBy: true,
      Cell: ({
        row
      }) => {
        var _row$original, _row$original$searchD, _row$original2, _row$original2$search;
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
          className: "link"
        }, /*#__PURE__*/React.createElement(Link, {
          to: `${props.parentRoute}/property-details/` + ((_row$original = row.original) === null || _row$original === void 0 ? void 0 : (_row$original$searchD = _row$original.searchData) === null || _row$original$searchD === void 0 ? void 0 : _row$original$searchD["propertyId"])
        }, (_row$original2 = row.original) === null || _row$original2 === void 0 ? void 0 : (_row$original2$search = _row$original2.searchData) === null || _row$original2$search === void 0 ? void 0 : _row$original2$search["propertyId"])));
      },
      mobileCell: original => {
        var _original$searchData;
        return GetMobCell(original === null || original === void 0 ? void 0 : (_original$searchData = original.searchData) === null || _original$searchData === void 0 ? void 0 : _original$searchData["propertyId"]);
      }
    }, {
      Header: t("ES_INBOX_OWNER_NAME"),
      disableSortBy: true,
      Cell: ({
        row
      }) => {
        var _row$original3, _row$original4, _row$original5;
        const owners = ((_row$original3 = row.original) === null || _row$original3 === void 0 ? void 0 : _row$original3.searchData["owners"]) || [];
        const status = (_row$original4 = row.original) === null || _row$original4 === void 0 ? void 0 : _row$original4.searchData.status;
        const creationReason = (_row$original5 = row.original) === null || _row$original5 === void 0 ? void 0 : _row$original5.searchData.creationReason;
        const sortedOwners = [...owners.filter((a, b) => a.status === "ACTIVE"), ...owners.filter((a, b) => a.status !== "ACTIVE")];
        const _owner = status === "INWORKFLOW" && creationReason === "MUTATION" ? sortedOwners.reverse() : sortedOwners;
        return GetCell$1(`${_owner === null || _owner === void 0 ? void 0 : _owner[0].name}`);
      },
      mobileCell: original => {
        var _original$searchData2, _original$searchData3;
        return GetMobCell(original === null || original === void 0 ? void 0 : (_original$searchData2 = original.searchData) === null || _original$searchData2 === void 0 ? void 0 : (_original$searchData3 = _original$searchData2["owners"]) === null || _original$searchData3 === void 0 ? void 0 : _original$searchData3[0].name);
      }
    }, {
      Header: t("ES_INBOX_LOCALITY"),
      Cell: ({
        row
      }) => {
        var _row$original6, _row$original6$search, _row$original7, _row$original7$search, _row$original7$search2, _row$original7$search3;
        const tenantId = (_row$original6 = row.original) === null || _row$original6 === void 0 ? void 0 : (_row$original6$search = _row$original6.searchData) === null || _row$original6$search === void 0 ? void 0 : _row$original6$search.tenantId;
        return GetCell$1(t(`${tenantId.replace(".", "_").toUpperCase()}_REVENUE_${(_row$original7 = row.original) === null || _row$original7 === void 0 ? void 0 : (_row$original7$search = _row$original7.searchData) === null || _row$original7$search === void 0 ? void 0 : (_row$original7$search2 = _row$original7$search.address) === null || _row$original7$search2 === void 0 ? void 0 : (_row$original7$search3 = _row$original7$search2.locality) === null || _row$original7$search3 === void 0 ? void 0 : _row$original7$search3.code}`));
      },
      disableSortBy: true,
      mobileCell: original => {
        var _original$searchData4, _original$searchData5, _original$searchData6;
        return GetMobCell(original === null || original === void 0 ? void 0 : (_original$searchData4 = original.searchData) === null || _original$searchData4 === void 0 ? void 0 : (_original$searchData5 = _original$searchData4.address) === null || _original$searchData5 === void 0 ? void 0 : (_original$searchData6 = _original$searchData5.locality) === null || _original$searchData6 === void 0 ? void 0 : _original$searchData6.name);
      }
    }, {
      Header: t("ES_SEARCH_PROPERTY_STATUS"),
      Cell: ({
        row
      }) => {
        var _row$original8, _row$original8$search;
        return GetCell$1(t((_row$original8 = row.original) === null || _row$original8 === void 0 ? void 0 : (_row$original8$search = _row$original8.searchData) === null || _row$original8$search === void 0 ? void 0 : _row$original8$search.status));
      },
      disableSortBy: true,
      mobileCell: original => {
        var _original$searchData7;
        return GetMobCell(original === null || original === void 0 ? void 0 : (_original$searchData7 = original.searchData) === null || _original$searchData7 === void 0 ? void 0 : _original$searchData7.status);
      }
    }, {
      Header: t("ES_SEARCH_TAX_DUE"),
      Cell: ({
        row
      }) => {
        var _row$original9, _row$original9$search;
        return GetCell$1("₹ " + ((_row$original9 = row.original) === null || _row$original9 === void 0 ? void 0 : (_row$original9$search = _row$original9.searchData) === null || _row$original9$search === void 0 ? void 0 : _row$original9$search.due_tax));
      },
      disableSortBy: true,
      mobileCell: original => {
        var _original$searchData8;
        return GetMobCell("₹ " + (original === null || original === void 0 ? void 0 : (_original$searchData8 = original.searchData) === null || _original$searchData8 === void 0 ? void 0 : _original$searchData8.due_tax));
      }
    }, {
      Header: t("ES_SEARCH_ACTION"),
      Cell: ({
        row
      }) => {
        var _row$original10, _row$original10$searc, _row$original11, _row$original11$searc;
        return /*#__PURE__*/React.createElement("div", null, ((_row$original10 = row.original) === null || _row$original10 === void 0 ? void 0 : (_row$original10$searc = _row$original10.searchData) === null || _row$original10$searc === void 0 ? void 0 : _row$original10$searc.due_tax) > 0 && Digit.Utils.didEmployeeHasRole("PT_CEMP") ? /*#__PURE__*/React.createElement("span", {
          className: "link"
        }, /*#__PURE__*/React.createElement(Link, {
          to: `/digit-ui/employee/payment/collect/PT/` + ((_row$original11 = row.original) === null || _row$original11 === void 0 ? void 0 : (_row$original11$searc = _row$original11.searchData) === null || _row$original11$searc === void 0 ? void 0 : _row$original11$searc["propertyId"])
        }, t("ES_PT_COLLECT_TAX"))) : null);
      },
      disableSortBy: true
    }],
    inboxColumns: props => [{
      Header: t("ES_INBOX_UNIQUE_PROPERTY_ID"),
      Cell: ({
        row
      }) => {
        var _row$original12, _row$original12$searc, _row$original13, _row$original13$searc;
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
          className: "link"
        }, /*#__PURE__*/React.createElement(Link, {
          to: `${props.parentRoute}/application-details/` + ((_row$original12 = row.original) === null || _row$original12 === void 0 ? void 0 : (_row$original12$searc = _row$original12.searchData) === null || _row$original12$searc === void 0 ? void 0 : _row$original12$searc["propertyId"])
        }, (_row$original13 = row.original) === null || _row$original13 === void 0 ? void 0 : (_row$original13$searc = _row$original13.searchData) === null || _row$original13$searc === void 0 ? void 0 : _row$original13$searc["propertyId"])));
      },
      mobileCell: original => {
        var _original$searchData9;
        return GetMobCell(original === null || original === void 0 ? void 0 : (_original$searchData9 = original.searchData) === null || _original$searchData9 === void 0 ? void 0 : _original$searchData9["propertyId"]);
      }
    }, {
      Header: t("ES_INBOX_OWNER"),
      Cell: ({
        row
      }) => {
        var _row$original14, _row$original14$searc, _row$original14$searc2;
        return GetCell$1(`${(_row$original14 = row.original) === null || _row$original14 === void 0 ? void 0 : (_row$original14$searc = _row$original14.searchData) === null || _row$original14$searc === void 0 ? void 0 : (_row$original14$searc2 = _row$original14$searc["owners"]) === null || _row$original14$searc2 === void 0 ? void 0 : _row$original14$searc2[0].name}`);
      },
      mobileCell: original => {
        var _original$searchData10, _original$searchData11;
        return GetMobCell(original === null || original === void 0 ? void 0 : (_original$searchData10 = original.searchData) === null || _original$searchData10 === void 0 ? void 0 : (_original$searchData11 = _original$searchData10["owners"]) === null || _original$searchData11 === void 0 ? void 0 : _original$searchData11[0].name);
      }
    }, {
      Header: t("ES_INBOX_APPLICATION_TYPE"),
      Cell: ({
        row
      }) => {
        var _row$original15, _row$original15$workf;
        const map = {
          "PT.CREATE": "ES_PT_NEW_PROPERTY",
          "PT.MUTATION": "ES_PT_TRANSFER_OWNERSHIP",
          "PT.UPDATE": "ES_PT_UPDATE_PROPERTY"
        };
        return GetCell$1(t(`${map[(_row$original15 = row.original) === null || _row$original15 === void 0 ? void 0 : (_row$original15$workf = _row$original15.workflowData) === null || _row$original15$workf === void 0 ? void 0 : _row$original15$workf.businessService]}`));
      },
      mobileCell: original => {
        var _original$workflowDat;
        const map = {
          "PT.CREATE": "ES_PT_NEW_PROPERTY",
          "PT.MUTATION": "ES_PT_TRANSFER_OWNERSHIP",
          "PT.UPDATE": "ES_PT_UPDATE_PROPERTY"
        };
        return GetMobCell(t(map[original === null || original === void 0 ? void 0 : (_original$workflowDat = original.workflowData) === null || _original$workflowDat === void 0 ? void 0 : _original$workflowDat.businessService]));
      }
    }, {
      Header: t("ES_INBOX_STATUS"),
      Cell: ({
        row
      }) => {
        var _row$original16, _wf$state;
        const wf = (_row$original16 = row.original) === null || _row$original16 === void 0 ? void 0 : _row$original16.workflowData;
        return GetCell$1(t(`ES_PT_COMMON_STATUS_${wf === null || wf === void 0 ? void 0 : (_wf$state = wf.state) === null || _wf$state === void 0 ? void 0 : _wf$state["state"]}`));
      },
      mobileCell: original => {
        var _original$workflowDat2, _original$workflowDat3;
        return GetMobCell(t(`ES_PT_COMMON_STATUS_${original === null || original === void 0 ? void 0 : (_original$workflowDat2 = original.workflowData) === null || _original$workflowDat2 === void 0 ? void 0 : (_original$workflowDat3 = _original$workflowDat2.state) === null || _original$workflowDat3 === void 0 ? void 0 : _original$workflowDat3["state"]}`));
      }
    }, {
      Header: t("ES_INBOX_SLA_DAYS_REMAINING"),
      accessor: "createdTime",
      Cell: ({
        row
      }) => {
        const wf = row.original.workflowData;
        const math = Math.round(((wf === null || wf === void 0 ? void 0 : wf.businesssServiceSla) || 0) / (24 * 60 * 60 * 1000)) || "-";
        return GetSlaCell(math);
      },
      mobileCell: original => {
        var _original$workflowDat4;
        return GetSlaCell(Math.round(((original === null || original === void 0 ? void 0 : (_original$workflowDat4 = original.workflowData) === null || _original$workflowDat4 === void 0 ? void 0 : _original$workflowDat4["businesssServiceSla"]) || 0) / (24 * 60 * 60 * 1000)));
      }
    }],
    serviceRequestIdKey: original => {
      var _original$t, _original$t$props;
      return original === null || original === void 0 ? void 0 : (_original$t = original[t("ES_INBOX_UNIQUE_PROPERTY_ID")]) === null || _original$t === void 0 ? void 0 : (_original$t$props = _original$t.props) === null || _original$t$props === void 0 ? void 0 : _original$t$props.children;
    }
  }
});

const NewApplication = () => {
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const tenants = Digit.Hooks.pt.useTenants();
  const {
    t
  } = useTranslation();
  const [canSubmit, setSubmitValve] = useState(false);
  const defaultValues = {};
  const history = useHistory();
  const [mutationHappened, setMutationHappened, clear] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_HAPPENED", false);
  const [successData, setsuccessData, clearSuccessData] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_SUCCESS_DATA", {});
  const {
    data: commonFields,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "PropertyTax", "CommonFieldsConfig");
  useEffect(() => {
    setMutationHappened(false);
    clearSuccessData();
  }, []);
  const onFormValueChange = (setValue, formData, formState) => {
    var _formState$errors, _formState$errors$uni, _formData$ownershipCa, _formData$ownershipCa2, _formData$owners, _formData$address;
    setSubmitValve(!Object.keys(formState.errors).length);
    if (Object.keys(formState.errors).length === 1 && ((_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$uni = _formState$errors.units) === null || _formState$errors$uni === void 0 ? void 0 : _formState$errors$uni.message) === "arv") {
      setSubmitValve(!(formData !== null && formData !== void 0 && formData.units.some(unit => unit.occupancyType === "RENTED" && !unit.arv)));
    }
    if (formData !== null && formData !== void 0 && (_formData$ownershipCa = formData.ownershipCategory) !== null && _formData$ownershipCa !== void 0 && (_formData$ownershipCa2 = _formData$ownershipCa.code) !== null && _formData$ownershipCa2 !== void 0 && _formData$ownershipCa2.includes("MULTIPLEOWNERS") && (formData === null || formData === void 0 ? void 0 : (_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.length) < 2) {
      setSubmitValve(false);
    }
    let pincode = formData === null || formData === void 0 ? void 0 : (_formData$address = formData.address) === null || _formData$address === void 0 ? void 0 : _formData$address.pincode;
    if (pincode) {
      if (!Digit.Utils.getPattern("Pincode").test(pincode)) setSubmitValve(false);
      const foundValue = tenants === null || tenants === void 0 ? void 0 : tenants.find(obj => {
        var _obj$pincode;
        return (_obj$pincode = obj.pincode) === null || _obj$pincode === void 0 ? void 0 : _obj$pincode.find(item => item.toString() === pincode);
      });
      if (!foundValue) {
        setSubmitValve(false);
      }
    }
  };
  const onSubmit = data => {
    var _data$address, _data$address$city, _data$address2, _data$address2$locali, _data$address3, _data$address3$locali, _data$usageCategoryMa, _data$usageCategoryMa2, _data$PropertyType, _data$ownershipCatego, _data$PropertyType2, _data$documents3, _data$ownershipCatego3;
    const formData = {
      tenantId,
      address: {
        ...(data === null || data === void 0 ? void 0 : data.address),
        city: data === null || data === void 0 ? void 0 : (_data$address = data.address) === null || _data$address === void 0 ? void 0 : (_data$address$city = _data$address.city) === null || _data$address$city === void 0 ? void 0 : _data$address$city.name,
        locality: {
          code: data === null || data === void 0 ? void 0 : (_data$address2 = data.address) === null || _data$address2 === void 0 ? void 0 : (_data$address2$locali = _data$address2.locality) === null || _data$address2$locali === void 0 ? void 0 : _data$address2$locali.code,
          area: data === null || data === void 0 ? void 0 : (_data$address3 = data.address) === null || _data$address3 === void 0 ? void 0 : (_data$address3$locali = _data$address3.locality) === null || _data$address3$locali === void 0 ? void 0 : _data$address3$locali.area
        }
      },
      usageCategory: data === null || data === void 0 ? void 0 : data.usageCategoryMajor.code,
      usageCategoryMajor: data === null || data === void 0 ? void 0 : (_data$usageCategoryMa = data.usageCategoryMajor) === null || _data$usageCategoryMa === void 0 ? void 0 : _data$usageCategoryMa.code.split(".")[0],
      usageCategoryMinor: (data === null || data === void 0 ? void 0 : (_data$usageCategoryMa2 = data.usageCategoryMajor) === null || _data$usageCategoryMa2 === void 0 ? void 0 : _data$usageCategoryMa2.code.split(".")[1]) || null,
      landArea: Number(data === null || data === void 0 ? void 0 : data.landarea),
      superBuiltUpArea: Number(data === null || data === void 0 ? void 0 : data.landarea),
      propertyType: data === null || data === void 0 ? void 0 : (_data$PropertyType = data.PropertyType) === null || _data$PropertyType === void 0 ? void 0 : _data$PropertyType.code,
      noOfFloors: Number(data === null || data === void 0 ? void 0 : data.noOfFloors),
      ownershipCategory: data === null || data === void 0 ? void 0 : (_data$ownershipCatego = data.ownershipCategory) === null || _data$ownershipCatego === void 0 ? void 0 : _data$ownershipCatego.code,
      owners: data === null || data === void 0 ? void 0 : data.owners.map(owner => {
        var _data$ownershipCatego2, _owner2, _owner$ownerType;
        let {
          name,
          mobileNumber,
          designation,
          altContactNumber,
          emailId,
          correspondenceAddress,
          isCorrespondenceAddress,
          ownerType,
          fatherOrHusbandName
        } = owner;
        let __owner;
        if (!(data !== null && data !== void 0 && (_data$ownershipCatego2 = data.ownershipCategory) !== null && _data$ownershipCatego2 !== void 0 && _data$ownershipCatego2.code.includes("INDIVIDUAL"))) {
          __owner = {
            name,
            mobileNumber,
            designation,
            altContactNumber,
            emailId,
            correspondenceAddress,
            isCorrespondenceAddress,
            ownerType
          };
        } else {
          var _data$address4, _data$address4$locali;
          __owner = {
            name,
            mobileNumber,
            correspondenceAddress,
            permanentAddress: data === null || data === void 0 ? void 0 : (_data$address4 = data.address) === null || _data$address4 === void 0 ? void 0 : (_data$address4$locali = _data$address4.locality) === null || _data$address4$locali === void 0 ? void 0 : _data$address4$locali.name,
            relationship: owner === null || owner === void 0 ? void 0 : owner.relationship.code,
            fatherOrHusbandName,
            gender: owner === null || owner === void 0 ? void 0 : owner.gender.code,
            emailId
          };
        }
        if (!((_owner2 = __owner) !== null && _owner2 !== void 0 && _owner2.correspondenceAddress)) __owner.correspondenceAddress = "";
        const _owner = {
          ...__owner,
          ownerType: owner === null || owner === void 0 ? void 0 : (_owner$ownerType = owner.ownerType) === null || _owner$ownerType === void 0 ? void 0 : _owner$ownerType.code
        };
        if (_owner.ownerType !== "NONE") {
          var _data$documents, _data$documents$docum;
          const {
            documentType,
            documentUid
          } = owner === null || owner === void 0 ? void 0 : owner.documents;
          _owner.documents = [{
            documentUid: documentUid,
            documentType: documentType.code,
            fileStoreId: documentUid
          }, data === null || data === void 0 ? void 0 : (_data$documents = data.documents) === null || _data$documents === void 0 ? void 0 : (_data$documents$docum = _data$documents.documents) === null || _data$documents$docum === void 0 ? void 0 : _data$documents$docum.find(e => {
            var _e$documentType;
            return (_e$documentType = e.documentType) === null || _e$documentType === void 0 ? void 0 : _e$documentType.includes("OWNER.IDENTITYPROOF");
          })];
        } else {
          var _data$documents2, _data$documents2$docu;
          _owner.documents = [data === null || data === void 0 ? void 0 : (_data$documents2 = data.documents) === null || _data$documents2 === void 0 ? void 0 : (_data$documents2$docu = _data$documents2.documents) === null || _data$documents2$docu === void 0 ? void 0 : _data$documents2$docu.find(e => {
            var _e$documentType2;
            return (_e$documentType2 = e.documentType) === null || _e$documentType2 === void 0 ? void 0 : _e$documentType2.includes("OWNER.IDENTITYPROOF");
          })];
        }
        return _owner;
      }),
      channel: "CFC_COUNTER",
      creationReason: "CREATE",
      source: "MUNICIPAL_RECORDS",
      units: (data === null || data === void 0 ? void 0 : (_data$PropertyType2 = data.PropertyType) === null || _data$PropertyType2 === void 0 ? void 0 : _data$PropertyType2.code) !== "VACANT" ? data === null || data === void 0 ? void 0 : data.units : [],
      documents: data === null || data === void 0 ? void 0 : (_data$documents3 = data.documents) === null || _data$documents3 === void 0 ? void 0 : _data$documents3.documents,
      applicationStatus: "CREATE"
    };
    if (!(data !== null && data !== void 0 && (_data$ownershipCatego3 = data.ownershipCategory) !== null && _data$ownershipCatego3 !== void 0 && _data$ownershipCatego3.code.includes("INDIVIDUAL"))) {
      var _data$owners, _data$owners2, _data$owners2$0$insti, _data$owners2$0$insti2, _data$owners3, _data$owners4;
      formData.institution = {
        name: (_data$owners = data.owners) === null || _data$owners === void 0 ? void 0 : _data$owners[0].institution.name,
        type: (_data$owners2 = data.owners) === null || _data$owners2 === void 0 ? void 0 : (_data$owners2$0$insti = _data$owners2[0].institution.type) === null || _data$owners2$0$insti === void 0 ? void 0 : (_data$owners2$0$insti2 = _data$owners2$0$insti.code) === null || _data$owners2$0$insti2 === void 0 ? void 0 : _data$owners2$0$insti2.split(".")[1],
        designation: (_data$owners3 = data.owners) === null || _data$owners3 === void 0 ? void 0 : _data$owners3[0].designation,
        nameOfAuthorizedPerson: (_data$owners4 = data.owners) === null || _data$owners4 === void 0 ? void 0 : _data$owners4[0].name,
        tenantId: Digit.ULBService.getCurrentTenantId()
      };
    }
    history.replace("/digit-ui/employee/pt/response", {
      Property: formData
    });
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const configs = commonFields ? commonFields : newConfig;
  return /*#__PURE__*/React.createElement(FormComposer, {
    heading: t("ES_TITLE_NEW_PROPERTY_APPLICATION"),
    isDisabled: !canSubmit,
    label: t("ES_COMMON_APPLICATION_SUBMIT"),
    config: configs.map(config => {
      return {
        ...config,
        body: config.body.filter(a => !a.hideInEmployee)
      };
    }),
    fieldStyle: {
      marginRight: 0
    },
    onSubmit: onSubmit,
    defaultValues: defaultValues,
    onFormValueChange: onFormValueChange
  });
};

const configPTApproverApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService
}) => {
  var _action$assigneeRoles;
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "ES_PT_COMMON_CANCEL"
    },
    form: [{
      body: [{
        label: action.isTerminateState || (action === null || action === void 0 ? void 0 : action.action) === "SENDBACKTOCITIZEN" ? null : t(assigneeLabel || `WF_ROLE_${(_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : _action$assigneeRoles[0]}`),
        type: "dropdown",
        populators: action.isTerminateState || (action === null || action === void 0 ? void 0 : action.action) === "SENDBACKTOCITIZEN" ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("ES_PT_ACTION_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: `${t("ES_PT_ATTACH_FILE")}${action.docUploadRequired ? " *" : ""}`,
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          showHint: true,
          hintText: t("PT_ATTACH_RESTRICTIONS_SIZE"),
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`ES_PT_ACTION_NO_FILEUPLOADED`)
        })
      }]
    }]
  };
};

const configPTAssessProperty = ({
  t,
  action,
  financialYears,
  selectedFinancialYear,
  setSelectedFinancialYear
}) => {
  return {
    label: {
      heading: `WF_${action.action}_APPLICATION`,
      submit: `WF_PT.CREATE_${action.action}`,
      cancel: "ES_PT_COMMON_CANCEL"
    },
    form: [{
      body: [{
        label: t("ES_PT_FINANCIAL_YEARS"),
        isMandatory: true,
        type: "radio",
        populators: /*#__PURE__*/React.createElement(RadioButtons, {
          options: financialYears,
          optionsKey: "name",
          onSelect: setSelectedFinancialYear,
          selectedOption: selectedFinancialYear
        })
      }]
    }]
  };
};

const configTLApproverApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService
}) => {
  let checkCondtions = true;
  if ((action === null || action === void 0 ? void 0 : action.action) == "SENDBACKTOCITIZEN" || (action === null || action === void 0 ? void 0 : action.action) == "APPROVE") checkCondtions = false;
  if (action.isTerminateState) checkCondtions = false;
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "WF_EMPLOYEE_NEWTL_CANCEL"
    },
    form: [{
      body: [{
        label: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_LABEL"),
        placeholder: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_PLACEHOLDER"),
        type: "dropdown",
        populators: !checkCondtions ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: t("TL_APPROVAL_CHECKLIST_BUTTON_UP_FILE"),
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`)
        })
      }]
    }]
  };
};

const configBPAREGApproverApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService,
  error
}) => {
  let checkCondtions = true;
  if ((action === null || action === void 0 ? void 0 : action.action) == "SENDBACKTOCITIZEN") checkCondtions = false;
  if (action.isTerminateState) checkCondtions = false;
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "WF_EMPLOYEE_BPAREG_CANCEL"
    },
    form: [{
      body: [{
        label: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_LABEL"),
        placeholder: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_PLACEHOLDER"),
        type: "dropdown",
        populators: !checkCondtions ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: t("BPA_APPROVAL_CHECKLIST_BUTTON_UP_FILE"),
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`),
          accept: "image/*, .pdf, .png, .jpeg, .jpg",
          iserror: error
        })
      }]
    }]
  };
};

const configBPAApproverApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService,
  error
}) => {
  var _action$assigneeRoles;
  let isRejectOrRevocate = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "REVOCATE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT" || action.action == "SKIP_PAYMENT" || (action === null || action === void 0 ? void 0 : action.action) == "SEND_BACK_TO_CITIZEN" || (action === null || action === void 0 ? void 0 : action.action) == "APPROVE") {
    isRejectOrRevocate = true;
  }
  let isCommentRequired = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "REVOCATE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT") {
    isCommentRequired = true;
  }
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "BPA_CITIZEN_CANCEL_BUTTON"
    },
    form: [{
      body: [{
        label: action.isTerminateState || isRejectOrRevocate ? null : t(assigneeLabel || `WF_ROLE_${(_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : _action$assigneeRoles[0]}`),
        type: "dropdown",
        populators: action.isTerminateState || isRejectOrRevocate ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        isMandatory: isCommentRequired,
        populators: {
          name: "comments"
        }
      }, {
        label: `${t("WF_APPROVAL_UPLOAD_HEAD")}`,
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`),
          accept: "image/*, .pdf, .png, .jpeg, .jpg",
          iserror: error
        })
      }]
    }]
  };
};

const configNOCApproverApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService,
  error
}) => {
  var _action$assigneeRoles;
  let isCommentRequired = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "REVOCATE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT") {
    isCommentRequired = true;
  }
  let isRejectOrRevocate = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "APPROVE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT" || action.action == "AUTO_APPROVE" || action.action == "AUTO_REJECT") {
    isRejectOrRevocate = true;
  }
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "CORE_LOGOUTPOPUP_CANCEL"
    },
    form: [{
      body: [{
        label: action.isTerminateState || isRejectOrRevocate ? null : t(assigneeLabel || `WF_ROLE_${(_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : _action$assigneeRoles[0]}`),
        type: "dropdown",
        populators: action.isTerminateState || isRejectOrRevocate ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        isMandatory: isCommentRequired,
        populators: {
          name: "comments"
        }
      }, {
        label: `${t("WF_APPROVAL_UPLOAD_HEAD")}`,
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          showHint: true,
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`),
          accept: "image/*, .pdf, .png, .jpeg, .jpg",
          iserror: error
        })
      }]
    }]
  };
};

const configWSApproverApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService,
  error
}) => {
  var _action$action;
  let checkCondtions = true;
  if (action !== null && action !== void 0 && (_action$action = action.action) !== null && _action$action !== void 0 && _action$action.includes("SEND_BACK") || (action === null || action === void 0 ? void 0 : action.action) == "APPROVE_FOR_CONNECTION") checkCondtions = false;
  if (action.isTerminateState) checkCondtions = false;
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "CS_COMMON_CANCEL"
    },
    form: [{
      body: [{
        label: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_LABEL"),
        placeholder: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_PLACEHOLDER"),
        type: "dropdown",
        populators: !checkCondtions ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: t("WS_APPROVAL_CHECKLIST_BUTTON_UP_FILE"),
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          accept: ".jpg,.pdf,.png,.jpeg",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`),
          error: error,
          iserror: error,
          showHintBelow: true,
          hintText: "WS_HINT_TEXT_LABEL"
        })
      }]
    }]
  };
};

const configWSDisConnectApplication = ({
  t,
  action,
  approvers,
  selectedApprover,
  setSelectedApprover,
  selectFile,
  uploadedFile,
  setUploadedFile,
  assigneeLabel,
  businessService,
  error
}) => {
  var _action$action;
  let checkCondtions = true,
    isDatePickerDisplay = false;
  if (action !== null && action !== void 0 && (_action$action = action.action) !== null && _action$action !== void 0 && _action$action.includes("SEND_BACK") || (action === null || action === void 0 ? void 0 : action.action) == "APPROVE_FOR_DISCONNECTION" || (action === null || action === void 0 ? void 0 : action.action) == "RESUBMIT_APPLICATION") checkCondtions = false;
  if (action.isTerminateState) checkCondtions = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "EXECUTE_DISCONNECTION" || (action === null || action === void 0 ? void 0 : action.action) == "DISCONNECTION_EXECUTED") isDatePickerDisplay = true;
  return {
    label: {
      heading: `WF_${action === null || action === void 0 ? void 0 : action.action}_APPLICATION`,
      submit: `WF_${businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()}_${action === null || action === void 0 ? void 0 : action.action}`,
      cancel: "CS_COMMON_CANCEL"
    },
    form: [{
      body: [{
        label: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_LABEL"),
        placeholder: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_PLACEHOLDER"),
        type: "dropdown",
        populators: !checkCondtions ? null : /*#__PURE__*/React.createElement(Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, isDatePickerDisplay && {
        label: t("ES_FSM_ACTION_SERVICE_DATE"),
        isMandatory: isDatePickerDisplay ? true : false,
        type: "custom",
        populators: isDatePickerDisplay ? {
          name: "date",
          validation: {
            required: true
          },
          defaultValue: Digit.Utils.date.getDate(),
          component: (props, customProps) => /*#__PURE__*/React.createElement(DatePicker, Object.assign({
            onChange: props.onChange,
            date: props.value
          }, customProps))
        } : null
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: t("WS_APPROVAL_CHECKLIST_BUTTON_UP_FILE"),
        populators: /*#__PURE__*/React.createElement(UploadFile, {
          id: "workflow-doc",
          accept: ".jpg,.pdf,.png,.jpeg",
          onUpload: selectFile,
          onDelete: () => {
            setUploadedFile(null);
          },
          message: uploadedFile ? `1 ${t(`ES_PT_ACTION_FILEUPLOADED`)}` : t(`CS_ACTION_NO_FILEUPLOADED`),
          error: error,
          iserror: error,
          showHintBelow: true,
          hintText: "WS_HINT_TEXT_LABEL"
        })
      }]
    }]
  };
};

const Heading = props => {
  return /*#__PURE__*/React.createElement("h1", {
    className: "heading-m"
  }, props.label);
};
const Close = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close, null));
};
const ActionModal = ({
  t,
  action,
  tenantId,
  state,
  id,
  closeModal,
  submitAction,
  actionData,
  applicationData,
  businessService,
  moduleCode
}) => {
  var _action$assigneeRoles, _action$assigneeRoles2;
  const {
    data: approverData,
    isLoading: PTALoading
  } = Digit.Hooks.useEmployeeSearch(tenantId, {
    roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, e => ({
      code: e
    })),
    isActive: true
  }, {
    enabled: !(action !== null && action !== void 0 && action.isTerminateState)
  });
  const {
    isLoading: financialYearsLoading,
    data: financialYearsData
  } = Digit.Hooks.pt.useMDMS(tenantId, businessService, "FINANCIAL_YEARLS", {}, {
    details: {
      tenantId: Digit.ULBService.getStateId(),
      moduleDetails: [{
        moduleName: "egf-master",
        masterDetails: [{
          name: "FinancialYear",
          filter: "[?(@.module == 'PT')]"
        }]
      }]
    }
  });
  const [config, setConfig] = useState({});
  const [defaultValues, setDefaultValues] = useState({});
  const [approvers, setApprovers] = useState([]);
  const [selectedApprover, setSelectedApprover] = useState(null);
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  const [financialYears, setFinancialYears] = useState([]);
  const [selectedFinancialYear, setSelectedFinancialYear] = useState(null);
  const [disableActionSubmit, setDisableActionSubmit] = useState(false);
  useEffect(() => {
    if (financialYearsData && financialYearsData["egf-master"]) {
      var _financialYearsData$e;
      setFinancialYears((_financialYearsData$e = financialYearsData["egf-master"]) === null || _financialYearsData$e === void 0 ? void 0 : _financialYearsData$e["FinancialYear"]);
    }
  }, [financialYearsData]);
  useEffect(() => {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(employee => {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  function submit(data) {
    if (!(action !== null && action !== void 0 && action.showFinancialYearsModal)) {
      let workflow = {
        action: action === null || action === void 0 ? void 0 : action.action,
        comment: data === null || data === void 0 ? void 0 : data.comments,
        businessService,
        moduleName: moduleCode
      };
      workflow["assignes"] = action !== null && action !== void 0 && action.isTerminateState || !selectedApprover ? [] : [selectedApprover];
      if (uploadedFile) workflow["documents"] = [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }];
      submitAction({
        Property: {
          ...applicationData,
          workflow
        }
      });
    } else {
      submitAction({
        customFunctionToExecute: action === null || action === void 0 ? void 0 : action.customFunctionToExecute,
        Assessment: {
          financialYear: selectedFinancialYear === null || selectedFinancialYear === void 0 ? void 0 : selectedFinancialYear.name,
          propertyId: applicationData === null || applicationData === void 0 ? void 0 : applicationData.propertyId,
          tenantId,
          source: applicationData === null || applicationData === void 0 ? void 0 : applicationData.source,
          channel: applicationData === null || applicationData === void 0 ? void 0 : applicationData.channel,
          assessmentDate: Date.now()
        }
      });
    }
  }
  useEffect(() => {
    if (action) {
      if (action !== null && action !== void 0 && action.showFinancialYearsModal) {
        setConfig(configPTAssessProperty({
          t,
          action,
          financialYears,
          selectedFinancialYear,
          setSelectedFinancialYear
        }));
      } else {
        setConfig(configPTApproverApplication({
          t,
          action,
          approvers,
          selectedApprover,
          setSelectedApprover,
          selectFile,
          uploadedFile,
          setUploadedFile,
          businessService
        }));
      }
    }
  }, [action, approvers, financialYears, selectedFinancialYear, uploadedFile]);
  return action && config.form ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: () => {},
    isDisabled: !action.showFinancialYearsModal ? PTALoading || (action === null || action === void 0 ? void 0 : action.docUploadRequired) && !uploadedFile : !selectedFinancialYear,
    formId: "modal-action"
  }, financialYearsLoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(FormComposer, {
    config: config.form,
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React.createElement(Loader, null);
};

const Heading$1 = props => {
  return /*#__PURE__*/React.createElement("h1", {
    className: "heading-m"
  }, props.label);
};
const Close$1 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$1 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$1, null));
};
const ActionModal$1 = ({
  t,
  action,
  tenantId,
  state,
  id,
  closeModal,
  submitAction,
  actionData,
  applicationData,
  businessService,
  moduleCode
}) => {
  var _action$assigneeRoles, _action$assigneeRoles2;
  const {
    data: approverData,
    isLoading: PTALoading
  } = Digit.Hooks.useEmployeeSearch(tenantId, {
    roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, e => ({
      code: e
    })),
    isActive: true
  }, {
    enabled: !(action !== null && action !== void 0 && action.isTerminateState)
  });
  const {
    isLoading: financialYearsLoading,
    data: financialYearsData
  } = Digit.Hooks.pt.useMDMS(tenantId, businessService, "FINANCIAL_YEARLS", {}, {
    details: {
      tenantId: Digit.ULBService.getStateId(),
      moduleDetails: [{
        moduleName: "egf-master",
        masterDetails: [{
          name: "FinancialYear",
          filter: "[?(@.module == 'TL')]"
        }]
      }]
    }
  });
  const [config, setConfig] = useState({});
  const [defaultValues, setDefaultValues] = useState({});
  const [approvers, setApprovers] = useState([]);
  const [selectedApprover, setSelectedApprover] = useState({});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  const [financialYears, setFinancialYears] = useState([]);
  const [selectedFinancialYear, setSelectedFinancialYear] = useState(null);
  useEffect(() => {
    if (financialYearsData && financialYearsData["egf-master"]) {
      var _financialYearsData$e;
      setFinancialYears((_financialYearsData$e = financialYearsData["egf-master"]) === null || _financialYearsData$e === void 0 ? void 0 : _financialYearsData$e["FinancialYear"]);
    }
  }, [financialYearsData]);
  useEffect(() => {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(employee => {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  function submit(data) {
    applicationData = {
      ...applicationData,
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: data === null || data === void 0 ? void 0 : data.comments,
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null
    };
    submitAction({
      Licenses: [applicationData]
    });
  }
  useEffect(() => {
    if (action) {
      setConfig(configTLApproverApplication({
        t,
        action,
        approvers,
        selectedApprover,
        setSelectedApprover,
        selectFile,
        uploadedFile,
        setUploadedFile,
        businessService
      }));
    }
  }, [action, approvers, financialYears, selectedFinancialYear, uploadedFile]);
  return action && config.form ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading$1, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$1, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: () => {},
    formId: "modal-action"
  }, financialYearsLoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(FormComposer, {
    config: config.form,
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React.createElement(Loader, null);
};

const Heading$2 = props => {
  return /*#__PURE__*/React.createElement("h1", {
    style: {
      marginLeft: "22px"
    },
    className: "heading-m BPAheading-m"
  }, props.label);
};
const Close$2 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$2 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$2, null));
};
const ActionModal$2 = ({
  t,
  action,
  tenantId,
  state,
  id,
  closeModal,
  submitAction,
  actionData,
  applicationData,
  businessService,
  moduleCode
}) => {
  var _action$assigneeRoles, _action$assigneeRoles2;
  const {
    data: approverData,
    isLoading: PTALoading
  } = Digit.Hooks.useEmployeeSearch(tenantId, {
    roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, e => ({
      code: e
    })),
    isActive: true
  }, {
    enabled: !(action !== null && action !== void 0 && action.isTerminateState)
  });
  const [config, setConfig] = useState({});
  const [defaultValues, setDefaultValues] = useState({});
  const [approvers, setApprovers] = useState([]);
  const [selectedApprover, setSelectedApprover] = useState({});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  const mobileView = Digit.Utils.browser.isMobile() ? true : false;
  useEffect(() => {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(employee => {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        const allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
          setError(t(`NOT_SUPPORTED_FILE_TYPE`));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("OBPS", file, Digit.ULBService.getStateId() || (tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]));
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  function submit(data) {
    applicationData = {
      ...applicationData,
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: data === null || data === void 0 ? void 0 : data.comments,
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null
    };
    submitAction({
      Licenses: [applicationData]
    }, false, {
      isStakeholder: true,
      bpa: false
    });
  }
  useEffect(() => {
    if (action) {
      setConfig(configBPAREGApproverApplication({
        t,
        action,
        approvers,
        selectedApprover,
        setSelectedApprover,
        selectFile,
        uploadedFile,
        setUploadedFile,
        businessService,
        error
      }));
    }
  }, [action, approvers, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading$2, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$2, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: () => {},
    formId: "modal-action",
    isOBPSFlow: true,
    popupStyles: mobileView ? {
      width: "720px"
    } : {},
    style: !mobileView ? {
      height: "45px",
      width: "107px",
      paddingLeft: "0px",
      paddingRight: "0px"
    } : {
      height: "45px",
      width: "44%"
    },
    popupModuleMianStyles: mobileView ? {
      paddingLeft: "5px"
    } : {}
  }, PTALoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(FormComposer, {
    config: config.form,
    cardStyle: {
      marginLeft: "0px",
      marginRight: "0px",
      marginTop: "-25px"
    },
    className: "BPAemployeeCard",
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React.createElement(Loader, null);
};

const Heading$3 = props => {
  return /*#__PURE__*/React.createElement("h1", {
    style: {
      marginLeft: "22px"
    },
    className: "heading-m BPAheading-m"
  }, props.label);
};
const Close$3 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$3 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$3, null));
};
const ActionModal$3 = ({
  t,
  action,
  tenantId,
  state,
  id,
  closeModal,
  submitAction,
  actionData,
  applicationDetails,
  applicationData,
  businessService,
  moduleCode,
  workflowDetails
}) => {
  var _applicationData, _applicationData$land, _applicationData$land2, _applicationData2, _applicationData2$lan, _applicationData2$lan2, _workflowDetails$data, _workflowDetails$data2, _workflowDetails$data3, _workflowDetails$data4, _workflowDetails$data5, _workflowDetails$data6;
  const mutation1 = Digit.Hooks.obps.useObpsAPI((_applicationData = applicationData) !== null && _applicationData !== void 0 && (_applicationData$land = _applicationData.landInfo) !== null && _applicationData$land !== void 0 && (_applicationData$land2 = _applicationData$land.address) !== null && _applicationData$land2 !== void 0 && _applicationData$land2.city ? (_applicationData2 = applicationData) === null || _applicationData2 === void 0 ? void 0 : (_applicationData2$lan = _applicationData2.landInfo) === null || _applicationData2$lan === void 0 ? void 0 : (_applicationData2$lan2 = _applicationData2$lan.address) === null || _applicationData2$lan2 === void 0 ? void 0 : _applicationData2$lan2.city : tenantId, false);
  const {
    data: approverData,
    isLoading: PTALoading
  } = Digit.Hooks.useEmployeeSearch(tenantId, {
    roles: workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : (_workflowDetails$data2 = _workflowDetails$data.initialActionState) === null || _workflowDetails$data2 === void 0 ? void 0 : (_workflowDetails$data3 = _workflowDetails$data2.nextActions) === null || _workflowDetails$data3 === void 0 ? void 0 : (_workflowDetails$data4 = _workflowDetails$data3.filter(ele => (ele === null || ele === void 0 ? void 0 : ele.action) == (action === null || action === void 0 ? void 0 : action.action))) === null || _workflowDetails$data4 === void 0 ? void 0 : (_workflowDetails$data5 = _workflowDetails$data4[0]) === null || _workflowDetails$data5 === void 0 ? void 0 : (_workflowDetails$data6 = _workflowDetails$data5.assigneeRoles) === null || _workflowDetails$data6 === void 0 ? void 0 : _workflowDetails$data6.map(role => ({
      code: role
    })),
    isActive: true
  }, {
    enabled: !(action !== null && action !== void 0 && action.isTerminateState)
  });
  const queryClient = useQueryClient();
  const [config, setConfig] = useState({});
  const [defaultValues, setDefaultValues] = useState({});
  const [approvers, setApprovers] = useState([]);
  const [selectedApprover, setSelectedApprover] = useState({});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  const [selectedFinancialYear, setSelectedFinancialYear] = useState(null);
  const mobileView = Digit.Utils.browser.isMobile() ? true : false;
  useEffect(() => {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(employee => {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        const allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
          setError(t(`NOT_SUPPORTED_FILE_TYPE`));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("OBPS", file, Digit.ULBService.getStateId() || (tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]));
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  const getInspectionDocs = docs => {
    let refinedDocs = [];
    docs && docs.map((doc, ind) => {
      refinedDocs.push({
        "documentType": (doc.documentType + "_" + doc.documentType.split("_")[1]).replaceAll("_", "."),
        "fileStoreId": doc.fileStoreId,
        "fileStore": doc.fileStoreId,
        "fileName": "",
        "dropDownValues": {
          "value": (doc.documentType + "_" + doc.documentType.split("_")[1]).replaceAll("_", ".")
        }
      });
    });
    return refinedDocs;
  };
  const getQuestion = data => {
    let refinedQues = [];
    var i;
    for (i = 0; i < (data === null || data === void 0 ? void 0 : data.questionLength); i++) {
      var _data;
      refinedQues.push({
        "remarks": data[`Remarks_${i}`],
        "question": data === null || data === void 0 ? void 0 : data.questionList[i].question,
        "value": data === null || data === void 0 ? void 0 : (_data = data[`question_${i}`]) === null || _data === void 0 ? void 0 : _data.code
      });
    }
    return refinedQues;
  };
  const getfeildInspection = data => {
    var _data$additionalDetai, _data$additionalDetai2;
    let formdata = [],
      inspectionOb = [];
    if ((data === null || data === void 0 ? void 0 : (_data$additionalDetai = data.additionalDetails) === null || _data$additionalDetai === void 0 ? void 0 : (_data$additionalDetai2 = _data$additionalDetai.fieldinspection_pending) === null || _data$additionalDetai2 === void 0 ? void 0 : _data$additionalDetai2.length) > 0) {
      var _data$additionalDetai3;
      inspectionOb = data === null || data === void 0 ? void 0 : (_data$additionalDetai3 = data.additionalDetails) === null || _data$additionalDetai3 === void 0 ? void 0 : _data$additionalDetai3.fieldinspection_pending;
    }
    if (data.status == "FIELDINSPECTION_INPROGRESS") {
      var _formdata;
      formdata = JSON.parse(sessionStorage.getItem("INSPECTION_DATA"));
      ((_formdata = formdata) === null || _formdata === void 0 ? void 0 : _formdata.length) > 0 && formdata.map((ob, ind) => {
        inspectionOb.push({
          docs: getInspectionDocs(ob.Documents),
          date: ob.InspectionDate,
          questions: getQuestion(ob),
          time: ob === null || ob === void 0 ? void 0 : ob.InspectionTime
        });
      });
      inspectionOb = inspectionOb.filter(ob => ob.docs && ob.docs.length > 0);
    } else {
      sessionStorage.removeItem("INSPECTION_DATA");
    }
    let fieldinspection_pending = [...inspectionOb];
    return fieldinspection_pending;
  };
  const getDocuments = applicationData => {
    let documentsformdata = JSON.parse(sessionStorage.getItem("BPA_DOCUMENTS"));
    let documentList = [];
    documentsformdata.map(doc => {
      var _doc$uploadedDocument, _doc$uploadedDocument2, _doc$uploadedDocument3, _doc$uploadedDocument4, _doc$uploadedDocument5, _doc$newUploadedDocs;
      if ((doc === null || doc === void 0 ? void 0 : (_doc$uploadedDocument = doc.uploadedDocuments) === null || _doc$uploadedDocument === void 0 ? void 0 : (_doc$uploadedDocument2 = _doc$uploadedDocument[0]) === null || _doc$uploadedDocument2 === void 0 ? void 0 : (_doc$uploadedDocument3 = _doc$uploadedDocument2.values) === null || _doc$uploadedDocument3 === void 0 ? void 0 : _doc$uploadedDocument3.length) > 0) documentList = [...documentList, ...(doc === null || doc === void 0 ? void 0 : (_doc$uploadedDocument4 = doc.uploadedDocuments) === null || _doc$uploadedDocument4 === void 0 ? void 0 : (_doc$uploadedDocument5 = _doc$uploadedDocument4[0]) === null || _doc$uploadedDocument5 === void 0 ? void 0 : _doc$uploadedDocument5.values)];
      if ((doc === null || doc === void 0 ? void 0 : (_doc$newUploadedDocs = doc.newUploadedDocs) === null || _doc$newUploadedDocs === void 0 ? void 0 : _doc$newUploadedDocs.length) > 0) documentList = [...documentList, ...(doc === null || doc === void 0 ? void 0 : doc.newUploadedDocs)];
    });
    return documentList;
  };
  const getPendingApprovals = () => {
    var _result;
    const approvals = Digit.SessionStorage.get("OBPS_APPROVAL_CHECKS");
    const newApprovals = Digit.SessionStorage.get("OBPS_NEW_APPROVALS");
    let result = approvals === null || approvals === void 0 ? void 0 : approvals.reduce((acc, approval) => approval !== null && approval !== void 0 && approval.checked ? acc.push(approval === null || approval === void 0 ? void 0 : approval.label) && acc : acc, []);
    result = (_result = result) === null || _result === void 0 ? void 0 : _result.concat(newApprovals !== null ? newApprovals.filter(ob => ob.label !== "").map(approval => approval === null || approval === void 0 ? void 0 : approval.label) : []);
    return result;
  };
  async function submit(data) {
    var _applicationData3, _data$comments, _data$comments2, _applicationDetails$n, _nocDetails$, _nocDetails$$Noc, _response$Noc;
    applicationData = {
      ...applicationData,
      documents: getDocuments(),
      additionalDetails: {
        ...((_applicationData3 = applicationData) === null || _applicationData3 === void 0 ? void 0 : _applicationData3.additionalDetails),
        fieldinspection_pending: getfeildInspection(applicationData),
        pendingapproval: getPendingApprovals()
      },
      workflow: {
        action: action === null || action === void 0 ? void 0 : action.action,
        comment: (data === null || data === void 0 ? void 0 : (_data$comments = data.comments) === null || _data$comments === void 0 ? void 0 : _data$comments.length) > 0 ? data === null || data === void 0 ? void 0 : data.comments : null,
        comments: (data === null || data === void 0 ? void 0 : (_data$comments2 = data.comments) === null || _data$comments2 === void 0 ? void 0 : _data$comments2.length) > 0 ? data === null || data === void 0 ? void 0 : data.comments : null,
        assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
        assignes: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
        varificationDocuments: uploadedFile ? [{
          documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
          fileName: file === null || file === void 0 ? void 0 : file.name,
          fileStoreId: uploadedFile
        }] : null
      },
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: data === null || data === void 0 ? void 0 : data.comments,
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null
    };
    const nocDetails = applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$n = applicationDetails.nocData) === null || _applicationDetails$n === void 0 ? void 0 : _applicationDetails$n.map(noc => {
      const uploadedDocuments = Digit.SessionStorage.get(noc === null || noc === void 0 ? void 0 : noc.nocType) || [];
      return {
        Noc: {
          ...noc,
          documents: [...(noc !== null && noc !== void 0 && noc.documents ? noc === null || noc === void 0 ? void 0 : noc.documents : []), ...(uploadedDocuments ? uploadedDocuments : [])]
        }
      };
    });
    let filters = {
      sourceRefId: nocDetails === null || nocDetails === void 0 ? void 0 : (_nocDetails$ = nocDetails[0]) === null || _nocDetails$ === void 0 ? void 0 : (_nocDetails$$Noc = _nocDetails$.Noc) === null || _nocDetails$$Noc === void 0 ? void 0 : _nocDetails$$Noc.sourceRefId
    };
    const response = await Digit.NOCSearch.all(tenantId, filters);
    let AirportFlag = true;
    let NocFlag = true;
    response === null || response === void 0 ? void 0 : (_response$Noc = response.Noc) === null || _response$Noc === void 0 ? void 0 : _response$Noc.map(ob => {
      var _ob$applicationStatus, _ob$applicationStatus2, _ob$applicationStatus3, _ob$applicationStatus4, _ob$applicationStatus5;
      if (((ob === null || ob === void 0 ? void 0 : (_ob$applicationStatus = ob.applicationStatus) === null || _ob$applicationStatus === void 0 ? void 0 : _ob$applicationStatus.toUpperCase()) === "APPROVED" || (ob === null || ob === void 0 ? void 0 : (_ob$applicationStatus2 = ob.applicationStatus) === null || _ob$applicationStatus2 === void 0 ? void 0 : _ob$applicationStatus2.toUpperCase()) === "AUTO_APPROVED" || (ob === null || ob === void 0 ? void 0 : (_ob$applicationStatus3 = ob.applicationStatus) === null || _ob$applicationStatus3 === void 0 ? void 0 : _ob$applicationStatus3.toUpperCase()) === "REJECTED" || (ob === null || ob === void 0 ? void 0 : (_ob$applicationStatus4 = ob.applicationStatus) === null || _ob$applicationStatus4 === void 0 ? void 0 : _ob$applicationStatus4.toUpperCase()) === "AUTO_REJECTED" || (ob === null || ob === void 0 ? void 0 : (_ob$applicationStatus5 = ob.applicationStatus) === null || _ob$applicationStatus5 === void 0 ? void 0 : _ob$applicationStatus5.toUpperCase()) === "VOIDED") && (AirportFlag == true || NocFlag == true)) {
        if ((ob === null || ob === void 0 ? void 0 : ob.nocType) === "AIRPORT_AUTHORITY") AirportFlag = false;else if ((ob === null || ob === void 0 ? void 0 : ob.nocType) === "FIRE_NOC") NocFlag = false;
      }
    });
    let nocData = [];
    if (nocDetails) {
      nocDetails.map(noc => {
        var _noc$Noc, _noc$Noc$applicationS, _noc$Noc2, _noc$Noc2$application, _noc$Noc3, _noc$Noc3$application, _noc$Noc4, _noc$Noc4$application, _noc$Noc5, _noc$Noc5$application, _noc$Noc6, _noc$Noc7;
        if ((noc === null || noc === void 0 ? void 0 : (_noc$Noc = noc.Noc) === null || _noc$Noc === void 0 ? void 0 : (_noc$Noc$applicationS = _noc$Noc.applicationStatus) === null || _noc$Noc$applicationS === void 0 ? void 0 : _noc$Noc$applicationS.toUpperCase()) != "APPROVED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc2 = noc.Noc) === null || _noc$Noc2 === void 0 ? void 0 : (_noc$Noc2$application = _noc$Noc2.applicationStatus) === null || _noc$Noc2$application === void 0 ? void 0 : _noc$Noc2$application.toUpperCase()) != "AUTO_APPROVED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc3 = noc.Noc) === null || _noc$Noc3 === void 0 ? void 0 : (_noc$Noc3$application = _noc$Noc3.applicationStatus) === null || _noc$Noc3$application === void 0 ? void 0 : _noc$Noc3$application.toUpperCase()) != "REJECTED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc4 = noc.Noc) === null || _noc$Noc4 === void 0 ? void 0 : (_noc$Noc4$application = _noc$Noc4.applicationStatus) === null || _noc$Noc4$application === void 0 ? void 0 : _noc$Noc4$application.toUpperCase()) != "AUTO_REJECTED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc5 = noc.Noc) === null || _noc$Noc5 === void 0 ? void 0 : (_noc$Noc5$application = _noc$Noc5.applicationStatus) === null || _noc$Noc5$application === void 0 ? void 0 : _noc$Noc5$application.toUpperCase()) != "VOIDED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc6 = noc.Noc) === null || _noc$Noc6 === void 0 ? void 0 : _noc$Noc6.nocType) === "AIRPORT_AUTHORITY" && AirportFlag || (noc === null || noc === void 0 ? void 0 : (_noc$Noc7 = noc.Noc) === null || _noc$Noc7 === void 0 ? void 0 : _noc$Noc7.nocType) === "FIRE_NOC" && NocFlag) {
          nocData.push(noc);
        }
      });
    }
    submitAction({
      BPA: applicationData
    }, (nocData === null || nocData === void 0 ? void 0 : nocData.length) > 0 ? nocData : false, {
      isStakeholder: false,
      bpa: true
    });
  }
  useEffect(() => {
    if (action) {
      setConfig(configBPAApproverApplication({
        t,
        action,
        approvers,
        selectedApprover,
        setSelectedApprover,
        selectFile,
        uploadedFile,
        setUploadedFile,
        businessService,
        assigneeLabel: "WF_ASSIGNEE_NAME_LABEL",
        error
      }));
    }
  }, [action, approvers, selectedFinancialYear, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading$3, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$3, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: () => {},
    formId: "modal-action",
    isOBPSFlow: true,
    popupStyles: mobileView ? {
      width: "720px"
    } : {},
    style: !mobileView ? {
      minHeight: "45px",
      height: "auto",
      width: "107px",
      paddingLeft: "0px",
      paddingRight: "0px"
    } : {
      minHeight: "45px",
      height: "auto",
      width: "44%"
    },
    popupModuleMianStyles: mobileView ? {
      paddingLeft: "5px"
    } : {}
  }, PTALoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(FormComposer, {
    config: config.form,
    cardStyle: {
      marginLeft: "0px",
      marginRight: "0px",
      marginTop: "-25px"
    },
    className: "BPAemployeeCard",
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React.createElement(Loader, null);
};

const Heading$4 = props => {
  return /*#__PURE__*/React.createElement("h1", {
    style: {
      marginLeft: "22px"
    },
    className: "heading-m BPAheading-m"
  }, props.label);
};
const Close$4 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$4 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$4, null));
};
const ActionModal$4 = ({
  t,
  action,
  tenantId,
  state,
  id,
  closeModal,
  submitAction,
  actionData,
  applicationData,
  businessService,
  moduleCode
}) => {
  var _action$assigneeRoles, _action$assigneeRoles2;
  const {
    data: approverData,
    isLoading: PTALoading
  } = Digit.Hooks.useEmployeeSearch(tenantId, {
    roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, e => ({
      code: e
    })),
    isActive: true
  }, {
    enabled: !(action !== null && action !== void 0 && action.isTerminateState)
  });
  const queryClient = useQueryClient();
  const [config, setConfig] = useState({});
  const [defaultValues, setDefaultValues] = useState({});
  const [approvers, setApprovers] = useState([]);
  const [selectedApprover, setSelectedApprover] = useState({});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  const mobileView = Digit.Utils.browser.isMobile() ? true : false;
  const history = useHistory();
  useEffect(() => {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(employee => {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        const allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
          setError(t(`NOT_SUPPORTED_FILE_TYPE`));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("NOC", file, Digit.ULBService.getStateId() || (tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]));
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  function submit(data) {
    var _applicationData, _applicationData$docu, _applicationData2;
    let enteredDocs = JSON.parse(sessionStorage.getItem("NewNOCDocs"));
    let newDocs = ((_applicationData = applicationData) === null || _applicationData === void 0 ? void 0 : (_applicationData$docu = _applicationData.documents) === null || _applicationData$docu === void 0 ? void 0 : _applicationData$docu.length) > 0 ? [...((_applicationData2 = applicationData) === null || _applicationData2 === void 0 ? void 0 : _applicationData2.documents)] : [];
    enteredDocs.map((d, index) => {
      newDocs.push(d);
    });
    applicationData = {
      ...applicationData,
      workflow: {
        action: action === null || action === void 0 ? void 0 : action.action,
        comment: data !== null && data !== void 0 && data.comments ? data === null || data === void 0 ? void 0 : data.comments : null,
        assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
        documents: uploadedFile ? [{
          documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
          fileName: file === null || file === void 0 ? void 0 : file.name,
          fileStoreId: uploadedFile
        }] : null
      },
      documents: newDocs
    };
    submitAction({
      Noc: applicationData
    }, false, {
      isNoc: true
    });
  }
  useEffect(() => {
    if (action) {
      setConfig(configNOCApproverApplication({
        t,
        action,
        approvers,
        selectedApprover,
        setSelectedApprover,
        selectFile,
        uploadedFile,
        setUploadedFile,
        businessService,
        assigneeLabel: "WF_ASSIGNEE_NAME_LABEL",
        error
      }));
    }
  }, [action, approvers, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading$4, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$4, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: () => {},
    formId: "modal-action",
    isOBPSFlow: true,
    popupStyles: mobileView ? {
      width: "720px"
    } : {},
    style: !mobileView ? {
      height: "45px",
      width: "107px",
      paddingLeft: "0px",
      paddingRight: "0px"
    } : {
      height: "45px",
      width: "44%"
    },
    popupModuleMianStyles: mobileView ? {
      paddingLeft: "5px"
    } : {}
  }, PTALoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(FormComposer, {
    config: config.form,
    cardStyle: {
      marginLeft: "0px",
      marginRight: "0px",
      marginTop: "-25px"
    },
    className: "BPAemployeeCard",
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React.createElement(Loader, null);
};

function stackClear() {
  this.__data__ = new _ListCache();
  this.size = 0;
}
var _stackClear = stackClear;

function stackDelete(key) {
  var data = this.__data__,
    result = data['delete'](key);
  this.size = data.size;
  return result;
}
var _stackDelete = stackDelete;

function stackGet(key) {
  return this.__data__.get(key);
}
var _stackGet = stackGet;

function stackHas(key) {
  return this.__data__.has(key);
}
var _stackHas = stackHas;

var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof _ListCache) {
    var pairs = data.__data__;
    if (!_Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
var _stackSet = stackSet;

function Stack(entries) {
  var data = this.__data__ = new _ListCache(entries);
  this.size = data.size;
}
Stack.prototype.clear = _stackClear;
Stack.prototype['delete'] = _stackDelete;
Stack.prototype.get = _stackGet;
Stack.prototype.has = _stackHas;
Stack.prototype.set = _stackSet;
var _Stack = Stack;

function arrayEach(array, iteratee) {
  var index = -1,
    length = array == null ? 0 : array.length;
  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}
var _arrayEach = arrayEach;

var defineProperty = function () {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();
var _defineProperty = defineProperty;

function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty) {
    _defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}
var _baseAssignValue = baseAssignValue;

var objectProto$5 = Object.prototype;
var hasOwnProperty$5 = objectProto$5.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$5.call(object, key) && eq_1(objValue, value)) || value === undefined && !(key in object)) {
    _baseAssignValue(object, key, value);
  }
}
var _assignValue = assignValue;

function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
    length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      _baseAssignValue(object, key, newValue);
    } else {
      _assignValue(object, key, newValue);
    }
  }
  return object;
}
var _copyObject = copyObject;

function baseTimes(n, iteratee) {
  var index = -1,
    result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var _baseTimes = baseTimes;

var argsTag = '[object Arguments]';
function baseIsArguments(value) {
  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
}
var _baseIsArguments = baseIsArguments;

var objectProto$6 = Object.prototype;
var hasOwnProperty$6 = objectProto$6.hasOwnProperty;
var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
var isArguments = _baseIsArguments(function () {
  return arguments;
}()) ? _baseIsArguments : function (value) {
  return isObjectLike_1(value) && hasOwnProperty$6.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
var isArguments_1 = isArguments;

function stubFalse() {
  return false;
}
var stubFalse_1 = stubFalse;

var isBuffer_1 = createCommonjsModule(function (module, exports) {
  var freeExports =  exports && !exports.nodeType && exports;
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? _root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse_1;
  module.exports = isBuffer;
});

var MAX_SAFE_INTEGER = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
var _isIndex = isIndex;

var MAX_SAFE_INTEGER$1 = 9007199254740991;
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}
var isLength_1 = isLength;

var argsTag$1 = '[object Arguments]',
  arrayTag = '[object Array]',
  boolTag = '[object Boolean]',
  dateTag = '[object Date]',
  errorTag = '[object Error]',
  funcTag$1 = '[object Function]',
  mapTag = '[object Map]',
  numberTag = '[object Number]',
  objectTag = '[object Object]',
  regexpTag = '[object RegExp]',
  setTag = '[object Set]',
  stringTag = '[object String]',
  weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
  dataViewTag = '[object DataView]',
  float32Tag = '[object Float32Array]',
  float64Tag = '[object Float64Array]',
  int8Tag = '[object Int8Array]',
  int16Tag = '[object Int16Array]',
  int32Tag = '[object Int32Array]',
  uint8Tag = '[object Uint8Array]',
  uint8ClampedTag = '[object Uint8ClampedArray]',
  uint16Tag = '[object Uint16Array]',
  uint32Tag = '[object Uint32Array]';
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
  return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
}
var _baseIsTypedArray = baseIsTypedArray;

function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}
var _baseUnary = baseUnary;

var _nodeUtil = createCommonjsModule(function (module, exports) {
  var freeExports =  exports && !exports.nodeType && exports;
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && _freeGlobal.process;
  var nodeUtil = function () {
    try {
      var types = freeModule && freeModule.require && freeModule.require('util').types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();
  module.exports = nodeUtil;
});

var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
var isTypedArray_1 = isTypedArray;

var objectProto$7 = Object.prototype;
var hasOwnProperty$7 = objectProto$7.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_1(value),
    isArg = !isArr && isArguments_1(value),
    isBuff = !isArr && !isArg && isBuffer_1(value),
    isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
    skipIndexes = isArr || isArg || isBuff || isType,
    result = skipIndexes ? _baseTimes(value.length, String) : [],
    length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty$7.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || _isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var _arrayLikeKeys = arrayLikeKeys;

var objectProto$8 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor,
    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$8;
  return value === proto;
}
var _isPrototype = isPrototype;

function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}
var _overArg = overArg;

var nativeKeys = _overArg(Object.keys, Object);
var _nativeKeys = nativeKeys;

var objectProto$9 = Object.prototype;
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$8.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}
var _baseKeys = baseKeys;

function isArrayLike(value) {
  return value != null && isLength_1(value.length) && !isFunction_1(value);
}
var isArrayLike_1 = isArrayLike;

function keys(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}
var keys_1 = keys;

function baseAssign(object, source) {
  return object && _copyObject(source, keys_1(source), object);
}
var _baseAssign = baseAssign;

function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}
var _nativeKeysIn = nativeKeysIn;

var objectProto$a = Object.prototype;
var hasOwnProperty$9 = objectProto$a.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject_1(object)) {
    return _nativeKeysIn(object);
  }
  var isProto = _isPrototype(object),
    result = [];
  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}
var _baseKeysIn = baseKeysIn;

function keysIn(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
}
var keysIn_1 = keysIn;

function baseAssignIn(object, source) {
  return object && _copyObject(source, keysIn_1(source), object);
}
var _baseAssignIn = baseAssignIn;

var _cloneBuffer = createCommonjsModule(function (module, exports) {
  var freeExports =  exports && !exports.nodeType && exports;
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? _root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }
  module.exports = cloneBuffer;
});

function copyArray(source, array) {
  var index = -1,
    length = source.length;
  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}
var _copyArray = copyArray;

function arrayFilter(array, predicate) {
  var index = -1,
    length = array == null ? 0 : array.length,
    resIndex = 0,
    result = [];
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
var _arrayFilter = arrayFilter;

function stubArray() {
  return [];
}
var stubArray_1 = stubArray;

var objectProto$b = Object.prototype;
var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols ? stubArray_1 : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return _arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable$1.call(object, symbol);
  });
};
var _getSymbols = getSymbols;

function copySymbols(source, object) {
  return _copyObject(source, _getSymbols(source), object);
}
var _copySymbols = copySymbols;

function arrayPush(array, values) {
  var index = -1,
    length = values.length,
    offset = array.length;
  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}
var _arrayPush = arrayPush;

var getPrototype = _overArg(Object.getPrototypeOf, Object);
var _getPrototype = getPrototype;

var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function (object) {
  var result = [];
  while (object) {
    _arrayPush(result, _getSymbols(object));
    object = _getPrototype(object);
  }
  return result;
};
var _getSymbolsIn = getSymbolsIn;

function copySymbolsIn(source, object) {
  return _copyObject(source, _getSymbolsIn(source), object);
}
var _copySymbolsIn = copySymbolsIn;

function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
}
var _baseGetAllKeys = baseGetAllKeys;

function getAllKeys(object) {
  return _baseGetAllKeys(object, keys_1, _getSymbols);
}
var _getAllKeys = getAllKeys;

function getAllKeysIn(object) {
  return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
}
var _getAllKeysIn = getAllKeysIn;

var DataView = _getNative(_root, 'DataView');
var _DataView = DataView;

var Promise$1 = _getNative(_root, 'Promise');
var _Promise = Promise$1;

var Set = _getNative(_root, 'Set');
var _Set = Set;

var WeakMap = _getNative(_root, 'WeakMap');
var _WeakMap = WeakMap;

var mapTag$1 = '[object Map]',
  objectTag$1 = '[object Object]',
  promiseTag = '[object Promise]',
  setTag$1 = '[object Set]',
  weakMapTag$1 = '[object WeakMap]';
var dataViewTag$1 = '[object DataView]';
var dataViewCtorString = _toSource(_DataView),
  mapCtorString = _toSource(_Map),
  promiseCtorString = _toSource(_Promise),
  setCtorString = _toSource(_Set),
  weakMapCtorString = _toSource(_WeakMap);
var getTag = _baseGetTag;
if (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1 || _Map && getTag(new _Map()) != mapTag$1 || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag$1 || _WeakMap && getTag(new _WeakMap()) != weakMapTag$1) {
  getTag = function (value) {
    var result = _baseGetTag(value),
      Ctor = result == objectTag$1 ? value.constructor : undefined,
      ctorString = Ctor ? _toSource(Ctor) : '';
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$1;
        case mapCtorString:
          return mapTag$1;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$1;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
var _getTag = getTag;

var objectProto$c = Object.prototype;
var hasOwnProperty$a = objectProto$c.hasOwnProperty;
function initCloneArray(array) {
  var length = array.length,
    result = new array.constructor(length);
  if (length && typeof array[0] == 'string' && hasOwnProperty$a.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}
var _initCloneArray = initCloneArray;

var Uint8Array = _root.Uint8Array;
var _Uint8Array = Uint8Array;

function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
  return result;
}
var _cloneArrayBuffer = cloneArrayBuffer;

function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var _cloneDataView = cloneDataView;

var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}
var _cloneRegExp = cloneRegExp;

var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
  symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var _cloneSymbol = cloneSymbol;

function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var _cloneTypedArray = cloneTypedArray;

var boolTag$1 = '[object Boolean]',
  dateTag$1 = '[object Date]',
  mapTag$2 = '[object Map]',
  numberTag$1 = '[object Number]',
  regexpTag$1 = '[object RegExp]',
  setTag$2 = '[object Set]',
  stringTag$1 = '[object String]',
  symbolTag$1 = '[object Symbol]';
var arrayBufferTag$1 = '[object ArrayBuffer]',
  dataViewTag$2 = '[object DataView]',
  float32Tag$1 = '[object Float32Array]',
  float64Tag$1 = '[object Float64Array]',
  int8Tag$1 = '[object Int8Array]',
  int16Tag$1 = '[object Int16Array]',
  int32Tag$1 = '[object Int32Array]',
  uint8Tag$1 = '[object Uint8Array]',
  uint8ClampedTag$1 = '[object Uint8ClampedArray]',
  uint16Tag$1 = '[object Uint16Array]',
  uint32Tag$1 = '[object Uint32Array]';
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return _cloneArrayBuffer(object);
    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);
    case dataViewTag$2:
      return _cloneDataView(object, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return _cloneTypedArray(object, isDeep);
    case mapTag$2:
      return new Ctor();
    case numberTag$1:
    case stringTag$1:
      return new Ctor(object);
    case regexpTag$1:
      return _cloneRegExp(object);
    case setTag$2:
      return new Ctor();
    case symbolTag$1:
      return _cloneSymbol(object);
  }
}
var _initCloneByTag = initCloneByTag;

var objectCreate = Object.create;
var baseCreate = function () {
  function object() {}
  return function (proto) {
    if (!isObject_1(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();
var _baseCreate = baseCreate;

function initCloneObject(object) {
  return typeof object.constructor == 'function' && !_isPrototype(object) ? _baseCreate(_getPrototype(object)) : {};
}
var _initCloneObject = initCloneObject;

var mapTag$3 = '[object Map]';
function baseIsMap(value) {
  return isObjectLike_1(value) && _getTag(value) == mapTag$3;
}
var _baseIsMap = baseIsMap;

var nodeIsMap = _nodeUtil && _nodeUtil.isMap;
var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
var isMap_1 = isMap;

var setTag$3 = '[object Set]';
function baseIsSet(value) {
  return isObjectLike_1(value) && _getTag(value) == setTag$3;
}
var _baseIsSet = baseIsSet;

var nodeIsSet = _nodeUtil && _nodeUtil.isSet;
var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
var isSet_1 = isSet;

var CLONE_DEEP_FLAG = 1,
  CLONE_FLAT_FLAG = 2,
  CLONE_SYMBOLS_FLAG = 4;
var argsTag$2 = '[object Arguments]',
  arrayTag$1 = '[object Array]',
  boolTag$2 = '[object Boolean]',
  dateTag$2 = '[object Date]',
  errorTag$1 = '[object Error]',
  funcTag$2 = '[object Function]',
  genTag$1 = '[object GeneratorFunction]',
  mapTag$4 = '[object Map]',
  numberTag$2 = '[object Number]',
  objectTag$2 = '[object Object]',
  regexpTag$2 = '[object RegExp]',
  setTag$4 = '[object Set]',
  stringTag$2 = '[object String]',
  symbolTag$2 = '[object Symbol]',
  weakMapTag$2 = '[object WeakMap]';
var arrayBufferTag$2 = '[object ArrayBuffer]',
  dataViewTag$3 = '[object DataView]',
  float32Tag$2 = '[object Float32Array]',
  float64Tag$2 = '[object Float64Array]',
  int8Tag$2 = '[object Int8Array]',
  int16Tag$2 = '[object Int16Array]',
  int32Tag$2 = '[object Int32Array]',
  uint8Tag$2 = '[object Uint8Array]',
  uint8ClampedTag$2 = '[object Uint8ClampedArray]',
  uint16Tag$2 = '[object Uint16Array]',
  uint32Tag$2 = '[object Uint32Array]';
var cloneableTags = {};
cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] = cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] = cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] = cloneableTags[numberTag$2] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$2] = cloneableTags[setTag$4] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] = cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
    isDeep = bitmask & CLONE_DEEP_FLAG,
    isFlat = bitmask & CLONE_FLAT_FLAG,
    isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject_1(value)) {
    return value;
  }
  var isArr = isArray_1(value);
  if (isArr) {
    result = _initCloneArray(value);
    if (!isDeep) {
      return _copyArray(value, result);
    }
  } else {
    var tag = _getTag(value),
      isFunc = tag == funcTag$2 || tag == genTag$1;
    if (isBuffer_1(value)) {
      return _cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$2 || tag == argsTag$2 || isFunc && !object) {
      result = isFlat || isFunc ? {} : _initCloneObject(value);
      if (!isDeep) {
        return isFlat ? _copySymbolsIn(value, _baseAssignIn(result, value)) : _copySymbols(value, _baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = _initCloneByTag(value, tag, isDeep);
    }
  }
  stack || (stack = new _Stack());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);
  if (isSet_1(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap_1(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? _getAllKeysIn : _getAllKeys : isFlat ? keysIn_1 : keys_1;
  var props = isArr ? undefined : keysFunc(value);
  _arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}
var _baseClone = baseClone;

var CLONE_DEEP_FLAG$1 = 1,
  CLONE_SYMBOLS_FLAG$1 = 4;
function cloneDeep(value) {
  return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
}
var cloneDeep_1 = cloneDeep;

const Heading$5 = props => {
  return /*#__PURE__*/React.createElement("h1", {
    className: "heading-m"
  }, props.label);
};
const Close$5 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$5 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$5, null));
};
const convertDateToEpochNew = (dateString, dayStartOrEnd = "dayend") => {
  try {
    const parts = dateString.match(/(\d{4})-(\d{1,2})-(\d{1,2})/);
    const DateObj = new Date(Date.UTC(parts[1], parts[2] - 1, parts[3]));
    DateObj.setMinutes(DateObj.getMinutes() + DateObj.getTimezoneOffset());
    if (dayStartOrEnd === "dayend") {
      DateObj.setHours(DateObj.getHours() + 24);
      DateObj.setSeconds(DateObj.getSeconds() - 1);
    }
    return DateObj.getTime();
  } catch (e) {
    return dateString;
  }
};
const ActionModal$5 = ({
  t,
  action,
  tenantId,
  state,
  id,
  closeModal,
  submitAction,
  actionData,
  applicationData,
  businessService,
  moduleCode
}) => {
  var _action$assigneeRoles, _action$assigneeRoles2;
  const {
    data: approverData,
    isLoading: PTALoading
  } = Digit.Hooks.useEmployeeSearch(tenantId, {
    roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, e => ({
      code: e
    })),
    isActive: true
  }, {
    enabled: !(action !== null && action !== void 0 && action.isTerminateState)
  });
  const [config, setConfig] = useState({});
  const [defaultValues, setDefaultValues] = useState({});
  const [approvers, setApprovers] = useState([]);
  const [selectedApprover, setSelectedApprover] = useState({});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [error, setError] = useState(null);
  const isMobile = window.Digit.Utils.browser.isMobile();
  const isEmployee = window.location.href.includes("/employee");
  useEffect(() => {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(employee => {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        const allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
          setError(t(`NOT_SUPPORTED_FILE_TYPE`));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("WS", file, Digit.ULBService.getCurrentTenantId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            console.error("Modal -> err ", err);
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  function submit(data) {
    var _applicationData, _applicationData7, _applicationData8, _applicationData8$app, _applicationData9, _applicationData9$pro, _applicationData10, _applicationData10$pr;
    if ((_applicationData = applicationData) !== null && _applicationData !== void 0 && _applicationData.isBillAmend) {
      var _applicationData2, _applicationData2$bil, _applicationData3, _applicationData4, _applicationData4$bil, _applicationData5, _applicationData5$app, _applicationData6, _applicationData6$app;
      const comments = data !== null && data !== void 0 && data.comments ? data.comments : null;
      const additionalDetails = {
        ...((_applicationData2 = applicationData) === null || _applicationData2 === void 0 ? void 0 : (_applicationData2$bil = _applicationData2.billAmendmentDetails) === null || _applicationData2$bil === void 0 ? void 0 : _applicationData2$bil.additionalDetails),
        comments
      };
      const amendment = {
        ...((_applicationData3 = applicationData) === null || _applicationData3 === void 0 ? void 0 : _applicationData3.billAmendmentDetails),
        workflow: {
          businessId: (_applicationData4 = applicationData) === null || _applicationData4 === void 0 ? void 0 : (_applicationData4$bil = _applicationData4.billAmendmentDetails) === null || _applicationData4$bil === void 0 ? void 0 : _applicationData4$bil.amendmentId,
          action: action === null || action === void 0 ? void 0 : action.action,
          tenantId: tenantId,
          businessService: (_applicationData5 = applicationData) !== null && _applicationData5 !== void 0 && (_applicationData5$app = _applicationData5.applicationType) !== null && _applicationData5$app !== void 0 && _applicationData5$app.includes("WATER") ? "WS.AMENDMENT" : "SW.AMENDMENT",
          moduleName: (_applicationData6 = applicationData) !== null && _applicationData6 !== void 0 && (_applicationData6$app = _applicationData6.applicationType) !== null && _applicationData6$app !== void 0 && _applicationData6$app.includes("WATER") ? "WS" : "SW",
          assignes: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? [] : [{
            uuid: selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid
          }],
          comment: (data === null || data === void 0 ? void 0 : data.comments) || "",
          documents: uploadedFile ? [{
            documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
            fileName: file === null || file === void 0 ? void 0 : file.name,
            fileStoreId: uploadedFile
          }] : []
        },
        additionalDetails,
        comment: (data === null || data === void 0 ? void 0 : data.comments) || "",
        wfDocuments: uploadedFile ? [{
          documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
          fileName: file === null || file === void 0 ? void 0 : file.name,
          fileStoreId: uploadedFile
        }] : null,
        processInstance: {
          action: action === null || action === void 0 ? void 0 : action.action,
          assignes: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? [] : [{
            uuid: selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid
          }],
          comment: (data === null || data === void 0 ? void 0 : data.comments) || "",
          documents: uploadedFile ? [{
            documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
            fileName: file === null || file === void 0 ? void 0 : file.name,
            fileStoreId: uploadedFile
          }] : []
        }
      };
      submitAction({
        AmendmentUpdate: amendment
      });
      return;
    }
    applicationData = {
      ...applicationData,
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: (data === null || data === void 0 ? void 0 : data.comments) || "",
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? [] : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      assignes: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? [] : [{
        uuid: selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid
      }],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null,
      processInstance: {
        ...((_applicationData7 = applicationData) === null || _applicationData7 === void 0 ? void 0 : _applicationData7.processInstance),
        action: action === null || action === void 0 ? void 0 : action.action,
        assignes: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? [] : [{
          uuid: selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid
        }],
        comment: (data === null || data === void 0 ? void 0 : data.comments) || "",
        documents: uploadedFile ? [{
          documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
          fileName: file === null || file === void 0 ? void 0 : file.name,
          fileStoreId: uploadedFile
        }] : []
      }
    };
    if (data !== null && data !== void 0 && data.date && (_applicationData8 = applicationData) !== null && _applicationData8 !== void 0 && (_applicationData8$app = _applicationData8.applicationType) !== null && _applicationData8$app !== void 0 && _applicationData8$app.includes("DISCONNECT")) {
      const disconnectionExecutionDate = cloneDeep_1(data === null || data === void 0 ? void 0 : data.date);
      applicationData.disconnectionExecutionDate = convertDateToEpochNew(disconnectionExecutionDate);
    } else if (data !== null && data !== void 0 && data.date) {
      const connectionExecutionDate = cloneDeep_1(data === null || data === void 0 ? void 0 : data.date);
      applicationData.connectionExecutionDate = convertDateToEpochNew(connectionExecutionDate);
    }
    if (((_applicationData9 = applicationData) === null || _applicationData9 === void 0 ? void 0 : (_applicationData9$pro = _applicationData9.processInstance) === null || _applicationData9$pro === void 0 ? void 0 : _applicationData9$pro.businessService) == "DisconnectWSConnection" || ((_applicationData10 = applicationData) === null || _applicationData10 === void 0 ? void 0 : (_applicationData10$pr = _applicationData10.processInstance) === null || _applicationData10$pr === void 0 ? void 0 : _applicationData10$pr.businessService) == "DisconnectSWConnection" || window.location.href.includes("disconnection")) {
      var _applicationData11;
      ((_applicationData11 = applicationData) === null || _applicationData11 === void 0 ? void 0 : _applicationData11.serviceType) == "WATER" ? submitAction({
        WaterConnection: applicationData,
        disconnectRequest: true
      }) : submitAction({
        SewerageConnection: applicationData,
        disconnectRequest: true
      });
    } else {
      var _parsedAdhocRebateDat, _parsedAdhocRebateDat2, _parsedAdhocRebateDat3, _parsedAdhocRebateDat4, _parsedAdhocRebateDat5, _parsedAdhocRebateDat6, _parsedAdhocRebateDat7, _parsedAdhocRebateDat8, _parsedAdhocRebateDat9, _parsedAdhocRebateDat10, _parsedAdhocRebateDat11, _parsedAdhocRebateDat12, _applicationData12;
      const adhocRebateData = sessionStorage.getItem("Digit.ADHOC_ADD_REBATE_DATA");
      const parsedAdhocRebateData = adhocRebateData ? JSON.parse(adhocRebateData) : "";
      if (parsedAdhocRebateData !== null && parsedAdhocRebateData !== void 0 && (_parsedAdhocRebateDat = parsedAdhocRebateData.value) !== null && _parsedAdhocRebateDat !== void 0 && _parsedAdhocRebateDat.adhocPenalty) applicationData.additionalDetails.adhocPenalty = parseInt(parsedAdhocRebateData === null || parsedAdhocRebateData === void 0 ? void 0 : (_parsedAdhocRebateDat2 = parsedAdhocRebateData.value) === null || _parsedAdhocRebateDat2 === void 0 ? void 0 : _parsedAdhocRebateDat2.adhocPenalty) || "";
      if (parsedAdhocRebateData !== null && parsedAdhocRebateData !== void 0 && (_parsedAdhocRebateDat3 = parsedAdhocRebateData.value) !== null && _parsedAdhocRebateDat3 !== void 0 && _parsedAdhocRebateDat3.adhocPenaltyComment) applicationData.additionalDetails.adhocPenaltyComment = (parsedAdhocRebateData === null || parsedAdhocRebateData === void 0 ? void 0 : (_parsedAdhocRebateDat4 = parsedAdhocRebateData.value) === null || _parsedAdhocRebateDat4 === void 0 ? void 0 : _parsedAdhocRebateDat4.adhocPenaltyComment) || "";
      if (parsedAdhocRebateData !== null && parsedAdhocRebateData !== void 0 && (_parsedAdhocRebateDat5 = parsedAdhocRebateData.value) !== null && _parsedAdhocRebateDat5 !== void 0 && _parsedAdhocRebateDat5.adhocPenaltyReason) applicationData.additionalDetails.adhocPenaltyReason = (parsedAdhocRebateData === null || parsedAdhocRebateData === void 0 ? void 0 : (_parsedAdhocRebateDat6 = parsedAdhocRebateData.value) === null || _parsedAdhocRebateDat6 === void 0 ? void 0 : _parsedAdhocRebateDat6.adhocPenaltyReason) || "";
      if (parsedAdhocRebateData !== null && parsedAdhocRebateData !== void 0 && (_parsedAdhocRebateDat7 = parsedAdhocRebateData.value) !== null && _parsedAdhocRebateDat7 !== void 0 && _parsedAdhocRebateDat7.adhocRebate) applicationData.additionalDetails.adhocRebate = parseInt(parsedAdhocRebateData === null || parsedAdhocRebateData === void 0 ? void 0 : (_parsedAdhocRebateDat8 = parsedAdhocRebateData.value) === null || _parsedAdhocRebateDat8 === void 0 ? void 0 : _parsedAdhocRebateDat8.adhocRebate) || "";
      if (parsedAdhocRebateData !== null && parsedAdhocRebateData !== void 0 && (_parsedAdhocRebateDat9 = parsedAdhocRebateData.value) !== null && _parsedAdhocRebateDat9 !== void 0 && _parsedAdhocRebateDat9.adhocRebateComment) applicationData.additionalDetails.adhocRebateComment = (parsedAdhocRebateData === null || parsedAdhocRebateData === void 0 ? void 0 : (_parsedAdhocRebateDat10 = parsedAdhocRebateData.value) === null || _parsedAdhocRebateDat10 === void 0 ? void 0 : _parsedAdhocRebateDat10.adhocRebateComment) || "";
      if (parsedAdhocRebateData !== null && parsedAdhocRebateData !== void 0 && (_parsedAdhocRebateDat11 = parsedAdhocRebateData.value) !== null && _parsedAdhocRebateDat11 !== void 0 && _parsedAdhocRebateDat11.adhocRebateReason) applicationData.additionalDetails.adhocRebateReason = (parsedAdhocRebateData === null || parsedAdhocRebateData === void 0 ? void 0 : (_parsedAdhocRebateDat12 = parsedAdhocRebateData.value) === null || _parsedAdhocRebateDat12 === void 0 ? void 0 : _parsedAdhocRebateDat12.adhocRebateReason) || "";
      ((_applicationData12 = applicationData) === null || _applicationData12 === void 0 ? void 0 : _applicationData12.serviceType) == "WATER" ? submitAction({
        WaterConnection: applicationData
      }) : submitAction({
        SewerageConnection: applicationData
      });
    }
  }
  useEffect(() => {
    var _applicationData13, _applicationData13$pr, _applicationData14, _applicationData14$pr;
    if (((_applicationData13 = applicationData) === null || _applicationData13 === void 0 ? void 0 : (_applicationData13$pr = _applicationData13.processInstance) === null || _applicationData13$pr === void 0 ? void 0 : _applicationData13$pr.businessService) == "DisconnectWSConnection" || ((_applicationData14 = applicationData) === null || _applicationData14 === void 0 ? void 0 : (_applicationData14$pr = _applicationData14.processInstance) === null || _applicationData14$pr === void 0 ? void 0 : _applicationData14$pr.businessService) == "DisconnectSWConnection") {
      if (action) {
        setConfig(configWSDisConnectApplication({
          t,
          action,
          approvers,
          selectedApprover,
          setSelectedApprover,
          selectFile,
          uploadedFile,
          setUploadedFile,
          businessService,
          error
        }));
      }
    } else {
      if (action) {
        setConfig(configWSApproverApplication({
          t,
          action,
          approvers,
          selectedApprover,
          setSelectedApprover,
          selectFile,
          uploadedFile,
          setUploadedFile,
          businessService,
          error
        }));
      }
    }
  }, [action, approvers, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading$5, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$5, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: () => {},
    formId: "modal-action",
    style: isMobile && isEmployee ? {
      width: "100%",
      height: "auto"
    } : {}
  }, PTALoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(FormComposer, {
    config: config.form,
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React.createElement(Loader, null);
};

const ActionModal$6 = props => {
  if (props !== null && props !== void 0 && props.businessService.includes("PT")) {
    return /*#__PURE__*/React.createElement(ActionModal, props);
  }
  if (props !== null && props !== void 0 && props.businessService.includes("NewTL") || props !== null && props !== void 0 && props.businessService.includes("TL") || props !== null && props !== void 0 && props.businessService.includes("EDITRENEWAL") || props !== null && props !== void 0 && props.businessService.includes("DIRECTRENEWAL")) {
    return /*#__PURE__*/React.createElement(ActionModal$1, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("BPAREG")) {
    return /*#__PURE__*/React.createElement(ActionModal$2, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("BPA")) {
    return /*#__PURE__*/React.createElement(ActionModal$3, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("NOC")) {
    return /*#__PURE__*/React.createElement(ActionModal$4, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("WS")) {
    return /*#__PURE__*/React.createElement(ActionModal$5, props);
  }
};

function DocumentsPreview({
  documents,
  svgStyles = {},
  isSendBackFlow = false,
  isHrLine = false,
  titleStyles
}) {
  const {
    t
  } = useTranslation();
  const isStakeholderApplication = window.location.href.includes("stakeholder");
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "19px"
    }
  }, !isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map((document, index) => {
    var _document$values;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React.createElement(CardSubHeader, {
      style: titleStyles ? titleStyles : {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: "flex-start"
      }
    }, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values = document.values) === null || _document$values === void 0 ? void 0 : _document$values.map((value, index) => {
      var _value$documentType;
      return /*#__PURE__*/React.createElement("a", {
        target: "_",
        href: value === null || value === void 0 ? void 0 : value.url,
        style: {
          minWidth: "80px",
          marginRight: "10px",
          maxWidth: "100px",
          height: "auto",
          minWidth: "100px"
        },
        key: index
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        }
      }, /*#__PURE__*/React.createElement(PDFSvg$1, null)), /*#__PURE__*/React.createElement("p", {
        style: {
          marginTop: "8px",
          fontWeight: "bold",
          textAlign: "center",
          color: "#505A5F"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), isSendBackFlow ? value !== null && value !== void 0 && (_value$documentType = value.documentType) !== null && _value$documentType !== void 0 && _value$documentType.includes("NOC") ? /*#__PURE__*/React.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType.split(".")[1])) : /*#__PURE__*/React.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType)) : "");
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))), isHrLine && (documents === null || documents === void 0 ? void 0 : documents.length) != index + 1 ? /*#__PURE__*/React.createElement("hr", {
      style: {
        color: "#D6D5D4",
        backgroundColor: "#D6D5D4",
        height: "2px",
        marginTop: "20px",
        marginBottom: "20px"
      }
    }) : null);
  })), isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map((document, index) => {
    var _document$values2;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React.createElement("div", null, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values2 = document.values) === null || _document$values2 === void 0 ? void 0 : _document$values2.map((value, index) => /*#__PURE__*/React.createElement("a", {
      target: "_",
      href: value === null || value === void 0 ? void 0 : value.url,
      style: {
        minWidth: svgStyles !== null && svgStyles !== void 0 && svgStyles.minWidth ? svgStyles === null || svgStyles === void 0 ? void 0 : svgStyles.minWidth : "160px",
        marginRight: "20px"
      },
      key: index
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        maxWidth: "940px",
        padding: "8px",
        borderRadius: "4px",
        border: "1px solid #D6D5D4",
        background: "#FAFAFA"
      }
    }, /*#__PURE__*/React.createElement("p", {
      style: {
        marginTop: "8px",
        fontWeight: "bold",
        marginBottom: "10px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title)), value !== null && value !== void 0 && value.docInfo ? /*#__PURE__*/React.createElement("div", {
      style: {
        fontSize: "12px",
        color: "#505A5F",
        fontWeight: 400,
        lineHeight: "15px",
        marginBottom: "10px"
      }
    }, `${t(value === null || value === void 0 ? void 0 : value.docInfo)}`) : null, /*#__PURE__*/React.createElement(PDFSvg$1, null), /*#__PURE__*/React.createElement("p", {
      style: {
        marginTop: "8px",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#505A5F",
        fontWeight: "400",
        textAlign: "center",
        color: "#505A5F"
      }
    }, `${t(value === null || value === void 0 ? void 0 : value.title)}`)))) : !window.location.href.includes("citizen") && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))));
  })));
}

const BPADocuments = ({
  t,
  formData,
  applicationData,
  docs,
  bpaActionsDetails
}) => {
  var _bpaActionsDetails$da, _formData$documents;
  const applicationStatus = (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) || "";
  const actions = (bpaActionsDetails === null || bpaActionsDetails === void 0 ? void 0 : (_bpaActionsDetails$da = bpaActionsDetails.data) === null || _bpaActionsDetails$da === void 0 ? void 0 : _bpaActionsDetails$da.nextActions) || [];
  const stateId = Digit.ULBService.getStateId();
  const [documents, setDocuments] = useState((formData === null || formData === void 0 ? void 0 : (_formData$documents = formData.documents) === null || _formData$documents === void 0 ? void 0 : _formData$documents.documents) || []);
  const [error, setError] = useState(null);
  const [bpaTaxDocuments, setBpaTaxDocuments] = useState([]);
  const [enableSubmit, setEnableSubmit] = useState(true);
  const [checkRequiredFields, setCheckRequiredFields] = useState(false);
  const [checkEnablingDocs, setCheckEnablingDocs] = useState(false);
  const {
    isLoading: bpaDocsLoading,
    data: bpaDocs
  } = Digit.Hooks.obps.useMDMS(stateId, "BPA", ["DocTypeMapping"]);
  const {
    isLoading: commonDocsLoading,
    data: commonDocs
  } = Digit.Hooks.obps.useMDMS(stateId, "common-masters", ["DocumentType"]);
  useEffect(() => {
    var _bpaDocs$BPA, _filtredBpaDocs, _filtredBpaDocs$, _filtredBpaDocs$$docT;
    let filtredBpaDocs = [];
    if (bpaDocs !== null && bpaDocs !== void 0 && (_bpaDocs$BPA = bpaDocs.BPA) !== null && _bpaDocs$BPA !== void 0 && _bpaDocs$BPA.DocTypeMapping) {
      var _bpaDocs$BPA2, _bpaDocs$BPA2$DocType;
      filtredBpaDocs = bpaDocs === null || bpaDocs === void 0 ? void 0 : (_bpaDocs$BPA2 = bpaDocs.BPA) === null || _bpaDocs$BPA2 === void 0 ? void 0 : (_bpaDocs$BPA2$DocType = _bpaDocs$BPA2.DocTypeMapping) === null || _bpaDocs$BPA2$DocType === void 0 ? void 0 : _bpaDocs$BPA2$DocType.filter(data => {
        var _applicationData$addi, _applicationData$addi2;
        return data.WFState == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) ? applicationData === null || applicationData === void 0 ? void 0 : applicationData.status :  data.RiskType == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.riskType) && data.ServiceType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi = applicationData.additionalDetails) === null || _applicationData$addi === void 0 ? void 0 : _applicationData$addi.serviceType) && data.applicationType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi2 = applicationData.additionalDetails) === null || _applicationData$addi2 === void 0 ? void 0 : _applicationData$addi2.applicationType);
      });
    }
    let documentsList = [];
    (_filtredBpaDocs = filtredBpaDocs) === null || _filtredBpaDocs === void 0 ? void 0 : (_filtredBpaDocs$ = _filtredBpaDocs[0]) === null || _filtredBpaDocs$ === void 0 ? void 0 : (_filtredBpaDocs$$docT = _filtredBpaDocs$.docTypes) === null || _filtredBpaDocs$$docT === void 0 ? void 0 : _filtredBpaDocs$$docT.forEach(doc => {
      var _commonDocs$commonMa, _commonDocs$commonMa$, _docs$, _docs$$values;
      let code = doc.code;
      doc.dropdownData = [];
      doc.uploadedDocuments = [];
      commonDocs === null || commonDocs === void 0 ? void 0 : (_commonDocs$commonMa = commonDocs["common-masters"]) === null || _commonDocs$commonMa === void 0 ? void 0 : (_commonDocs$commonMa$ = _commonDocs$commonMa.DocumentType) === null || _commonDocs$commonMa$ === void 0 ? void 0 : _commonDocs$commonMa$.forEach(value => {
        let values = value.code.slice(0, code.length);
        if (code === values) {
          doc.hasDropdown = true;
          value.i18nKey = value.code;
          doc.dropdownData.push(value);
        }
      });
      doc.uploadedDocuments[0] = {};
      doc.uploadedDocuments[0].values = [];
      docs === null || docs === void 0 ? void 0 : (_docs$ = docs[0]) === null || _docs$ === void 0 ? void 0 : (_docs$$values = _docs$.values) === null || _docs$$values === void 0 ? void 0 : _docs$$values.map(upDocs => {
        var _upDocs$documentType, _upDocs$documentType2;
        if (code === `${upDocs === null || upDocs === void 0 ? void 0 : (_upDocs$documentType = upDocs.documentType) === null || _upDocs$documentType === void 0 ? void 0 : _upDocs$documentType.split('.')[0]}.${upDocs === null || upDocs === void 0 ? void 0 : (_upDocs$documentType2 = upDocs.documentType) === null || _upDocs$documentType2 === void 0 ? void 0 : _upDocs$documentType2.split('.')[1]}`) {
          doc.uploadedDocuments[0].values.push(upDocs);
        }
      });
      documentsList.push(doc);
    });
    sessionStorage.setItem("BPA_DOCUMENTS", JSON.stringify(documentsList));
    setBpaTaxDocuments(documentsList);
  }, [!bpaDocsLoading, !commonDocsLoading]);
  useEffect(() => {
    let count = 0;
    bpaTaxDocuments.map(doc => {
      let isRequired = false;
      documents.map(data => {
        if (doc.required && doc.code == `${data.documentType.split('.')[0]}.${data.documentType.split('.')[1]}`) {
          isRequired = true;
        }
      });
      if (!isRequired && doc.required) {
        count = count + 1;
      }
    });
    if ((count == "0" || count == 0) && documents.length > 0) setEnableSubmit(false);else setEnableSubmit(true);
  }, [documents, checkRequiredFields]);
  useEffect(() => {
    if (applicationStatus === "DOC_VERIFICATION_INPROGRESS" && (actions === null || actions === void 0 ? void 0 : actions.length) > 0) setCheckEnablingDocs(true);else setCheckEnablingDocs(false);
  }, [applicationData, bpaActionsDetails]);
  return /*#__PURE__*/React.createElement("div", null, bpaTaxDocuments === null || bpaTaxDocuments === void 0 ? void 0 : bpaTaxDocuments.map((document, index) => {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SelectDocument$1, {
      key: index,
      index: index,
      document: document,
      t: t,
      error: error,
      setError: setError,
      setDocuments: setDocuments,
      documents: documents,
      setCheckRequiredFields: setCheckRequiredFields,
      applicationStatus: applicationStatus,
      actions: actions,
      bpaTaxDocuments: bpaTaxDocuments,
      checkEnablingDocs: checkEnablingDocs
    }));
  }));
};
function SelectDocument$1({
  t,
  document: doc,
  setDocuments,
  error,
  setError,
  documents,
  setCheckRequiredFields,
  index,
  applicationStatus,
  actions,
  bpaTaxDocuments,
  checkEnablingDocs
}) {
  var _doc$dropdownData, _doc$uploadedDocument;
  const filteredDocument = documents === null || documents === void 0 ? void 0 : documents.filter(item => {
    var _item$documentType;
    return item === null || item === void 0 ? void 0 : (_item$documentType = item.documentType) === null || _item$documentType === void 0 ? void 0 : _item$documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code);
  })[0];
  const tenantId = Digit.ULBService.getStateId();
  const [selectedDocument, setSelectedDocument] = useState(filteredDocument ? {
    ...filteredDocument,
    active: true,
    code: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType,
    i18nKey: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType
  } : (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData = doc.dropdownData) === null || _doc$dropdownData === void 0 ? void 0 : _doc$dropdownData.length) === 1 ? doc === null || doc === void 0 ? void 0 : doc.dropdownData[0] : {});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(() => (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.fileStoreId) || null);
  const [selectArrayFiles, SetSelectArrayFiles] = useState([]);
  const handleSelectDocument = value => setSelectedDocument(value);
  const allowedFileTypes = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
  function selectfiles(e) {
    e && setFile(e.file);
  }
  useEffect(() => {
    if (selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
      setDocuments(prev => {
        var _documents$find;
        const filteredDocumentsByDocumentType = prev === null || prev === void 0 ? void 0 : prev.filter(item => (item === null || item === void 0 ? void 0 : item.documentType) !== (selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code));
        if ((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.length) === 0 || uploadedFile === null) return filteredDocumentsByDocumentType;
        const filteredDocumentsByFileStoreId = filteredDocumentsByDocumentType === null || filteredDocumentsByDocumentType === void 0 ? void 0 : filteredDocumentsByDocumentType.filter(item => (item === null || item === void 0 ? void 0 : item.fileStoreId) !== uploadedFile);
        return [...filteredDocumentsByFileStoreId, {
          documentType: selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code,
          fileStoreId: uploadedFile,
          documentUid: uploadedFile,
          fileName: (file === null || file === void 0 ? void 0 : file.name) || "",
          id: documents ? (_documents$find = documents.find(x => x.documentType === (selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code))) === null || _documents$find === void 0 ? void 0 : _documents$find.id : undefined
        }];
      });
    }
  }, [uploadedFile, selectedDocument]);
  useEffect(() => {
    (async () => {
      if (selectArrayFiles.length > 0) {
        sessionStorage.removeItem("BPA_DOCUMENTS");
        doc.newUploadedDocs = [];
        selectArrayFiles.map(newDoc => {
          if (selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
            var _newDoc$fileStoreId, _newDoc$fileStoreId2, _newDoc$fileStoreId3;
            doc.newUploadedDocs.push({
              documentType: selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code,
              fileStoreId: newDoc === null || newDoc === void 0 ? void 0 : (_newDoc$fileStoreId = newDoc.fileStoreId) === null || _newDoc$fileStoreId === void 0 ? void 0 : _newDoc$fileStoreId.fileStoreId,
              documentUid: newDoc === null || newDoc === void 0 ? void 0 : (_newDoc$fileStoreId2 = newDoc.fileStoreId) === null || _newDoc$fileStoreId2 === void 0 ? void 0 : _newDoc$fileStoreId2.fileStoreId,
              tenantId: newDoc === null || newDoc === void 0 ? void 0 : (_newDoc$fileStoreId3 = newDoc.fileStoreId) === null || _newDoc$fileStoreId3 === void 0 ? void 0 : _newDoc$fileStoreId3.tenantId
            });
          }
        });
        bpaTaxDocuments[index] = doc;
        sessionStorage.setItem("BPA_DOCUMENTS", JSON.stringify(bpaTaxDocuments));
      }
    })();
  }, [selectArrayFiles, selectedDocument]);
  useEffect(() => {
  }, [file]);
  const getData = (index, state) => {
    let data = Object.fromEntries(state);
    let newArr = Object.values(data);
    if (Object.keys(data).length !== 0) SetSelectArrayFiles(newArr);
    selectfiles(newArr[newArr.length - 1]);
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: "24px",
      maxWidth: "950px",
      minWidth: "280px",
      background: "#FAFAFA",
      borderRadius: "4px",
      border: "1px solid #D6D5D4",
      padding: "8px"
    }
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      marginBottom: "8px",
      paddingBottom: "9px",
      color: "#0B0C0C",
      fontSize: "16px",
      lineHeight: "19px"
    }
  }, `${t(doc === null || doc === void 0 ? void 0 : doc.code)}`), (doc === null || doc === void 0 ? void 0 : (_doc$uploadedDocument = doc.uploadedDocuments) === null || _doc$uploadedDocument === void 0 ? void 0 : _doc$uploadedDocument.length) && /*#__PURE__*/React.createElement(DocumentsPreview, {
    documents: doc === null || doc === void 0 ? void 0 : doc.uploadedDocuments,
    svgStyles: {
      width: "100px",
      height: "100px",
      viewBox: "0 0 25 25",
      minWidth: "100px"
    }
  }), checkEnablingDocs ? /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "20px"
    }
  }, /*#__PURE__*/React.createElement(LabelFieldPair, {
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, {
    style: {
      marginTop: "-10px",
      width: "100%"
    }
  }, doc !== null && doc !== void 0 && doc.required ? `${t(doc === null || doc === void 0 ? void 0 : doc.code)}* ` : `${t(doc === null || doc === void 0 ? void 0 : doc.code)}`), /*#__PURE__*/React.createElement(Dropdown, {
    className: "form-field",
    t: t,
    isMandatory: false,
    option: doc === null || doc === void 0 ? void 0 : doc.dropdownData,
    selected: selectedDocument,
    optionKey: "i18nKey",
    select: handleSelectDocument,
    style: {
      width: "100%"
    }
  })), /*#__PURE__*/React.createElement(LabelFieldPair, {
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, {
    className: "card-label-smaller",
    style: {
      width: "100%"
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: "field",
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React.createElement(MultiUploadWrapper, {
    module: "BPA",
    tenantId: tenantId,
    getFormState: e => getData(index, e),
    t: t,
    allowedFileTypesRegex: allowedFileTypes,
    allowedMaxSizeInMB: 5,
    acceptFiles: "image/*, .pdf, .png, .jpeg, .jpg"
  })))) : null);
}

const getDocuments = fiDocuments => {
  const returnDocuments = [{
    title: "BPA_DOCUMENT_DETAILS_LABEL",
    values: fiDocuments === null || fiDocuments === void 0 ? void 0 : fiDocuments.map(doc => {
      var _doc$documentType;
      return {
        title: doc === null || doc === void 0 ? void 0 : (_doc$documentType = doc.documentType) === null || _doc$documentType === void 0 ? void 0 : _doc$documentType.replaceAll('.', '_'),
        documentType: doc === null || doc === void 0 ? void 0 : doc.documentType,
        documentUid: doc === null || doc === void 0 ? void 0 : doc.documentUid,
        fileStoreId: doc === null || doc === void 0 ? void 0 : doc.fileStoreId,
        id: doc === null || doc === void 0 ? void 0 : doc.id,
        url: doc === null || doc === void 0 ? void 0 : doc.url
      };
    })
  }];
  return returnDocuments;
};
function InspectionReport({
  fiReport,
  isCitizen = false
}) {
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "10px"
    }
  }, isCitizen ? /*#__PURE__*/React.createElement(CardHeader, {
    style: {
      fontSize: "24px"
    }
  }, `${t(`BPA_FI_REPORT`)}`) : /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      fontSize: "24px"
    }
  }, `${t(`BPA_FI_REPORT`)}`), fiReport.map((fiData, index) => {
    var _fiData$date, _fiData$date2, _fiData$date3, _fiData$questions, _fiData$questions2;
    return /*#__PURE__*/React.createElement("div", {
      style: {
        background: "#FAFAFA",
        border: "1px solid #D6D5D4",
        padding: "8px",
        borderRadius: "4px",
        maxWidth: "950px",
        minWidth: "280px",
        marginBottom: "24px"
      }
    }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(CardSectionHeader, {
      style: {
        fontSize: "20px"
      }
    }, (fiReport === null || fiReport === void 0 ? void 0 : fiReport.length) == 1 ? `${t(`BPA_FI_REPORT`)}` : `${t(`BPA_FI_REPORT`)} - ${index + 1}`), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: `${t(`BPA_FI_DATE_LABEL`)}`,
      text: fiData !== null && fiData !== void 0 && fiData.date ? fiData.date.includes("-") ? `${(_fiData$date = fiData.date) === null || _fiData$date === void 0 ? void 0 : _fiData$date.split("-")[2]}/${(_fiData$date2 = fiData.date) === null || _fiData$date2 === void 0 ? void 0 : _fiData$date2.split("-")[1]}/${(_fiData$date3 = fiData.date) === null || _fiData$date3 === void 0 ? void 0 : _fiData$date3.split("-")[0]}` : fiData === null || fiData === void 0 ? void 0 : fiData.date : "NA"
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: `${t(`BPA_FI_TIME_LABEL`)}`,
      text: fiData !== null && fiData !== void 0 && fiData.time ? fiData === null || fiData === void 0 ? void 0 : fiData.time : "NA"
    }), (fiData === null || fiData === void 0 ? void 0 : (_fiData$questions = fiData.questions) === null || _fiData$questions === void 0 ? void 0 : _fiData$questions.length) && (fiData === null || fiData === void 0 ? void 0 : (_fiData$questions2 = fiData.questions) === null || _fiData$questions2 === void 0 ? void 0 : _fiData$questions2.map(qstn => /*#__PURE__*/React.createElement("div", {
      style: {
        background: "white",
        border: "1px solid #D6D5D4",
        padding: "8px",
        borderRadius: "4px",
        marginTop: "10px"
      }
    }, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: `${t(`${qstn.question}`)}`,
      text: qstn !== null && qstn !== void 0 && qstn.value ? qstn === null || qstn === void 0 ? void 0 : qstn.value : "NA"
    }), /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: `${t(`BPA_ENTER_REMARKS`)}`,
      text: qstn.remarks ? qstn.remarks : "NA"
    })))), /*#__PURE__*/React.createElement(DocumentsPreview, {
      documents: getDocuments(fiData === null || fiData === void 0 ? void 0 : fiData.docs),
      svgStyles: {
        width: "100px",
        height: "100px",
        viewBox: "0 0 25 25",
        minWidth: "100px"
      }
    })));
  })));
}

function SelectDocument$2({
  t,
  document: doc,
  setNocDocuments,
  setError,
  nocDocuments
}) {
  const filteredDocument = nocDocuments === null || nocDocuments === void 0 ? void 0 : nocDocuments.filter(item => {
    var _item$documentType;
    return item === null || item === void 0 ? void 0 : (_item$documentType = item.documentType) === null || _item$documentType === void 0 ? void 0 : _item$documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code);
  })[0];
  const tenantId = Digit.ULBService.getStateId();
  const [selectedDocument, setSelectedDocument] = useState();
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(() => (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.fileStoreId) || null);
  const allowedFileTypes = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
  function selectfile(e) {
    e && setFile(e.file);
  }
  useEffect(() => {
    var _doc$dropdownData, _doc$dropdownData$;
    if (doc !== null && doc !== void 0 && (_doc$dropdownData = doc.dropdownData) !== null && _doc$dropdownData !== void 0 && (_doc$dropdownData$ = _doc$dropdownData[0]) !== null && _doc$dropdownData$ !== void 0 && _doc$dropdownData$.code) {
      setNocDocuments(prev => {
        var _doc$dropdownData3;
        const filteredDocumentsByDocumentType = prev === null || prev === void 0 ? void 0 : prev.filter(item => {
          var _doc$dropdownData2, _doc$dropdownData2$;
          return (item === null || item === void 0 ? void 0 : item.documentType) !== (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData2 = doc.dropdownData) === null || _doc$dropdownData2 === void 0 ? void 0 : (_doc$dropdownData2$ = _doc$dropdownData2[0]) === null || _doc$dropdownData2$ === void 0 ? void 0 : _doc$dropdownData2$.code);
        });
        if ((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.length) === 0 || uploadedFile === null) {
          return filteredDocumentsByDocumentType;
        }
        const filteredDocumentsByFileStoreId = filteredDocumentsByDocumentType === null || filteredDocumentsByDocumentType === void 0 ? void 0 : filteredDocumentsByDocumentType.filter(item => (item === null || item === void 0 ? void 0 : item.fileStoreId) !== uploadedFile);
        return [...filteredDocumentsByFileStoreId, {
          documentType: doc === null || doc === void 0 ? void 0 : (_doc$dropdownData3 = doc.dropdownData) === null || _doc$dropdownData3 === void 0 ? void 0 : _doc$dropdownData3[0].code,
          fileStoreId: uploadedFile,
          documentUid: uploadedFile,
          fileName: (file === null || file === void 0 ? void 0 : file.name) || ""
        }];
      });
    }
  }, [uploadedFile]);
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        const allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
          setError(t(`NOT_SUPPORTED_FILE_TYPE`));
        } else {
          try {
            var _response$data, _response$data$files;
            setUploadedFile(null);
            const response = await Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  const getData = state => {
    let data = Object.fromEntries(state);
    let newArr = Object.values(data);
    selectfile(newArr[newArr.length - 1]);
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {}
  }, /*#__PURE__*/React.createElement(LabelFieldPair, {
    style: {
      width: "98%",
      marginRight: "10px"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, {
    style: {
      width: "100%"
    }
  }, doc !== null && doc !== void 0 && doc.required ? `${t("TL_BUTTON_UPLOAD FILE")}*` : `${t("TL_BUTTON_UPLOAD FILE")}`), /*#__PURE__*/React.createElement("div", {
    className: "field",
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React.createElement(MultiUploadWrapper, {
    module: "NOC",
    tenantId: tenantId,
    getFormState: e => getData(e),
    t: t,
    allowedFileTypesRegex: allowedFileTypes,
    allowedMaxSizeInMB: 5,
    acceptFiles: "image/*, .pdf, .png, .jpeg, .jpg"
  }))));
}
const NOCDocuments = ({
  t,
  noc,
  docs,
  isNoc,
  applicationData,
  NOCdata,
  bpaActionsDetails
}) => {
  var _bpaActionsDetails$da;
  const tenantId = Digit.ULBService.getStateId();
  const stateId = Digit.ULBService.getStateId();
  const bpaApplicationStatus = (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) || "";
  const actions = (bpaActionsDetails === null || bpaActionsDetails === void 0 ? void 0 : (_bpaActionsDetails$da = bpaActionsDetails.data) === null || _bpaActionsDetails$da === void 0 ? void 0 : _bpaActionsDetails$da.nextActions) || [];
  const {
    isLoading: nocDocsLoading,
    data: nocDocs
  } = Digit.Hooks.obps.useMDMS(stateId, "NOC", ["DocumentTypeMapping"], {
    enabled: isNoc
  });
  const {
    isLoading: bpaDocsLoading,
    data: bpaDocs
  } = Digit.Hooks.obps.useMDMS(stateId, "BPA", ["DocTypeMapping"], {
    enabled: !isNoc
  });
  const {
    isLoading: commonDocsLoading,
    data: commonDocs
  } = Digit.Hooks.obps.useMDMS(stateId, "common-masters", ["DocumentType"]);
  const [commonDocMaping, setCommonDocMaping] = useState([]);
  const [nocTaxDocuments, setNocTaxDocuments] = useState([]);
  const [checkEnablingDocs, setCheckEnablingDocs] = useState(false);
  const [nocDocuments, setNocDocuments] = Digit.Hooks.useSessionStorage(noc === null || noc === void 0 ? void 0 : noc.nocType, []);
  const [error, setError] = useState(null);
  const isEmployee = window.location.href.includes("/employee/");
  useEffect(() => {
    var _commonDocs$commonMa;
    setCommonDocMaping(commonDocs === null || commonDocs === void 0 ? void 0 : (_commonDocs$commonMa = commonDocs["common-masters"]) === null || _commonDocs$commonMa === void 0 ? void 0 : _commonDocs$commonMa.DocumentType);
  }, [commonDocs]);
  useEffect(() => {
    var _filteredData, _filteredData$, _filteredData$$docTyp;
    let documents = [];
    let filteredData;
    if (isNoc) {
      var _nocDocs$NOC, _nocDocs$NOC$Document;
      filteredData = nocDocs === null || nocDocs === void 0 ? void 0 : (_nocDocs$NOC = nocDocs.NOC) === null || _nocDocs$NOC === void 0 ? void 0 : (_nocDocs$NOC$Document = _nocDocs$NOC.DocumentTypeMapping) === null || _nocDocs$NOC$Document === void 0 ? void 0 : _nocDocs$NOC$Document.filter(data => {
        return (data === null || data === void 0 ? void 0 : data.applicationType) === (noc === null || noc === void 0 ? void 0 : noc.applicationType) && (data === null || data === void 0 ? void 0 : data.nocType) === (noc === null || noc === void 0 ? void 0 : noc.nocType);
      });
    } else {
      var _bpaDocs$BPA, _bpaDocs$BPA$DocTypeM;
      filteredData = bpaDocs === null || bpaDocs === void 0 ? void 0 : (_bpaDocs$BPA = bpaDocs.BPA) === null || _bpaDocs$BPA === void 0 ? void 0 : (_bpaDocs$BPA$DocTypeM = _bpaDocs$BPA.DocTypeMapping) === null || _bpaDocs$BPA$DocTypeM === void 0 ? void 0 : _bpaDocs$BPA$DocTypeM.filter(data => {
        var _applicationData$addi, _applicationData$addi2;
        return data.WFState == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) && data.RiskType == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.riskType) && data.ServiceType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi = applicationData.additionalDetails) === null || _applicationData$addi === void 0 ? void 0 : _applicationData$addi.serviceType) && data.applicationType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi2 = applicationData.additionalDetails) === null || _applicationData$addi2 === void 0 ? void 0 : _applicationData$addi2.applicationType);
      });
    }
    if ((_filteredData = filteredData) !== null && _filteredData !== void 0 && (_filteredData$ = _filteredData[0]) !== null && _filteredData$ !== void 0 && (_filteredData$$docTyp = _filteredData$.docTypes) !== null && _filteredData$$docTyp !== void 0 && _filteredData$$docTyp[0]) {
      filteredData[0].docTypes[0].nocType = filteredData[0].nocType;
      filteredData[0].docTypes[0].additionalDetails = {
        submissionDetails: noc === null || noc === void 0 ? void 0 : noc.additionalDetails,
        applicationStatus: noc === null || noc === void 0 ? void 0 : noc.applicationStatus,
        appNumberLink: noc === null || noc === void 0 ? void 0 : noc.applicationNo,
        nocNo: noc === null || noc === void 0 ? void 0 : noc.nocNo
      };
      documents.push(filteredData[0].docTypes[0]);
    }
    let documentsList = [];
    if (documents && documents.length > 0) {
      documents.map(doc => {
        let code = doc.documentType;
        doc.dropdownData = [];
        commonDocMaping === null || commonDocMaping === void 0 ? void 0 : commonDocMaping.forEach(value => {
          let values = value.code.slice(0, code === null || code === void 0 ? void 0 : code.length);
          if (code === values) {
            doc.hasDropdown = true;
            doc.dropdownData.push(value);
          }
        });
        documentsList.push(doc);
      });
      setNocTaxDocuments(documentsList);
    }
  }, [nocDocs, commonDocMaping]);
  useEffect(() => {
    if (bpaApplicationStatus === 'NOC_VERIFICATION_INPROGRESS' && (actions === null || actions === void 0 ? void 0 : actions.length) > 0) setCheckEnablingDocs(true);else setCheckEnablingDocs(false);
  }, [applicationData, bpaActionsDetails]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      border: "1px solid #D6D5D4",
      padding: "16px 0px 16px 8px",
      background: "#FAFAFA",
      borderRadius: "5px",
      marginBottom: "24px",
      maxWidth: "950px"
    }
  }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: isEmployee ? `${t(`BPA_${noc === null || noc === void 0 ? void 0 : noc.nocType}_HEADER`)}` : t(`BPA_${noc === null || noc === void 0 ? void 0 : noc.nocType}_HEADER`),
    labelStyle: {
      fontSize: "20px",
      width: "150%"
    }
  }), NOCdata && NOCdata.map((noc, index) => {
    if (noc !== null && noc !== void 0 && noc.value) {
      if ((noc === null || noc === void 0 ? void 0 : noc.field) == "STATUS") {
        return /*#__PURE__*/React.createElement(Row, {
          className: "border-none",
          label: isEmployee ? `${t(noc === null || noc === void 0 ? void 0 : noc.title)}` : t(noc === null || noc === void 0 ? void 0 : noc.title),
          text: noc !== null && noc !== void 0 && noc.value ? t(noc === null || noc === void 0 ? void 0 : noc.value) : t("CS_NA"),
          textStyle: (noc === null || noc === void 0 ? void 0 : noc.value) == "APPROVED" || (noc === null || noc === void 0 ? void 0 : noc.value) == "AUTO_APPROVED" ? {
            color: "#00703C"
          } : {
            color: "#D4351C"
          }
        });
      } else {
        return /*#__PURE__*/React.createElement(Row, {
          className: "border-none",
          label: isEmployee ? `${t(noc === null || noc === void 0 ? void 0 : noc.title)}` : t(noc === null || noc === void 0 ? void 0 : noc.title),
          text: noc !== null && noc !== void 0 && noc.value ? t(noc === null || noc === void 0 ? void 0 : noc.value) : t("CS_NA")
        });
      }
    }
  })), /*#__PURE__*/React.createElement(DocumentsPreview, {
    documents: docs,
    svgStyles: {
      width: "80px",
      height: "100px",
      viewBox: "0 0 25 25",
      minWidth: "80px"
    }
  }), checkEnablingDocs && (nocTaxDocuments === null || nocTaxDocuments === void 0 ? void 0 : nocTaxDocuments.map((document, index) => {
    return /*#__PURE__*/React.createElement(SelectDocument$2, {
      key: index,
      document: document,
      t: t,
      error: error,
      setError: setError,
      setNocDocuments: setNocDocuments,
      nocDocuments: nocDocuments,
      checkEnablingDocs: checkEnablingDocs
    });
  })));
};

const PermissionCheck = ({
  permissions,
  t
}) => {
  const [approvalChecks, setApprovalChecks, clearApprovals] = Digit.Hooks.useSessionStorage("OBPS_APPROVAL_CHECKS", permissions === null || permissions === void 0 ? void 0 : permissions.map(permission => ({
    label: permission,
    checked: false
  })));
  const [newApprovals, setNewApprovals, clearNewApprovals] = Digit.Hooks.useSessionStorage('OBPS_NEW_APPROVALS', []);
  useEffect(() => {
    return () => {
      Digit.SessionStorage.del("OBPS_NEW_APPROVALS");
      Digit.SessionStorage.del("OBPS_APPROVAL_CHECKS");
    };
  }, []);
  const handleAdd = () => {
    setNewApprovals([...newApprovals, {
      label: ''
    }]);
  };
  const handleRemove = index => {
    const values = [...newApprovals];
    values.splice(index, 1);
    setNewApprovals([...values]);
  };
  const handleChange = (event, index) => {
    setNewApprovals(() => {
      return newApprovals === null || newApprovals === void 0 ? void 0 : newApprovals.map((approval, id) => {
        if (index === id) {
          var _event$target;
          return {
            label: event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value
          };
        }
        return approval;
      });
    });
  };
  const handleCheck = (event, label, index) => {
    const isChecked = event.target.checked;
    setApprovalChecks(() => {
      return approvalChecks === null || approvalChecks === void 0 ? void 0 : approvalChecks.map((approval, id) => {
        if (index === id) {
          return {
            ...approval,
            checked: isChecked
          };
        }
        return approval;
      });
    });
  };
  const isMobile = window.Digit.Utils.browser.isMobile();
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: {
      marginBottom: "16px",
      fontSize: "24px"
    }
  }, t("BPA_PERMIT_CONDITIONS")), approvalChecks === null || approvalChecks === void 0 ? void 0 : approvalChecks.map((permission, index) => /*#__PURE__*/React.createElement(CheckBox, {
    key: index,
    styles: {
      margin: "20px 0 40px",
      maxWidth: isMobile ? "100%" : "70%"
    },
    label: permission === null || permission === void 0 ? void 0 : permission.label,
    checked: permission === null || permission === void 0 ? void 0 : permission.checked,
    onChange: event => handleCheck(event, permission === null || permission === void 0 ? void 0 : permission.label, index),
    isLabelFirst: true,
    index: index
  })), newApprovals === null || newApprovals === void 0 ? void 0 : newApprovals.map((approval, index) => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(TextInput, {
    key: index,
    value: approval === null || approval === void 0 ? void 0 : approval.label,
    onChange: event => handleChange(event, index),
    textInputStyle: {
      maxWidth: isMobile ? "96%" : "830px",
      width: isMobile ? "96%" : "830px"
    },
    style: isMobile ? {
      paddingRight: "10%"
    } : {},
    placeholder: t("BPA_ENTER_PERMIT_CONDITIONS_LABEL")
  }), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Close$8, {
      style: {
        float: "right",
        position: "relative",
        bottom: "32px",
        marginTop: "-22px",
        marginRight: isMobile ? "5%" : "35%"
      }
    }))),
    style: {},
    onClick: e => handleRemove(index)
  }))), /*#__PURE__*/React.createElement(LinkButton, {
    style: {
      color: "#a82227",
      maxWidth: isMobile ? "fit-content" : "10%",
      marginRight: "3%"
    },
    label: t(`BPA_ADD_MORE`),
    onClick: handleAdd
  }));
};

function PropertyDocuments({
  documents,
  svgStyles = {},
  isSendBackFlow = false
}) {
  const {
    t
  } = useTranslation();
  const [filesArray, setFilesArray] = useState(() => []);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [pdfFiles, setPdfFiles] = useState({});
  useEffect(() => {
    var _acc;
    let acc = [];
    documents === null || documents === void 0 ? void 0 : documents.forEach((element, index, array) => {
      acc = [...acc, ...(element.values ? element.values : [])];
    });
    setFilesArray((_acc = acc) === null || _acc === void 0 ? void 0 : _acc.map(value => value === null || value === void 0 ? void 0 : value.fileStoreId));
  }, [documents]);
  useEffect(() => {
    var _documents$;
    if (filesArray !== null && filesArray !== void 0 && filesArray.length && (documents === null || documents === void 0 ? void 0 : (_documents$ = documents[0]) === null || _documents$ === void 0 ? void 0 : _documents$.BS) === "BillAmend") {
      Digit.UploadServices.Filefetch(filesArray, Digit.ULBService.getCurrentTenantId()).then(res => {
        setPdfFiles(res === null || res === void 0 ? void 0 : res.data);
      });
    } else if (filesArray !== null && filesArray !== void 0 && filesArray.length) {
      Digit.UploadServices.Filefetch(filesArray, Digit.ULBService.getStateId()).then(res => {
        setPdfFiles(res === null || res === void 0 ? void 0 : res.data);
      });
    }
  }, [filesArray]);
  const checkLocation = window.location.href.includes("employee/tl") || window.location.href.includes("/obps") || window.location.href.includes("employee/ws");
  const isStakeholderApplication = window.location.href.includes("stakeholder");
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "19px"
    }
  }, !isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map((document, index) => {
    var _document$values;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React.createElement(CardSubHeader, {
      style: checkLocation ? {
        marginTop: "32px",
        marginBottom: "18px",
        color: "#0B0C0C, 100%",
        fontSize: "24px",
        lineHeight: "30px"
      } : {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: "flex-start"
      }
    }, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values = document.values) === null || _document$values === void 0 ? void 0 : _document$values.map((value, index) => {
      var _pdfFiles$value$fileS, _value$documentType;
      return /*#__PURE__*/React.createElement("a", {
        target: "_",
        href: (_pdfFiles$value$fileS = pdfFiles[value.fileStoreId]) === null || _pdfFiles$value$fileS === void 0 ? void 0 : _pdfFiles$value$fileS.split(",")[0],
        style: {
          minWidth: "80px",
          marginRight: "10px",
          maxWidth: "100px",
          height: "auto"
        },
        key: index
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        }
      }, /*#__PURE__*/React.createElement(PDFSvg$1, null)), /*#__PURE__*/React.createElement("p", {
        style: checkLocation ? {
          marginTop: "8px",
          fontWeight: "bold",
          fontSize: "16px",
          lineHeight: "19px",
          color: "#505A5F",
          textAlign: "center"
        } : {
          marginTop: "8px",
          fontWeight: "bold"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), isSendBackFlow ? value !== null && value !== void 0 && (_value$documentType = value.documentType) !== null && _value$documentType !== void 0 && _value$documentType.includes("NOC") ? /*#__PURE__*/React.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType.split(".")[1])) : /*#__PURE__*/React.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType)) : "");
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))));
  })), isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map((document, index) => {
    var _document$values2;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React.createElement("div", null, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values2 = document.values) === null || _document$values2 === void 0 ? void 0 : _document$values2.map((value, index) => {
      var _pdfFiles$value$fileS2;
      return /*#__PURE__*/React.createElement("a", {
        target: "_",
        href: (_pdfFiles$value$fileS2 = pdfFiles[value.fileStoreId]) === null || _pdfFiles$value$fileS2 === void 0 ? void 0 : _pdfFiles$value$fileS2.split(",")[0],
        style: {
          minWidth: svgStyles !== null && svgStyles !== void 0 && svgStyles.minWidth ? svgStyles === null || svgStyles === void 0 ? void 0 : svgStyles.minWidth : "160px",
          marginRight: "20px"
        },
        key: index
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          maxWidth: "940px",
          padding: "8px",
          borderRadius: "4px",
          border: "1px solid #D6D5D4",
          background: "#FAFAFA"
        }
      }, /*#__PURE__*/React.createElement("p", {
        style: {
          marginTop: "8px",
          fontWeight: "bold",
          marginBottom: "10px"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), value !== null && value !== void 0 && value.docInfo ? /*#__PURE__*/React.createElement("div", {
        style: {
          fontSize: "12px",
          color: "#505A5F",
          fontWeight: 400,
          lineHeight: "15px",
          marginBottom: "10px"
        }
      }, `${t(value === null || value === void 0 ? void 0 : value.docInfo)}`) : null, /*#__PURE__*/React.createElement(PDFSvg$1, null), /*#__PURE__*/React.createElement("p", {
        style: {
          marginTop: "8px",
          fontSize: "16px",
          lineHeight: "19px",
          color: "#505A5F",
          fontWeight: "400"
        }
      }, `${t(value === null || value === void 0 ? void 0 : value.title)}`)));
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))));
  })));
}

function PropertyEstimates({
  taxHeadEstimatesCalculation
}) {
  const {
    taxHeadEstimates
  } = taxHeadEstimatesCalculation;
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "40px"
    }
  }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("ES_PT_TITLE_TAX_HEADS"),
    text: t("ES_PT_TITLE_AMOUNT"),
    className: "border-none",
    textStyle: {
      fontWeight: "bold"
    }
  }), /*#__PURE__*/React.createElement(BreakLine, {
    style: {
      margin: "16px 0",
      width: "40%"
    }
  }), taxHeadEstimates === null || taxHeadEstimates === void 0 ? void 0 : taxHeadEstimates.map((estimate, index) => {
    return /*#__PURE__*/React.createElement(Row, {
      key: t(estimate.taxHeadCode),
      label: t(estimate.taxHeadCode),
      text: `₹ ${estimate.estimateAmount}` || "N/A",
      last: index === (taxHeadEstimates === null || taxHeadEstimates === void 0 ? void 0 : taxHeadEstimates.length) - 1,
      className: "border-none",
      textStyle: {
        color: "#505A5F"
      },
      labelStyle: {
        color: "#505A5F"
      }
    });
  }), /*#__PURE__*/React.createElement(BreakLine, {
    style: {
      margin: "16px 0",
      width: "40%"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("ES_PT_TITLE_TOTAL_DUE_AMOUNT"),
    text: `₹ ${taxHeadEstimatesCalculation === null || taxHeadEstimatesCalculation === void 0 ? void 0 : taxHeadEstimatesCalculation.totalAmount}` || "N/A",
    className: "border-none",
    textStyle: {
      fontSize: "24px",
      fontWeight: "bold"
    }
  })));
}

function PropertyFloors({
  floors
}) {
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(React.Fragment, null, floors.map(floor => {
    var _floor$values;
    return /*#__PURE__*/React.createElement("div", {
      key: t(floor === null || floor === void 0 ? void 0 : floor.title),
      style: {
        marginTop: "19px"
      }
    }, /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(floor === null || floor === void 0 ? void 0 : floor.title)), floor === null || floor === void 0 ? void 0 : (_floor$values = floor.values) === null || _floor$values === void 0 ? void 0 : _floor$values.map((value, index) => {
      var _value$values;
      return /*#__PURE__*/React.createElement(React.Fragment, {
        key: index
      }, /*#__PURE__*/React.createElement(CardSectionHeader, {
        style: {
          marginBottom: "16px",
          color: "#505A5F",
          fontSize: "16px",
          marginTop: index !== 0 ? "16px" : "revert"
        }
      }, t(value.title)), /*#__PURE__*/React.createElement(StatusTable, {
        style: {
          position: "relative",
          padding: "8px"
        }
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          border: "1px solid #D6D5D4",
          padding: "16px",
          marginTop: "8px",
          borderRadius: "4px",
          background: "#FAFAFA",
          maxWidth: "100%"
        }
      }, value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.map((value, index) => {
        var _value$values2;
        if (value.map === true && value.value !== "N/A") {
          return /*#__PURE__*/React.createElement(Row, {
            key: t(value.title),
            label: t(value.title),
            text: /*#__PURE__*/React.createElement("img", {
              src: t(value.value),
              alt: ""
            })
          });
        }
        return /*#__PURE__*/React.createElement(Row, {
          key: t(value.title),
          label: t(value.title),
          text: t(value.value) || "N/A",
          last: index === (value === null || value === void 0 ? void 0 : (_value$values2 = value.values) === null || _value$values2 === void 0 ? void 0 : _value$values2.length) - 1,
          caption: value.caption,
          className: "border-none"
        });
      }))));
    }));
  }));
}

function PropertyOwners({
  owners
}) {
  const {
    t
  } = useTranslation();
  const checkOwnerLength = (owners === null || owners === void 0 ? void 0 : owners.length) || 1;
  let cardStyles = {
    marginTop: "19px"
  };
  let statusTableStyles = {
    position: "relative",
    padding: "8px"
  };
  let rowContainerStyle = {
    justifyContent: "space-between",
    fontSize: "16px",
    lineHeight: "19px",
    color: "#0B0C0C"
  };
  if ( Number(checkOwnerLength) > 1) {
    cardStyles = {
      marginTop: "19px",
      background: "#FAFAFA",
      border: "1px solid #D6D5D4",
      borderRadius: "4px",
      padding: "8px",
      lineHeight: "19px",
      maxWidth: "600px",
      minWidth: "280px"
    };
  } else if ( !(Number(checkOwnerLength) > 1)) {
    cardStyles = {
      marginTop: "19px",
      lineHeight: "19px",
      maxWidth: "600px",
      minWidth: "280px"
    };
    statusTableStyles = {
      position: "relative",
      marginTop: "19px"
    };
  }
  if (window.location.href.includes("obps")) {
    cardStyles = {
      ...cardStyles,
      maxWidth: "950px"
    };
    cardStyles = {
      ...cardStyles,
      maxWidth: "950px"
    };
    rowContainerStyle = {};
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, owners.map((owner, index) => {
    var _owner$values;
    return /*#__PURE__*/React.createElement("div", {
      key: t(owner === null || owner === void 0 ? void 0 : owner.title),
      style: cardStyles
    }, /*#__PURE__*/React.createElement(CardSubHeader, {
      style:  Number(checkOwnerLength) > 1 ? {
        marginBottom: "8px",
        paddingBottom: "9px",
        color: "#0B0C0C",
        fontSize: "16px",
        lineHeight: "19px"
      } : {
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    },  Number(checkOwnerLength) > 1 ? `${t(owner === null || owner === void 0 ? void 0 : owner.title)} ${index + 1}` : t(owner === null || owner === void 0 ? void 0 : owner.title)), /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, /*#__PURE__*/React.createElement(StatusTable, {
      style: statusTableStyles
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        maxWidth: "640px",
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        width: "auto"
      }
    }), owner === null || owner === void 0 ? void 0 : (_owner$values = owner.values) === null || _owner$values === void 0 ? void 0 : _owner$values.map((value, index) => {
      var _value$values;
      if (value.map === true && value.value !== "N/A") {
        return /*#__PURE__*/React.createElement(Row, {
          key: t(value.title),
          label: t(value.title),
          text: /*#__PURE__*/React.createElement("img", {
            src: t(value.value),
            alt: "",
            privacy: value === null || value === void 0 ? void 0 : value.privacy
          })
        });
      }
      return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Row, {
        key: t(value.title),
        label:  `${t(value.title)}`,
        text: t(value.value) || "N/A",
        last: index === (value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.length) - 1,
        caption: value.caption,
        className: "border-none",
        textStyle: value.textStyle,
        privacy: value === null || value === void 0 ? void 0 : value.privacy,
        rowContainerStyle: rowContainerStyle
      }));
    }))));
  }));
}

const ScruntinyDetails = ({
  scrutinyDetails,
  paymentsList: _paymentsList = []
}) => {
  var _scrutinyDetails$valu, _scrutinyDetails$perm, _scrutinyDetails$scru;
  const {
    t
  } = useTranslation();
  const getTextValues = data => {
    if (data !== null && data !== void 0 && data.value && data !== null && data !== void 0 && data.isTransLate) return /*#__PURE__*/React.createElement("span", {
      style: {
        color: "#00703C"
      }
    }, t(data === null || data === void 0 ? void 0 : data.value));else if (data !== null && data !== void 0 && data.value && data !== null && data !== void 0 && data.isTransLate) return t(data === null || data === void 0 ? void 0 : data.value);else if (data !== null && data !== void 0 && data.value) return data === null || data === void 0 ? void 0 : data.value;else t("NA");
  };
  return /*#__PURE__*/React.createElement(Fragment$1, null, !(scrutinyDetails !== null && scrutinyDetails !== void 0 && scrutinyDetails.isChecklist) && /*#__PURE__*/React.createElement("div", {
    style: {
      background: "#FAFAFA",
      border: "1px solid #D6D5D4",
      padding: "8px",
      borderRadius: "4px",
      maxWidth: "950px"
    }
  }, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement("div", null, scrutinyDetails === null || scrutinyDetails === void 0 ? void 0 : (_scrutinyDetails$valu = scrutinyDetails.values) === null || _scrutinyDetails$valu === void 0 ? void 0 : _scrutinyDetails$valu.map((value, index) => {
    if (value !== null && value !== void 0 && value.isUnit) return /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      textStyle: (value === null || value === void 0 ? void 0 : value.value) === "Paid" ? {
        color: "darkgreen"
      } : (value === null || value === void 0 ? void 0 : value.value) === "Unpaid" ? {
        color: "red"
      } : {},
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: value !== null && value !== void 0 && value.value ? `${getTextValues(value)} ${t(value === null || value === void 0 ? void 0 : value.isUnit)}` : t("NA"),
      labelStyle: value !== null && value !== void 0 && value.isHeader ? {
        fontSize: "20px"
      } : {}
    });else if (value !== null && value !== void 0 && value.isHeader && !(value !== null && value !== void 0 && value.isUnit)) return /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        fontSize: "20px",
        paddingBottom: "10px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title));else if (value !== null && value !== void 0 && value.isSubTitle && !(value !== null && value !== void 0 && value.isUnit)) return /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        fontSize: "20px",
        paddingBottom: "10px",
        margin: "0px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title));else return /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      textStyle: (value === null || value === void 0 ? void 0 : value.value) === "Paid" ? {
        color: "darkgreen",
        wordBreak: "break-all"
      } : (value === null || value === void 0 ? void 0 : value.value) === "Unpaid" ? {
        color: "red",
        wordBreak: "break-all"
      } : {
        wordBreak: "break-all"
      },
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: getTextValues(value),
      labelStyle: value !== null && value !== void 0 && value.isHeader ? {
        fontSize: "20px"
      } : {}
    });
  }), scrutinyDetails === null || scrutinyDetails === void 0 ? void 0 : (_scrutinyDetails$perm = scrutinyDetails.permit) === null || _scrutinyDetails$perm === void 0 ? void 0 : _scrutinyDetails$perm.map((value, ind) => {
    return /*#__PURE__*/React.createElement(CardLabel, {
      style: {
        fontWeight: "400"
      }
    }, value === null || value === void 0 ? void 0 : value.title);
  })), /*#__PURE__*/React.createElement("div", null, scrutinyDetails === null || scrutinyDetails === void 0 ? void 0 : (_scrutinyDetails$scru = scrutinyDetails.scruntinyDetails) === null || _scrutinyDetails$scru === void 0 ? void 0 : _scrutinyDetails$scru.map((report, index) => {
    return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      label: `${t(report === null || report === void 0 ? void 0 : report.title)}`,
      labelStyle: {
        width: "150%"
      }
    }), /*#__PURE__*/React.createElement("a", {
      href: report === null || report === void 0 ? void 0 : report.value
    }, " ", /*#__PURE__*/React.createElement(PDFSvg$1, null), " "), /*#__PURE__*/React.createElement("p", {
      style: {
        margin: "8px 0px",
        fontWeight: "bold",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#505A5F"
      }
    }, t(report === null || report === void 0 ? void 0 : report.text)));
  })))));
};

const SubOccupancyTable = ({
  edcrDetails,
  applicationData
}) => {
  var _edcrDetails$values, _edcrDetails$subOccup, _edcrDetails$subOccup2, _edcrDetails$subOccup3, _edcrDetails$subOccup4;
  const {
    t
  } = useTranslation();
  const isMobile = window.Digit.Utils.browser.isMobile();
  const tableHeader = [{
    name: "BPA_TABLE_COL_FLOOR",
    id: "Floor"
  }, {
    name: "BPA_TABLE_COL_LEVEL",
    id: "Level"
  }, {
    name: "BPA_TABLE_COL_OCCUPANCY",
    id: "Occupancy"
  }, {
    name: "BPA_TABLE_COL_BUILDUPAREA",
    id: "BuildupArea"
  }, {
    name: "BPA_TABLE_COL_FLOORAREA",
    id: "FloorArea"
  }, {
    name: "BPA_TABLE_COL_CARPETAREA",
    id: "CarpetArea"
  }];
  const accessData = plot => {
    const name = plot;
    return (originalRow, rowIndex, columns) => {
      return originalRow[name];
    };
  };
  const tableColumns = useMemo(() => {
    return tableHeader.map(ob => ({
      Header: t(`${ob.name}`),
      accessor: accessData(ob.id),
      id: ob.id
    }));
  });
  function getFloorData(block) {
    var _block$building;
    let floors = [];
    block === null || block === void 0 ? void 0 : (_block$building = block.building) === null || _block$building === void 0 ? void 0 : _block$building.floors.map(ob => {
      var _ob$occupancies, _ob$occupancies$, _ob$occupancies2, _ob$occupancies2$, _ob$occupancies3, _ob$occupancies3$, _ob$occupancies4, _ob$occupancies4$;
      floors.push({
        Floor: t(`BPA_FLOOR_NAME_${ob.number}`),
        Level: ob.number,
        Occupancy: t(`${(_ob$occupancies = ob.occupancies) === null || _ob$occupancies === void 0 ? void 0 : (_ob$occupancies$ = _ob$occupancies[0]) === null || _ob$occupancies$ === void 0 ? void 0 : _ob$occupancies$.type}`),
        BuildupArea: (_ob$occupancies2 = ob.occupancies) === null || _ob$occupancies2 === void 0 ? void 0 : (_ob$occupancies2$ = _ob$occupancies2[0]) === null || _ob$occupancies2$ === void 0 ? void 0 : _ob$occupancies2$.builtUpArea,
        FloorArea: ((_ob$occupancies3 = ob.occupancies) === null || _ob$occupancies3 === void 0 ? void 0 : (_ob$occupancies3$ = _ob$occupancies3[0]) === null || _ob$occupancies3$ === void 0 ? void 0 : _ob$occupancies3$.floorArea) || 0,
        CarpetArea: ((_ob$occupancies4 = ob.occupancies) === null || _ob$occupancies4 === void 0 ? void 0 : (_ob$occupancies4$ = _ob$occupancies4[0]) === null || _ob$occupancies4$ === void 0 ? void 0 : _ob$occupancies4$.CarpetArea) || 0,
        key: t(`BPA_FLOOR_NAME_${ob.number}`)
      });
    });
    return floors;
  }
  const stringReplaceAll = (str = "", searcher = "", replaceWith = "") => {
    if (searcher == "") return str;
    while (str.includes(searcher)) {
      str = str.replace(searcher, replaceWith);
    }
    return str;
  };
  function getSubOccupancyValues(index) {
    var _applicationData$land;
    let values = applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$land = applicationData.landInfo) === null || _applicationData$land === void 0 ? void 0 : _applicationData$land.unit;
    let returnValue = "";
    if ((values === null || values === void 0 ? void 0 : values.length) > 0) {
      var _values$index, _values$index$usageCa;
      let splitArray = (_values$index = values[index]) === null || _values$index === void 0 ? void 0 : (_values$index$usageCa = _values$index.usageCategory) === null || _values$index$usageCa === void 0 ? void 0 : _values$index$usageCa.split(',');
      if (splitArray !== null && splitArray !== void 0 && splitArray.length) {
        const returnValueArray = splitArray.map(data => data ? `${t(`BPA_SUBOCCUPANCYTYPE_${stringReplaceAll(data === null || data === void 0 ? void 0 : data.toUpperCase(), "-", "_")}`)}` : "NA");
        returnValue = returnValueArray.join(', ');
      }
    }
    return returnValue ? returnValue : "NA";
  }
  return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement("div", {
    style: {
      background: "#FAFAFA",
      border: "1px solid #D6D5D4",
      padding: "8px",
      borderRadius: "4px",
      maxWidth: "950px",
      minWidth: "280px"
    }
  }, /*#__PURE__*/React.createElement(StatusTable, null, edcrDetails === null || edcrDetails === void 0 ? void 0 : (_edcrDetails$values = edcrDetails.values) === null || _edcrDetails$values === void 0 ? void 0 : _edcrDetails$values.map((value, index) => {
    if (value !== null && value !== void 0 && value.isHeader) return /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        fontSize: "20px",
        paddingBottom: "10px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title));else return /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      labelStyle: {
        width: "100%",
        fontSize: "20px"
      },
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : ""
    });
  })), edcrDetails === null || edcrDetails === void 0 ? void 0 : (_edcrDetails$subOccup = edcrDetails.subOccupancyTableDetails) === null || _edcrDetails$subOccup === void 0 ? void 0 : (_edcrDetails$subOccup2 = _edcrDetails$subOccup[0]) === null || _edcrDetails$subOccup2 === void 0 ? void 0 : (_edcrDetails$subOccup3 = _edcrDetails$subOccup2.value) === null || _edcrDetails$subOccup3 === void 0 ? void 0 : (_edcrDetails$subOccup4 = _edcrDetails$subOccup3.planDetail) === null || _edcrDetails$subOccup4 === void 0 ? void 0 : _edcrDetails$subOccup4.blocks.map((block, index) => {
    var _edcrDetails$subOccup5, _edcrDetails$subOccup6, _edcrDetails$subOccup7, _edcrDetails$subOccup8, _edcrDetails$subOccup9;
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      style: (edcrDetails === null || edcrDetails === void 0 ? void 0 : (_edcrDetails$subOccup5 = edcrDetails.subOccupancyTableDetails) === null || _edcrDetails$subOccup5 === void 0 ? void 0 : (_edcrDetails$subOccup6 = _edcrDetails$subOccup5[0]) === null || _edcrDetails$subOccup6 === void 0 ? void 0 : (_edcrDetails$subOccup7 = _edcrDetails$subOccup6.value) === null || _edcrDetails$subOccup7 === void 0 ? void 0 : (_edcrDetails$subOccup8 = _edcrDetails$subOccup7.planDetail) === null || _edcrDetails$subOccup8 === void 0 ? void 0 : (_edcrDetails$subOccup9 = _edcrDetails$subOccup8.blocks) === null || _edcrDetails$subOccup9 === void 0 ? void 0 : _edcrDetails$subOccup9.length) > 0 ? {
        marginBottom: "30px",
        background: "#FAFAFA",
        border: "1px solid #D6D5D4",
        padding: "8px",
        borderRadius: "4px",
        maxWidth: "950px",
        minWidth: "280px"
      } : {
        marginBottom: "30px"
      }
    }, /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        marginBottom: "8px",
        paddingBottom: "9px",
        color: "#0B0C0C",
        fontSize: "18px",
        lineHeight: "19px"
      }
    }, t("BPA_BLOCK_SUBHEADER"), " ", index + 1), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      textStyle: {
        wordBreak: "break-word"
      },
      label: `${t("BPA_SUB_OCCUPANCY_LABEL")}`,
      text: getSubOccupancyValues(index)
    })), /*#__PURE__*/React.createElement("div", {
      style: window.location.href.includes("citizen") || isMobile ? {
        overflow: "scroll"
      } : {
        maxWidth: "950px",
        maxHeight: "280px"
      }
    }, /*#__PURE__*/React.createElement(Table, {
      className: "customTable table-fixed-first-column table-border-style",
      t: t,
      disableSort: false,
      autoSort: true,
      manualPagination: false,
      isPaginationRequired: false,
      initSortId: "S N ",
      data: getFloorData(block),
      columns: tableColumns,
      getCellProps: cellInfo => {
        return {
          style: {}
        };
      }
    })));
  })));
};

const Reason$1 = ({
  headComment,
  otherComment
}) => /*#__PURE__*/React.createElement("div", {
  className: "checkpoint-comments-wrap"
}, /*#__PURE__*/React.createElement("h4", null, headComment), /*#__PURE__*/React.createElement("p", null, otherComment));

const TLCaption = ({
  data,
  OpenImage,
  privacy: _privacy = {}
}) => {
  var _data$wfComment, _data$thumbnailsToSho, _data$thumbnailsToSho2;
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement("div", null, data.date && /*#__PURE__*/React.createElement("p", null, data.date), /*#__PURE__*/React.createElement("p", null, data.name), data.mobileNumber && /*#__PURE__*/React.createElement("span", {
    style: {
      display: "inline-flex",
      width: "fit-content",
      marginLeft: "10px"
    }
  }, /*#__PURE__*/React.createElement(TelePhone, {
    mobile: data.mobileNumber,
    privacy: _privacy
  }), /*#__PURE__*/React.createElement("p", null, "\xA0\xA0\xA0\xA0")), data.source && /*#__PURE__*/React.createElement("p", null, t("ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_" + data.source.toUpperCase())), data.comment && /*#__PURE__*/React.createElement(Reason$1, {
    otherComment: data === null || data === void 0 ? void 0 : data.otherComment,
    headComment: data === null || data === void 0 ? void 0 : data.comment
  }), data !== null && data !== void 0 && data.wfComment ? /*#__PURE__*/React.createElement("div", null, data === null || data === void 0 ? void 0 : (_data$wfComment = data.wfComment) === null || _data$wfComment === void 0 ? void 0 : _data$wfComment.map(e => /*#__PURE__*/React.createElement("div", {
    className: "TLComments"
  }, /*#__PURE__*/React.createElement("h3", null, t("WF_COMMON_COMMENTS")), /*#__PURE__*/React.createElement("p", null, e)))) : null, (data === null || data === void 0 ? void 0 : (_data$thumbnailsToSho = data.thumbnailsToShow) === null || _data$thumbnailsToSho === void 0 ? void 0 : (_data$thumbnailsToSho2 = _data$thumbnailsToSho.thumbs) === null || _data$thumbnailsToSho2 === void 0 ? void 0 : _data$thumbnailsToSho2.length) > 0 ? /*#__PURE__*/React.createElement("div", {
    className: "TLComments"
  }, /*#__PURE__*/React.createElement("h3", null, t("CS_COMMON_ATTACHMENTS")), /*#__PURE__*/React.createElement(DisplayPhotos, {
    srcs: data === null || data === void 0 ? void 0 : data.thumbnailsToShow.thumbs,
    onClick: (src, index) => {
      OpenImage(src, index, data === null || data === void 0 ? void 0 : data.thumbnailsToShow);
    }
  })) : null);
};

function TLTradeAccessories({
  units
}) {
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(React.Fragment, null, units.map((unit, index) => {
    var _unit$values;
    return (
      /*#__PURE__*/
      React.createElement("div", {
        key: t(unit === null || unit === void 0 ? void 0 : unit.title),
        style: {
          marginTop: "19px",
          background: "#FAFAFA",
          border: "1px solid #D6D5D4",
          borderRadius: "4px",
          padding: "8px",
          lineHeight: "19px",
          maxWidth: "600px",
          minWidth: "280px"
        }
      }, /*#__PURE__*/React.createElement(CardSubHeader, {
        style: {
          marginBottom: "8px",
          paddingBottom: "9px",
          color: "#0B0C0C",
          fontSize: "16px",
          lineHeight: "19px"
        }
      }, `${t(unit === null || unit === void 0 ? void 0 : unit.title)} ${index + 1}`), /*#__PURE__*/React.createElement(React.Fragment, {
        key: index
      }, /*#__PURE__*/React.createElement(StatusTable, {
        style: {
          position: "relative",
          marginTop: "19px"
        }
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          position: "absolute",
          maxWidth: "640px",
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          width: "auto"
        }
      }), unit === null || unit === void 0 ? void 0 : (_unit$values = unit.values) === null || _unit$values === void 0 ? void 0 : _unit$values.map((value, index) => {
        var _value$values;
        if (value.map === true && value.value !== "N/A") {
          return /*#__PURE__*/React.createElement(Row, {
            key: t(value.title),
            label: t(value.title),
            text: /*#__PURE__*/React.createElement("img", {
              src: t(value.value),
              alt: ""
            })
          });
        }
        return /*#__PURE__*/React.createElement(Row, {
          key: t(value.title),
          label: `${t(value.title)}:`,
          text: t(value.value) || "N/A",
          last: index === (value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.length) - 1,
          caption: value.caption,
          className: "border-none",
          rowContainerStyle: {
            justifyContent: "space-between",
            fontSize: "16px",
            lineHeight: "19px",
            color: "#0B0C0C"
          }
        });
      }))))
    );
  }));
}

function TLTradeUnits({
  units
}) {
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(React.Fragment, null, units.map((unit, index) => {
    var _unit$values;
    return (
      /*#__PURE__*/
      React.createElement("div", {
        key: t(unit === null || unit === void 0 ? void 0 : unit.title),
        style: {
          marginTop: "19px",
          background: "#FAFAFA",
          border: "1px solid #D6D5D4",
          borderRadius: "4px",
          padding: "8px",
          lineHeight: "19px",
          maxWidth: "600px",
          minWidth: "280px"
        }
      }, /*#__PURE__*/React.createElement(CardSubHeader, {
        style: {
          marginBottom: "9px",
          paddingBottom: "9px",
          color: "#0B0C0C",
          fontSize: "16px",
          lineHeight: "19px"
        }
      }, `${t(unit === null || unit === void 0 ? void 0 : unit.title)} ${index + 1}`), /*#__PURE__*/React.createElement(React.Fragment, {
        key: index
      }, /*#__PURE__*/React.createElement(StatusTable, {
        style: {
          position: "relative",
          marginTop: "19px"
        }
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          position: "absolute",
          maxWidth: "640px",
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          width: "auto"
        }
      }), unit === null || unit === void 0 ? void 0 : (_unit$values = unit.values) === null || _unit$values === void 0 ? void 0 : _unit$values.map((value, index) => {
        var _value$values;
        if (value.map === true && value.value !== "N/A") {
          return /*#__PURE__*/React.createElement(Row, {
            key: t(value.title),
            label: t(value.title),
            text: /*#__PURE__*/React.createElement("img", {
              src: t(value.value),
              alt: ""
            })
          });
        }
        return /*#__PURE__*/React.createElement(Row, {
          key: t(value.title),
          label: `${t(value.title)}:`,
          text: t(value.value) || "NA",
          last: index === (value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.length) - 1,
          caption: value.caption,
          className: "border-none",
          rowContainerStyle: {
            justifyContent: "space-between",
            fontSize: "16px",
            lineHeight: "19px",
            color: "#0B0C0C"
          }
        });
      }))))
    );
  }));
}

const getQueryStringParams = query => {
  return query ? (/^[?#]/.test(query) ? query.slice(1) : query).split("&").reduce((params, param) => {
    let [key, value] = param.split("=");
    params[key] = value ? decodeURIComponent(value.replace(/\+/g, " ")) : "";
    return params;
  }, {}) : {};
};

const cardSubHeaderStyles = () => {
  return {
    fontSize: "24px",
    marginBottom: "16px",
    marginTop: "32px"
  };
};
const WSAdditonalDetails = ({
  wsAdditionalDetails,
  oldValue
}) => {
  var _wsAdditionalDetails$, _wsAdditionalDetails$2, _wsAdditionalDetails$3, _wsAdditionalDetails$4;
  const {
    t
  } = useTranslation();
  let filters = getQueryStringParams(location.search);
  const isModify = filters === null || filters === void 0 ? void 0 : filters.mode;
  var {
    connectionDetails,
    plumberDetails,
    roadCuttingDetails,
    activationDetails
  } = (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : wsAdditionalDetails.additionalDetails) || {
    connectionDetails: [],
    plumberDetails: []
  };
  return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement("div", {
    style: {
      lineHeight: "19px",
      maxWidth: "950px",
      minWidth: "280px"
    }
  }, (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$ = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$ === void 0 ? void 0 : _wsAdditionalDetails$.connectionDetails) && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: cardSubHeaderStyles()
  }, t("WS_COMMON_CONNECTION_DETAIL")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "connection-details-new-value-wrapper"
  }, connectionDetails === null || connectionDetails === void 0 ? void 0 : connectionDetails.map((value, index) => {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: value !== null && value !== void 0 && value.oldValue ? value === null || value === void 0 ? void 0 : value.oldValue : value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : ""
    }));
  })))), (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$2 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$2 === void 0 ? void 0 : _wsAdditionalDetails$2.plumberDetails) && isModify != "MODIFY" && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: cardSubHeaderStyles()
  }, t("WS_COMMON_PLUMBER_DETAILS")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "plumber-details-new-value-wrapper"
  }, plumberDetails === null || plumberDetails === void 0 ? void 0 : plumberDetails.map((value, index) => {
    return /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: value !== null && value !== void 0 && value.oldValue ? value === null || value === void 0 ? void 0 : value.oldValue : value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : "",
      privacy: value.privacy
    });
  })))), (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$3 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$3 === void 0 ? void 0 : _wsAdditionalDetails$3.roadCuttingDetails) && isModify != "MODIFY" && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: cardSubHeaderStyles()
  }, t("WS_ROAD_CUTTING_DETAILS")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "plumber-details-new-value-wrapper"
  }, roadCuttingDetails === null || roadCuttingDetails === void 0 ? void 0 : roadCuttingDetails.map(value => {
    var _value$values;
    return /*#__PURE__*/React.createElement("div", {
      style: (roadCuttingDetails === null || roadCuttingDetails === void 0 ? void 0 : roadCuttingDetails.length) > 1 ? {
        border: "1px solid #D6D5D4",
        background: "#FAFAFA",
        borderRadius: "4px",
        padding: "10px 10px 0px 10px",
        margin: "5px 0px"
      } : {}
    }, value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.map(roadValue => /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      key: `${roadValue.title}`,
      label: `${t(`${roadValue.title}`)}`,
      text: roadValue !== null && roadValue !== void 0 && roadValue.oldValue ? roadValue === null || roadValue === void 0 ? void 0 : roadValue.oldValue : roadValue !== null && roadValue !== void 0 && roadValue.value ? roadValue === null || roadValue === void 0 ? void 0 : roadValue.value : ""
    })));
  })))), (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$4 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$4 === void 0 ? void 0 : _wsAdditionalDetails$4.activationDetails) && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: cardSubHeaderStyles()
  }, t("WS_ACTIVATION_DETAILS")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "plumber-details-new-value-wrapper"
  }, activationDetails === null || activationDetails === void 0 ? void 0 : activationDetails.map((value, index) => {
    return /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: value !== null && value !== void 0 && value.oldValue ? value === null || value === void 0 ? void 0 : value.oldValue : value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : ""
    });
  }))))));
};

const Penality_menu = [{
  title: "PT_PENDING_DUES_FROM_EARLIER",
  value: "Pending dues from earlier"
}, {
  title: "PT_MISCALCULATION_OF_EARLIER_ASSESSMENT",
  value: "Miscalculation of earlier Assessment"
}, {
  title: "PT_ONE_TIME_PENALITY",
  value: "One time penality"
}, {
  title: "PT_OTHERS",
  value: "Others"
}];
const Rebate_menu = [{
  title: "PT_ADVANCED_PAID_BY_CITIZEN_EARLIER",
  value: "Advanced Paid By Citizen Earlier"
}, {
  title: "PT_REBATE_PROVIDED_BY_COMMISSIONER_EO",
  value: "Rebate provided by commissioner/EO"
}, {
  title: "PT_ADDITIONAL_AMOUNT_CHARGED_FROM_THE_CITIZEN",
  value: "Additional amount charged from the citizen"
}, {
  title: "PT_OTHERS",
  value: "Others"
}];
const WSFeeEstimation = ({
  wsAdditionalDetails,
  workflowDetails
}) => {
  var _wsAdditionalDetails$, _wsAdditionalDetails$20, _fields$adhocPenaltyR, _fields$adhocRebateRe;
  const {
    t
  } = useTranslation();
  const [sessionFormData, setSessionFormData, clearSessionFormData] = Digit.Hooks.useSessionStorage("ADHOC_ADD_REBATE_DATA", {});
  const [sessionBillFormData, setSessionBillFormData, clearBillSessionFormData] = Digit.Hooks.useSessionStorage("ADHOC_BILL_ADD_REBATE_DATA", {});
  const isPaid = wsAdditionalDetails !== null && wsAdditionalDetails !== void 0 && (_wsAdditionalDetails$ = wsAdditionalDetails.additionalDetails) !== null && _wsAdditionalDetails$ !== void 0 && _wsAdditionalDetails$.isPaid ? true : false;
  const [popup, showPopUp] = useState(false);
  const [fields, setFields] = useState(sessionFormData ? sessionFormData : {});
  const [showToast, setShowToast] = useState(null);
  const [billDetails, setBillDetails] = useState(wsAdditionalDetails.additionalDetails.data ? wsAdditionalDetails.additionalDetails.data : {});
  const [values, setValues] = useState(wsAdditionalDetails.additionalDetails.values ? wsAdditionalDetails.additionalDetails.values : []);
  const stateCode = Digit.ULBService.getStateId();
  const {
    isMdmsLoading,
    data: mdmsRes
  } = Digit.Hooks.ws.useMDMS(stateCode, "BillingService", ["TaxHeadMaster"]);
  useEffect(() => {
    var _wsAdditionalDetails$2, _wsAdditionalDetails$3, _sessionFormData$bill;
    const data = {
      ...(wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$2 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$2 === void 0 ? void 0 : (_wsAdditionalDetails$3 = _wsAdditionalDetails$2.appDetails) === null || _wsAdditionalDetails$3 === void 0 ? void 0 : _wsAdditionalDetails$3.additionalDetails)
    };
    if ((sessionFormData === null || sessionFormData === void 0 ? void 0 : (_sessionFormData$bill = sessionFormData.billDetails) === null || _sessionFormData$bill === void 0 ? void 0 : _sessionFormData$bill.length) > 0) {
      var _sessionFormData$bill2, _sessionFormData$bill3, _sessionFormData$bill4, _sessionFormData$bill5, _sessionFormData$bill6, _sessionFormData$bill7, _sessionFormData$bill8;
      const values = [{
        title: "WS_APPLICATION_FEE_HEADER",
        value: /*#__PURE__*/React.createElement("span", null, "\u20B9", sessionFormData === null || sessionFormData === void 0 ? void 0 : (_sessionFormData$bill2 = sessionFormData.billDetails) === null || _sessionFormData$bill2 === void 0 ? void 0 : (_sessionFormData$bill3 = _sessionFormData$bill2[0]) === null || _sessionFormData$bill3 === void 0 ? void 0 : _sessionFormData$bill3.fee)
      }, {
        title: "WS_SERVICE_FEE_HEADER",
        value: /*#__PURE__*/React.createElement("span", null, "\u20B9", sessionFormData === null || sessionFormData === void 0 ? void 0 : (_sessionFormData$bill4 = sessionFormData.billDetails) === null || _sessionFormData$bill4 === void 0 ? void 0 : (_sessionFormData$bill5 = _sessionFormData$bill4[0]) === null || _sessionFormData$bill5 === void 0 ? void 0 : _sessionFormData$bill5.charge)
      }, {
        title: "WS_TAX_HEADER",
        value: /*#__PURE__*/React.createElement("span", null, "\u20B9", sessionFormData === null || sessionFormData === void 0 ? void 0 : (_sessionFormData$bill6 = sessionFormData.billDetails) === null || _sessionFormData$bill6 === void 0 ? void 0 : (_sessionFormData$bill7 = _sessionFormData$bill6[0]) === null || _sessionFormData$bill7 === void 0 ? void 0 : _sessionFormData$bill7.taxAmount)
      }];
      setValues(values);
      setBillDetails(sessionFormData === null || sessionFormData === void 0 ? void 0 : (_sessionFormData$bill8 = sessionFormData.billDetails) === null || _sessionFormData$bill8 === void 0 ? void 0 : _sessionFormData$bill8[0]);
    } else {
      setSessionFormData(data);
      setFields(data);
    }
  }, []);
  let validation = {};
  const Heading = props => {
    return /*#__PURE__*/React.createElement("h1", {
      className: "heading-m"
    }, props.label);
  };
  const Close = () => /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
  const CloseBtn = props => {
    return /*#__PURE__*/React.createElement("div", {
      className: "icon-bg-secondary",
      onClick: props.onClick
    }, /*#__PURE__*/React.createElement(Close, null));
  };
  const closeToast = () => {
    setShowToast(false);
  };
  const addAdhocRebatePenality = e => {
    const adhocAmount = fields !== null && fields !== void 0 && fields.adhocPenalty ? Number(fields === null || fields === void 0 ? void 0 : fields.adhocPenalty) : 0;
    const rebateAmount = fields !== null && fields !== void 0 && fields.adhocRebate ? Number(fields === null || fields === void 0 ? void 0 : fields.adhocRebate) : 0;
    if (adhocAmount || rebateAmount) {
      var _wsAdditionalDetails$4, _wsAdditionalDetails$5;
      const totalAmount = wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$4 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$4 === void 0 ? void 0 : (_wsAdditionalDetails$5 = _wsAdditionalDetails$4.data) === null || _wsAdditionalDetails$5 === void 0 ? void 0 : _wsAdditionalDetails$5.totalAmount;
      if (rebateAmount > totalAmount) {
        setShowToast({
          isError: false,
          isWarning: true,
          key: "error",
          message: t("ERR_WS_REBATE_GREATER_THAN_AMOUNT")
        });
      } else {
        var _wsAdditionalDetails$10, _wsAdditionalDetails$11, _wsAdditionalDetails$12, _wsAdditionalDetails$13, _wsAdditionalDetails$14, _wsAdditionalDetails$15, _wsAdditionalDetails$16, _wsAdditionalDetails$17, _wsAdditionalDetails$18, _wsAdditionalDetails$19;
        const applicationNo = wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$10 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$10 === void 0 ? void 0 : (_wsAdditionalDetails$11 = _wsAdditionalDetails$10.appDetails) === null || _wsAdditionalDetails$11 === void 0 ? void 0 : _wsAdditionalDetails$11.applicationNo;
        const tenantId = wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$12 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$12 === void 0 ? void 0 : (_wsAdditionalDetails$13 = _wsAdditionalDetails$12.appDetails) === null || _wsAdditionalDetails$13 === void 0 ? void 0 : _wsAdditionalDetails$13.tenantId;
        const appAdditionalDetails = {
          ...(wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$14 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$14 === void 0 ? void 0 : (_wsAdditionalDetails$15 = _wsAdditionalDetails$14.appDetails) === null || _wsAdditionalDetails$15 === void 0 ? void 0 : _wsAdditionalDetails$15.additionalDetails),
          ...fields
        };
        wsAdditionalDetails.additionalDetails.appDetails.additionalDetails = appAdditionalDetails;
        const data = {
          CalculationCriteria: (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$16 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$16 === void 0 ? void 0 : (_wsAdditionalDetails$17 = _wsAdditionalDetails$16.appDetails) === null || _wsAdditionalDetails$17 === void 0 ? void 0 : _wsAdditionalDetails$17.service) == "WATER" ? [{
            applicationNo: applicationNo,
            tenantId: tenantId,
            waterConnection: wsAdditionalDetails.additionalDetails.appDetails
          }] : [{
            applicationNo: applicationNo,
            tenantId: tenantId,
            sewerageConnection: wsAdditionalDetails.additionalDetails.appDetails
          }],
          isconnectionCalculation: false
        };
        let businessService = (wsAdditionalDetails === null || wsAdditionalDetails === void 0 ? void 0 : (_wsAdditionalDetails$18 = wsAdditionalDetails.additionalDetails) === null || _wsAdditionalDetails$18 === void 0 ? void 0 : (_wsAdditionalDetails$19 = _wsAdditionalDetails$18.appDetails) === null || _wsAdditionalDetails$19 === void 0 ? void 0 : _wsAdditionalDetails$19.service) == "WATER" ? "WS" : "SW";
        Digit.WSService.wsCalculationEstimate(data, businessService).then((result, err) => {
          var _result$Calculation, _result$Calculation$, _result$Calculation$$, _result$Calculation3, _result$Calculation3$, _result$Calculation4, _result$Calculation4$, _result$Calculation5, _result$Calculation5$, _result$Calculation6, _result$Calculation6$, _result$Calculation7;
          if ((result === null || result === void 0 ? void 0 : (_result$Calculation = result.Calculation) === null || _result$Calculation === void 0 ? void 0 : (_result$Calculation$ = _result$Calculation[0]) === null || _result$Calculation$ === void 0 ? void 0 : (_result$Calculation$$ = _result$Calculation$.taxHeadEstimates) === null || _result$Calculation$$ === void 0 ? void 0 : _result$Calculation$$.length) > 0) {
            var _result$Calculation2, _result$Calculation2$, _result$Calculation2$2;
            result === null || result === void 0 ? void 0 : (_result$Calculation2 = result.Calculation) === null || _result$Calculation2 === void 0 ? void 0 : (_result$Calculation2$ = _result$Calculation2[0]) === null || _result$Calculation2$ === void 0 ? void 0 : (_result$Calculation2$2 = _result$Calculation2$.taxHeadEstimates) === null || _result$Calculation2$2 === void 0 ? void 0 : _result$Calculation2$2.forEach(data => data.amount = data.estimateAmount);
          }
          result.Calculation[0].billSlabData = _.groupBy(result === null || result === void 0 ? void 0 : (_result$Calculation3 = result.Calculation) === null || _result$Calculation3 === void 0 ? void 0 : (_result$Calculation3$ = _result$Calculation3[0]) === null || _result$Calculation3$ === void 0 ? void 0 : _result$Calculation3$.taxHeadEstimates, 'category');
          const values = [{
            title: "WS_APPLICATION_FEE_HEADER",
            value: (_result$Calculation4 = result.Calculation) === null || _result$Calculation4 === void 0 ? void 0 : (_result$Calculation4$ = _result$Calculation4[0]) === null || _result$Calculation4$ === void 0 ? void 0 : _result$Calculation4$.fee
          }, {
            title: "WS_SERVICE_FEE_HEADER",
            value: (_result$Calculation5 = result.Calculation) === null || _result$Calculation5 === void 0 ? void 0 : (_result$Calculation5$ = _result$Calculation5[0]) === null || _result$Calculation5$ === void 0 ? void 0 : _result$Calculation5$.charge
          }, {
            title: "WS_TAX_HEADER",
            value: (_result$Calculation6 = result.Calculation) === null || _result$Calculation6 === void 0 ? void 0 : (_result$Calculation6$ = _result$Calculation6[0]) === null || _result$Calculation6$ === void 0 ? void 0 : _result$Calculation6$.taxAmount
          }];
          setSessionBillFormData(cloneDeep_1(result.Calculation[0]));
          setBillDetails(result === null || result === void 0 ? void 0 : (_result$Calculation7 = result.Calculation) === null || _result$Calculation7 === void 0 ? void 0 : _result$Calculation7[0]);
          setValues(values);
          fields.billDetails = result === null || result === void 0 ? void 0 : result.Calculation;
          setSessionFormData(fields);
          showPopUp(false);
        }).catch(e => {
          var _e$response, _e$response$data, _e$response$data$Erro, _e$response2, _e$response2$data, _e$response2$data$Err;
          setShowToast({
            isError: true,
            isWarning: false,
            key: "error",
            message: e !== null && e !== void 0 && (_e$response = e.response) !== null && _e$response !== void 0 && (_e$response$data = _e$response.data) !== null && _e$response$data !== void 0 && (_e$response$data$Erro = _e$response$data.Errors[0]) !== null && _e$response$data$Erro !== void 0 && _e$response$data$Erro.message ? t(`${e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : (_e$response2$data$Err = _e$response2$data.Errors[0]) === null || _e$response2$data$Err === void 0 ? void 0 : _e$response2$data$Err.code}`) : t("PT_COMMON_ADD_REBATE_PENALITY")
          });
        });
      }
    } else {
      setShowToast({
        isError: false,
        isWarning: true,
        key: "warning",
        message: t("ERR_WS_ENTER_ATLEAST_ONE_FIELD")
      });
    }
  };
  const selectedValuesData = (value, isDropDownValue = false, e) => {
    let values = {
      ...fields
    };
    if ((value == "adhocPenalty" || value == "adhocRebate") && e.target.value) {
      var _e$target, _e$target2;
      const targetValueSign = (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) == 0 ? 1 : Math.sign(e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value) || -1;
      if (targetValueSign == 1) {
        values[value] = e.target.value;
      } else {
        values[value] = '';
      }
    } else if (isDropDownValue) {
      values[`${value}_data`] = e;
      values[value] = e.title;
      if (e.title == "PT_OTHERS" && value == "adhocPenaltyReason") values[`adhocPenaltyComment`] = "";
      if (e.title == "PT_OTHERS" && value == "adhocRebateReason") values[`adhocRebateComment`] = "";
    } else {
      values[value] = e.target.value;
    }
    setFields(values);
  };
  return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement("div", {
    style: {
      lineHeight: "19px",
      maxWidth: "950px",
      minWidth: "280px"
    }
  }, values && /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement("div", null, values === null || values === void 0 ? void 0 : values.map((value, index) => {
    return /*#__PURE__*/React.createElement(Row, {
      className: "border-none",
      key: `${value.title}`,
      label: `${t(`${value.title}`)}`,
      text: value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : ""
    });
  })), /*#__PURE__*/React.createElement("hr", {
    style: {
      border: "1px solid #D6D5D4",
      color: "#D6D5D4",
      margin: "16px 0px"
    }
  }), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    key: `WS_COMMON_TOTAL_AMT`,
    label: `${t(`WS_COMMON_TOTAL_AMT`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", (billDetails === null || billDetails === void 0 ? void 0 : billDetails.totalAmount) || 0),
    textStyle: {
      fontSize: "24px",
      fontWeight: "700"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    key: `CS_INBOX_STATUS_FILTER`,
    label: `${t(`CS_INBOX_STATUS_FILTER`)}`,
    text: isPaid ? t("WS_COMMON_PAID_LABEL") : t("WS_COMMON_NOT_PAID"),
    textStyle: !isPaid ? {
      color: "#D4351C"
    } : {
      color: "#00703C"
    }
  }))), wsAdditionalDetails !== null && wsAdditionalDetails !== void 0 && (_wsAdditionalDetails$20 = wsAdditionalDetails.additionalDetails) !== null && _wsAdditionalDetails$20 !== void 0 && _wsAdditionalDetails$20.isAdhocRebate ? /*#__PURE__*/React.createElement("div", {
    onClick: e => {
      showPopUp(true);
    }
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      cursor: "pointer",
      color: "#a82227"
    }
  }, t("WS_PAYMENT_ADD_REBATE_PENALTY"))) : null, popup && /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading, {
      label: t("PT_ADD_REBATE_PENALITY")
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn, {
      onClick: () => {
        setFields(sessionFormData);
        showPopUp(false);
      }
    }),
    actionCancelLabel: t("PT_CANCEL"),
    actionCancelOnSubmit: () => {
      setFields(sessionFormData);
      showPopUp(false);
    },
    actionSaveLabel: t("PT_ADD"),
    actionSaveOnSubmit: e => addAdhocRebatePenality(),
    hideSubmit: false,
    popupStyles: {
      overflowY: "auto"
    }
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Card, {
    style: {
      padding: "10px 10px 1px 10px",
      margin: "0px 0px 15px 0px"
    }
  }, /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      fontSize: "16px",
      fontWeight: "700",
      lineHeight: "18px",
      padding: "0px",
      margin: "0px 0px 10px 0px"
    }
  }, t("PT_AD_PENALTY")), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_TX_HEADS")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Dropdown, {
    isMandatory: true,
    option: Penality_menu,
    optionKey: "title",
    select: e => selectedValuesData("adhocPenaltyReason", true, e),
    selected: (fields === null || fields === void 0 ? void 0 : fields.adhocPenaltyReason_data) || "",
    isPropertyAssess: true,
    name: "adhocPenaltyReason_data",
    t: t
  })), (fields === null || fields === void 0 ? void 0 : (_fields$adhocPenaltyR = fields.adhocPenaltyReason_data) === null || _fields$adhocPenaltyR === void 0 ? void 0 : _fields$adhocPenaltyR.title) === "PT_OTHERS" && /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_REASON")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
    style: {
      background: "#FAFAFA"
    },
    t: t,
    type: "text",
    isMandatory: false,
    name: "adhocPenaltyComment",
    value: (fields === null || fields === void 0 ? void 0 : fields.adhocPenaltyComment) || "",
    onChange: e => selectedValuesData("adhocPenaltyComment", false, e)
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    type: "text",
    title: t("TL_NAME_ERROR_MESSAGE")
  })))), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_HEAD_AMT")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
    style: {
      background: "#FAFAFA"
    },
    t: t,
    type: "number",
    isMandatory: false,
    name: "adhocPenalty",
    value: (fields === null || fields === void 0 ? void 0 : fields.adhocPenalty) || "",
    onChange: e => selectedValuesData("adhocPenalty", false, e)
  }, validation = {
    isRequired: true,
    pattern: "^[1-9]+[0-9]*$",
    title: t("ERR_DEFAULT_INPUT_FIELD_MSG")
  })))), /*#__PURE__*/React.createElement(Card, {
    style: {
      padding: "10px 10px 1px 10px",
      margin: "0px 0px 15px 0px"
    }
  }, /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      fontSize: "16px",
      fontWeight: "700",
      lineHeight: "18px",
      padding: "0px",
      margin: "0px 0px 10px 0px"
    }
  }, t("PT_AD_REBATE")), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_TX_HEADS")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(Dropdown, {
    isMandatory: true,
    option: Rebate_menu,
    optionKey: "title",
    select: e => selectedValuesData("adhocRebateReason", true, e),
    selected: (fields === null || fields === void 0 ? void 0 : fields.adhocRebateReason_data) || "",
    name: "adhocRebateReason_data",
    isPropertyAssess: true,
    t: t
  })), (fields === null || fields === void 0 ? void 0 : (_fields$adhocRebateRe = fields.adhocRebateReason_data) === null || _fields$adhocRebateRe === void 0 ? void 0 : _fields$adhocRebateRe.title) === "PT_OTHERS" && /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_REASON")), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    style: {
      background: "#FAFAFA"
    },
    t: t,
    type: "text",
    isMandatory: false,
    name: "adhocRebateComment",
    value: (fields === null || fields === void 0 ? void 0 : fields.adhocRebateComment) || "",
    onChange: e => selectedValuesData("adhocRebateComment", false, e)
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    type: "text",
    title: t("TL_NAME_ERROR_MESSAGE")
  }))), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_HEAD_AMT")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(TextInput, Object.assign({
    style: {
      background: "#FAFAFA"
    },
    t: t,
    type: "number",
    isMandatory: false,
    name: "adhocRebate",
    value: (fields === null || fields === void 0 ? void 0 : fields.adhocRebate) || "",
    onChange: e => selectedValuesData("adhocRebate", false, e)
  }, validation = {
    isRequired: true,
    pattern: "^[1-9]+[0-9]*$",
    title: t("ERR_DEFAULT_INPUT_FIELD_MSG")
  }))))), " "), showToast && /*#__PURE__*/React.createElement(Toast, {
    style: {
      zIndex: "10000"
    },
    warning: showToast === null || showToast === void 0 ? void 0 : showToast.isWarning,
    error: showToast !== null && showToast !== void 0 && showToast.isWarning ? false : true,
    label: t(showToast === null || showToast === void 0 ? void 0 : showToast.message),
    onClose: closeToast,
    isDleteBtn: true
  })));
};

const EyeSvgINdex = ({
  style
}) => {
  return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("svg", {
    style: {
      ...style
    },
    display: "inline",
    width: "22",
    height: "16",
    viewBox: "0 0 22 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M11 0.5C6 0.5 1.73 3.61 0 8C1.73 12.39 6 15.5 11 15.5C16 15.5 20.27 12.39 22 8C20.27 3.61 16 0.5 11 0.5ZM11 13C8.24 13 6 10.76 6 8C6 5.24 8.24 3 11 3C13.76 3 16 5.24 16 8C16 10.76 13.76 13 11 13ZM11 5C9.34 5 8 6.34 8 8C8 9.66 9.34 11 11 11C12.66 11 14 9.66 14 8C14 6.34 12.66 5 11 5Z",
    fill: "#a82227"
  })));
};
const InfoDetails = ({
  t,
  userType: _userType = false,
  infoBannerLabel: _infoBannerLabel = "",
  infoClickLable: _infoClickLable = "",
  infoClickInfoLabel: _infoClickInfoLabel = "",
  infoClickInfoLabel1: _infoClickInfoLabel2 = ""
}) => {
  _userType = _userType || Digit.SessionStorage.get("userType");
  const isMobile = window.Digit.Utils.browser.isMobile();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: isMobile ? {} : {
      width: "80%"
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "info-banner-wrap",
    style: {
      color: "#3498DB",
      margin: "0px"
    }
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(InfoBannerIcon, null), /*#__PURE__*/React.createElement("h2", {
    style: {
      color: "#3498DB"
    }
  }, t(_infoBannerLabel))), `${t(_infoClickLable)} `, /*#__PURE__*/React.createElement(EyeSvgINdex, {
    style: {
      display: "inline",
      marginBottom: "5px"
    }
  }), ` ${t(_infoClickInfoLabel)}`, /*#__PURE__*/React.createElement("div", null, ` ${t(_infoClickInfoLabel2)}`))));
};

const ViewBreakup = ({
  wsAdditionalDetails,
  workflowDetails
}) => {
  var _wsAdditionalDetails$, _breakUpData$billSlab, _breakUpData$billSlab2, _breakUpData$billSlab3, _breakUpData$billSlab4, _breakUpData$billSlab5, _breakUpData$billSlab6;
  const {
    t
  } = useTranslation();
  const [popup, showPopUp] = useState(false);
  const [breakUpData, setBreakUpData] = useState({});
  const Heading = props => {
    return /*#__PURE__*/React.createElement("h1", {
      className: "heading-m"
    }, props.label);
  };
  const Close = () => /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
  const CloseBtn = props => {
    return /*#__PURE__*/React.createElement("div", {
      className: "icon-bg-secondary",
      onClick: props.onClick
    }, /*#__PURE__*/React.createElement(Close, null));
  };
  const onPopupOpen = () => {
    var _sessionBillFormData$;
    let breakupData = wsAdditionalDetails.additionalDetails.data || {};
    const sessionBillData = sessionStorage.getItem("Digit.ADHOC_BILL_ADD_REBATE_DATA");
    const sessionBillFormData = sessionBillData ? JSON.parse(sessionBillData) : {};
    if (sessionBillFormData !== null && sessionBillFormData !== void 0 && (_sessionBillFormData$ = sessionBillFormData.value) !== null && _sessionBillFormData$ !== void 0 && _sessionBillFormData$.totalAmount) breakupData = sessionBillFormData === null || sessionBillFormData === void 0 ? void 0 : sessionBillFormData.value;
    setBreakUpData(breakupData);
    showPopUp(true);
  };
  return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement("div", {
    style: {
      lineHeight: "19px",
      maxWidth: "950px",
      minWidth: "280px"
    }
  }, wsAdditionalDetails !== null && wsAdditionalDetails !== void 0 && (_wsAdditionalDetails$ = wsAdditionalDetails.additionalDetails) !== null && _wsAdditionalDetails$ !== void 0 && _wsAdditionalDetails$.isViewBreakup ? /*#__PURE__*/React.createElement("div", {
    onClick: e => onPopupOpen(),
    style: {
      marginTop: "12px"
    }
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      cursor: "pointer",
      color: "#a82227"
    }
  }, t("WS_PAYMENT_VIEW_BREAKUP"))) : null, popup && /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading, {
      label: t("WS_CALCULATION_BREAKUP")
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn, {
      onClick: () => {
        showPopUp(false);
      }
    }),
    hideSubmit: true,
    popupStyles: {
      overflowY: "auto"
    },
    headerBarMainStyle: {
      marginBottom: "0px"
    },
    popupModuleMianStyles: {
      paddingTop: "0px"
    }
  }, /*#__PURE__*/React.createElement(StatusTable, {
    style: {
      padding: "10px",
      paddingTop: "0px"
    }
  }, /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      margin: "10px 0px"
    }
  }, t("WS_APPLICATION_FEE_HEADER")), breakUpData === null || breakUpData === void 0 ? void 0 : (_breakUpData$billSlab = breakUpData.billSlabData) === null || _breakUpData$billSlab === void 0 ? void 0 : (_breakUpData$billSlab2 = _breakUpData$billSlab.FEE) === null || _breakUpData$billSlab2 === void 0 ? void 0 : _breakUpData$billSlab2.map(data => /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    rowContainerStyle: {
      margin: "0px"
    },
    labelStyle: {
      width: "50%"
    },
    key: `${data === null || data === void 0 ? void 0 : data.taxHeadCode}`,
    label: `${t(`${data === null || data === void 0 ? void 0 : data.taxHeadCode}`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", Number(data === null || data === void 0 ? void 0 : data.amount) || 0),
    textStyle: {
      textAlign: "right"
    }
  })), /*#__PURE__*/React.createElement("hr", {
    style: {
      color: "#cccccc",
      backgroundColor: "#cccccc",
      marginBottom: "10px"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    rowContainerStyle: {
      margin: "0px"
    },
    labelStyle: {
      width: "50%"
    },
    key: `PDF_STATIC_LABEL_CONSOLIDATED_TLAPP_TOTAL_AMOUNT1`,
    label: `${t(`PDF_STATIC_LABEL_CONSOLIDATED_TLAPP_TOTAL_AMOUNT`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", Number(breakUpData === null || breakUpData === void 0 ? void 0 : breakUpData.fee) || 0),
    textStyle: {
      textAlign: "right",
      fontWeight: "700",
      fontSize: "24px"
    }
  }), /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      margin: "10px 0px"
    }
  }, t("WS_SERVICE_FEE_HEADER")), breakUpData === null || breakUpData === void 0 ? void 0 : (_breakUpData$billSlab3 = breakUpData.billSlabData) === null || _breakUpData$billSlab3 === void 0 ? void 0 : (_breakUpData$billSlab4 = _breakUpData$billSlab3.CHARGES) === null || _breakUpData$billSlab4 === void 0 ? void 0 : _breakUpData$billSlab4.map(data => /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    rowContainerStyle: {
      margin: "0px"
    },
    labelStyle: {
      width: "50%"
    },
    key: `${data === null || data === void 0 ? void 0 : data.taxHeadCode}`,
    label: `${t(`${data === null || data === void 0 ? void 0 : data.taxHeadCode}`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", Number(data === null || data === void 0 ? void 0 : data.amount) || 0),
    textStyle: {
      textAlign: "right"
    }
  })), /*#__PURE__*/React.createElement("hr", {
    style: {
      color: "#cccccc",
      backgroundColor: "#cccccc",
      marginBottom: "10px"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    rowContainerStyle: {
      margin: "0px"
    },
    labelStyle: {
      width: "50%"
    },
    key: `PDF_STATIC_LABEL_CONSOLIDATED_TLAPP_TOTAL_AMOUNT2`,
    label: `${t(`PDF_STATIC_LABEL_CONSOLIDATED_TLAPP_TOTAL_AMOUNT`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", Number(breakUpData === null || breakUpData === void 0 ? void 0 : breakUpData.charge) || 0),
    textStyle: {
      textAlign: "right",
      fontWeight: "700",
      fontSize: "24px"
    }
  }), breakUpData === null || breakUpData === void 0 ? void 0 : (_breakUpData$billSlab5 = breakUpData.billSlabData) === null || _breakUpData$billSlab5 === void 0 ? void 0 : (_breakUpData$billSlab6 = _breakUpData$billSlab5.TAX) === null || _breakUpData$billSlab6 === void 0 ? void 0 : _breakUpData$billSlab6.map(data => /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    rowContainerStyle: {
      margin: "0px"
    },
    labelStyle: {
      width: "50%"
    },
    key: `${data === null || data === void 0 ? void 0 : data.taxHeadCode}`,
    label: `${t(`${data === null || data === void 0 ? void 0 : data.taxHeadCode}`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", Number(data === null || data === void 0 ? void 0 : data.amount) || 0),
    textStyle: {
      textAlign: "right"
    }
  })), /*#__PURE__*/React.createElement("hr", {
    style: {
      color: "#cccccc",
      backgroundColor: "#cccccc",
      marginBottom: "10px"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    rowContainerStyle: {
      margin: "0px"
    },
    labelStyle: {
      width: "50%"
    },
    key: `PDF_STATIC_LABEL_CONSOLIDATED_TLAPP_TOTAL_AMOUNT3`,
    label: `${t(`PDF_STATIC_LABEL_CONSOLIDATED_TLAPP_TOTAL_AMOUNT`)}`,
    text: /*#__PURE__*/React.createElement("span", null, "\u20B9", Number(breakUpData === null || breakUpData === void 0 ? void 0 : breakUpData.totalAmount) || 0),
    textStyle: {
      textAlign: "right",
      fontWeight: "700",
      fontSize: "24px"
    }
  })))));
};

function ApplicationDetailsContent({
  applicationDetails,
  workflowDetails,
  isDataLoading,
  applicationData,
  businessService,
  timelineStatusPrefix,
  showTimeLine = true,
  statusAttribute = "status",
  paymentsList,
  oldValue,
  isInfoLabel = false
}) {
  var _applicationDetails$a, _workflowDetails$data3, _workflowDetails$data4, _workflowDetails$data5, _workflowDetails$data6, _workflowDetails$data7, _workflowDetails$data8, _workflowDetails$data9, _workflowDetails$data10, _workflowDetails$data11, _workflowDetails$data12;
  const {
    t
  } = useTranslation();
  function OpenImage(imageSource, index, thumbnailsToShow) {
    var _thumbnailsToShow$ful;
    window.open(thumbnailsToShow === null || thumbnailsToShow === void 0 ? void 0 : (_thumbnailsToShow$ful = thumbnailsToShow.fullImage) === null || _thumbnailsToShow$ful === void 0 ? void 0 : _thumbnailsToShow$ful[0], "_blank");
  }
  const convertEpochToDateDMY = dateEpoch => {
    if (dateEpoch == null || dateEpoch == undefined || dateEpoch == "") {
      return "NA";
    }
    const dateFromApi = new Date(dateEpoch);
    let month = dateFromApi.getMonth() + 1;
    let day = dateFromApi.getDate();
    let year = dateFromApi.getFullYear();
    month = (month > 9 ? "" : "0") + month;
    day = (day > 9 ? "" : "0") + day;
    return `${day}/${month}/${year}`;
  };
  const getTimelineCaptions = (checkpoint, index = 0) => {
    if (checkpoint.state === "OPEN" || checkpoint.status === "INITIATED" && !window.location.href.includes("/obps/")) {
      var _applicationData$audi;
      const caption = {
        date: convertEpochToDateDMY(applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$audi = applicationData.auditDetails) === null || _applicationData$audi === void 0 ? void 0 : _applicationData$audi.createdTime),
        source: (applicationData === null || applicationData === void 0 ? void 0 : applicationData.channel) || ""
      };
      return /*#__PURE__*/React.createElement(TLCaption, {
        data: caption
      });
    } else if (window.location.href.includes("/obps/") || window.location.href.includes("/noc/") || window.location.href.includes("/ws/")) {
      var _checkpoint$assignes, _checkpoint$assignes$, _checkpoint$auditDeta, _checkpoint$assignes2, _checkpoint$assignes3, _applicationData$proc, _applicationData$proc2, _applicationData$proc3, _checkpoint$assignes4, _checkpoint$assignes5, _applicationData$proc4, _applicationData$proc5, _applicationData$proc6, _applicationData$proc7, _applicationData$proc8, _applicationData$proc9, _checkpoint$assignes6, _checkpoint$assignes7;
      const privacy = {
        uuid: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes = checkpoint.assignes) === null || _checkpoint$assignes === void 0 ? void 0 : (_checkpoint$assignes$ = _checkpoint$assignes[0]) === null || _checkpoint$assignes$ === void 0 ? void 0 : _checkpoint$assignes$.uuid,
        fieldName: "mobileNumber",
        model: "User",
        showValue: false,
        loadData: {
          serviceName: "/egov-workflow-v2/egov-wf/process/_search",
          requestBody: {},
          requestParam: {
            tenantId: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.tenantId,
            businessIds: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationNo,
            history: true
          },
          jsonPath: "ProcessInstances[0].assignes[0].mobileNumber",
          isArray: false,
          d: res => {
            let resultstring = "";
            resultstring = `+91 ${_.get(res, `ProcessInstances[${index}].assignes[0].mobileNumber`)}`;
            return resultstring;
          }
        }
      };
      const caption = {
        date: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$auditDeta = checkpoint.auditDetails) === null || _checkpoint$auditDeta === void 0 ? void 0 : _checkpoint$auditDeta.lastModified,
        name: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes2 = checkpoint.assignes) === null || _checkpoint$assignes2 === void 0 ? void 0 : (_checkpoint$assignes3 = _checkpoint$assignes2[0]) === null || _checkpoint$assignes3 === void 0 ? void 0 : _checkpoint$assignes3.name,
        mobileNumber: (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$proc = applicationData.processInstance) === null || _applicationData$proc === void 0 ? void 0 : (_applicationData$proc2 = _applicationData$proc.assignes) === null || _applicationData$proc2 === void 0 ? void 0 : (_applicationData$proc3 = _applicationData$proc2[0]) === null || _applicationData$proc3 === void 0 ? void 0 : _applicationData$proc3.uuid) === (checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes4 = checkpoint.assignes) === null || _checkpoint$assignes4 === void 0 ? void 0 : (_checkpoint$assignes5 = _checkpoint$assignes4[0]) === null || _checkpoint$assignes5 === void 0 ? void 0 : _checkpoint$assignes5.uuid) && applicationData !== null && applicationData !== void 0 && (_applicationData$proc4 = applicationData.processInstance) !== null && _applicationData$proc4 !== void 0 && (_applicationData$proc5 = _applicationData$proc4.assignes) !== null && _applicationData$proc5 !== void 0 && (_applicationData$proc6 = _applicationData$proc5[0]) !== null && _applicationData$proc6 !== void 0 && _applicationData$proc6.mobileNumber ? applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$proc7 = applicationData.processInstance) === null || _applicationData$proc7 === void 0 ? void 0 : (_applicationData$proc8 = _applicationData$proc7.assignes) === null || _applicationData$proc8 === void 0 ? void 0 : (_applicationData$proc9 = _applicationData$proc8[0]) === null || _applicationData$proc9 === void 0 ? void 0 : _applicationData$proc9.mobileNumber : checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes6 = checkpoint.assignes) === null || _checkpoint$assignes6 === void 0 ? void 0 : (_checkpoint$assignes7 = _checkpoint$assignes6[0]) === null || _checkpoint$assignes7 === void 0 ? void 0 : _checkpoint$assignes7.mobileNumber,
        comment: t(checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.comment),
        wfComment: checkpoint.wfComment,
        thumbnailsToShow: checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.thumbnailsToShow
      };
      return /*#__PURE__*/React.createElement(TLCaption, {
        data: caption,
        OpenImage: OpenImage,
        privacy: privacy
      });
    } else {
      var _applicationData$audi2, _checkpoint$assignes8, _checkpoint$assignes9, _checkpoint$assignes10, _checkpoint$assignes11;
      const caption = {
        date: convertEpochToDateDMY(applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$audi2 = applicationData.auditDetails) === null || _applicationData$audi2 === void 0 ? void 0 : _applicationData$audi2.lastModifiedTime),
        name: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes8 = checkpoint.assignes) === null || _checkpoint$assignes8 === void 0 ? void 0 : (_checkpoint$assignes9 = _checkpoint$assignes8[0]) === null || _checkpoint$assignes9 === void 0 ? void 0 : _checkpoint$assignes9.name,
        wfComment: checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.wfComment,
        mobileNumber: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes10 = checkpoint.assignes) === null || _checkpoint$assignes10 === void 0 ? void 0 : (_checkpoint$assignes11 = _checkpoint$assignes10[0]) === null || _checkpoint$assignes11 === void 0 ? void 0 : _checkpoint$assignes11.mobileNumber
      };
      return /*#__PURE__*/React.createElement(TLCaption, {
        data: caption
      });
    }
  };
  const getTranslatedValues = (dataValue, isNotTranslated) => {
    if (dataValue) {
      return !isNotTranslated ? t(dataValue) : dataValue;
    } else {
      return t("NA");
    }
  };
  const checkLocation = window.location.href.includes("employee/tl") || window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc");
  const isNocLocation = window.location.href.includes("employee/noc");
  const isBPALocation = window.location.href.includes("employee/obps");
  const isWS = window.location.href.includes("employee/ws");
  const getRowStyles = () => {
    if (window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc")) {
      return {
        justifyContent: "space-between",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#0B0C0C"
      };
    } else if (checkLocation) {
      return {
        justifyContent: "space-between",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#0B0C0C"
      };
    } else {
      return {};
    }
  };
  const getTableStyles = () => {
    if (window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc")) {
      return {
        position: "relative",
        marginTop: "19px"
      };
    } else if (checkLocation) {
      return {
        position: "relative",
        marginTop: "19px"
      };
    } else {
      return {};
    }
  };
  const getMainDivStyles = () => {
    if (window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc") || window.location.href.includes("employee/ws")) {
      return {
        lineHeight: "19px",
        maxWidth: "950px",
        minWidth: "280px"
      };
    } else if (checkLocation) {
      return {
        lineHeight: "19px",
        maxWidth: "600px",
        minWidth: "280px"
      };
    } else {
      return {};
    }
  };
  const getTextValue = value => {
    if (value !== null && value !== void 0 && value.skip) return value.value;else if (value !== null && value !== void 0 && value.isUnit) return value !== null && value !== void 0 && value.value ? `${getTranslatedValues(value === null || value === void 0 ? void 0 : value.value, value === null || value === void 0 ? void 0 : value.isNotTranslated)} ${t(value === null || value === void 0 ? void 0 : value.isUnit)}` : t("N/A");else return value !== null && value !== void 0 && value.value ? getTranslatedValues(value === null || value === void 0 ? void 0 : value.value, value === null || value === void 0 ? void 0 : value.isNotTranslated) : t("N/A");
  };
  const getClickInfoDetails = () => {
    if (window.location.href.includes("disconnection") || window.location.href.includes("application")) {
      return "WS_DISCONNECTION_CLICK_ON_INFO_LABEL";
    } else {
      return "WS_CLICK_ON_INFO_LABEL";
    }
  };
  const getClickInfoDetails1 = () => {
    if (window.location.href.includes("disconnection") || window.location.href.includes("application")) {
      return "WS_DISCONNECTION_CLICK_ON_INFO1_LABEL";
    } else {
      return "";
    }
  };
  return /*#__PURE__*/React.createElement(Card, {
    style: {
      position: "relative"
    },
    className: "employeeCard-override"
  }, isInfoLabel ? /*#__PURE__*/React.createElement(InfoDetails, {
    t: t,
    userType: false,
    infoBannerLabel: "CS_FILE_APPLICATION_INFO_LABEL",
    infoClickLable: "WS_CLICK_ON_LABEL",
    infoClickInfoLabel: getClickInfoDetails(),
    infoClickInfoLabel1: getClickInfoDetails1()
  }) : null, applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a = applicationDetails.applicationDetails) === null || _applicationDetails$a === void 0 ? void 0 : _applicationDetails$a.map((detail, index) => {
    var _detail$values, _detail$additionalDet, _applicationDetails$a2, _applicationDetails$a3, _applicationDetails$a4, _detail$additionalDet2, _applicationDetails$a5, _applicationDetails$a6, _detail$additionalDet3, _detail$additionalDet4, _detail$additionalDet5, _detail$additionalDet6, _detail$additionalDet7, _detail$additionalDet8, _detail$additionalDet9, _detail$additionalDet10, _detail$additionalDet11, _workflowDetails$data, _workflowDetails$data2, _detail$additionalDet12, _detail$additionalDet13, _detail$additionalDet14, _detail$additionalDet15, _detail$additionalDet16, _detail$additionalDet17, _detail$additionalDet18, _detail$additionalDet19, _detail$additionalDet20, _detail$additionalDet21, _detail$additionalDet22, _detail$additionalDet23, _detail$additionalDet24, _detail$additionalDet25, _detail$additionalDet26, _detail$additionalDet27, _detail$additionalDet28, _detail$additionalDet29, _detail$additionalDet30, _detail$additionalDet31;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, /*#__PURE__*/React.createElement("div", {
      style: getMainDivStyles()
    }, index === 0 && !detail.asSectionHeader ? /*#__PURE__*/React.createElement(CardSubHeader, {
      style: {
        marginBottom: "16px",
        fontSize: "24px"
      }
    }, t(detail.title)) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardSectionHeader, {
      style: index == 0 && checkLocation ? {
        marginBottom: "16px",
        fontSize: "24px"
      } : {
        marginBottom: "16px",
        marginTop: "32px",
        fontSize: "24px"
      }
    }, isNocLocation ? `${t(detail.title)}` : t(detail.title), detail !== null && detail !== void 0 && detail.Component ? /*#__PURE__*/React.createElement(detail.Component, null) : null)), (detail === null || detail === void 0 ? void 0 : detail.isTable) && /*#__PURE__*/React.createElement("table", {
      style: {
        tableLayout: "fixed",
        width: "100%",
        borderCollapse: "collapse"
      }
    }, /*#__PURE__*/React.createElement("tr", {
      style: {
        textAlign: "left"
      }
    }, detail === null || detail === void 0 ? void 0 : detail.headers.map(header => /*#__PURE__*/React.createElement("th", {
      style: {
        padding: "10px",
        paddingLeft: "0px"
      }
    }, t(header)))), detail === null || detail === void 0 ? void 0 : detail.tableRows.map((row, index) => {
      if (index === (detail === null || detail === void 0 ? void 0 : detail.tableRows.length) - 1) {
        return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement("hr", {
          style: {
            width: "370%",
            marginTop: "15px"
          },
          className: "underline"
        }), /*#__PURE__*/React.createElement("tr", null, row.map(element => /*#__PURE__*/React.createElement("td", {
          style: {
            textAlign: "left"
          }
        }, t(element)))));
      }
      return /*#__PURE__*/React.createElement("tr", null, row.map(element => /*#__PURE__*/React.createElement("td", {
        style: {
          paddingTop: "20px",
          textAlign: "left"
        }
      }, t(element))));
    })), /*#__PURE__*/React.createElement(StatusTable, {
      style: getTableStyles()
    }, (detail === null || detail === void 0 ? void 0 : detail.title) && !(detail !== null && detail !== void 0 && detail.title.includes("NOC")) && (detail === null || detail === void 0 ? void 0 : (_detail$values = detail.values) === null || _detail$values === void 0 ? void 0 : _detail$values.map((value, index) => {
      var _detail$values3;
      if (value.map === true && value.value !== "N/A") {
        return /*#__PURE__*/React.createElement(Row, {
          labelStyle: {
            wordBreak: "break-all"
          },
          textStyle: {
            wordBreak: "break-all"
          },
          key: t(value.title),
          label: t(value.title),
          text: /*#__PURE__*/React.createElement("img", {
            src: t(value.value),
            alt: "",
            privacy: value === null || value === void 0 ? void 0 : value.privacy
          })
        });
      }
      if ((value === null || value === void 0 ? void 0 : value.isLink) == true) {
        var _detail$values2;
        return /*#__PURE__*/React.createElement(Row, {
          key: t(value.title),
          label: window.location.href.includes("tl") || window.location.href.includes("ws") ? /*#__PURE__*/React.createElement("div", {
            style: {
              width: "200%"
            }
          }, /*#__PURE__*/React.createElement(Link, {
            to: value === null || value === void 0 ? void 0 : value.to
          }, /*#__PURE__*/React.createElement("span", {
            className: "link",
            style: {
              color: "#a82227"
            }
          }, t(value === null || value === void 0 ? void 0 : value.title)))) : isNocLocation || isBPALocation ? `${t(value.title)}` : t(value.title),
          text: /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Link, {
            to: value === null || value === void 0 ? void 0 : value.to
          }, /*#__PURE__*/React.createElement("span", {
            className: "link",
            style: {
              color: "#a82227"
            }
          }, value === null || value === void 0 ? void 0 : value.value))),
          last: index === (detail === null || detail === void 0 ? void 0 : (_detail$values2 = detail.values) === null || _detail$values2 === void 0 ? void 0 : _detail$values2.length) - 1,
          caption: value.caption,
          className: "border-none",
          rowContainerStyle: getRowStyles(),
          labelStyle: {
            wordBreak: "break-all"
          },
          textStyle: {
            wordBreak: "break-all"
          }
        });
      }
      return /*#__PURE__*/React.createElement("div", null, window.location.href.includes("modify") ? /*#__PURE__*/React.createElement(Row, {
        className: "border-none",
        key: `${value.title}`,
        label: `${t(`${value.title}`)}`,
        privacy: value === null || value === void 0 ? void 0 : value.privacy,
        text: value !== null && value !== void 0 && value.oldValue ? value === null || value === void 0 ? void 0 : value.oldValue : value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : "",
        labelStyle: {
          wordBreak: "break-all"
        },
        textStyle: {
          wordBreak: "break-all"
        }
      }) : /*#__PURE__*/React.createElement(Row, {
        key: t(value.title),
        label: t(value.title),
        text: getTextValue(value),
        last: index === (detail === null || detail === void 0 ? void 0 : (_detail$values3 = detail.values) === null || _detail$values3 === void 0 ? void 0 : _detail$values3.length) - 1,
        caption: value.caption,
        className: "border-none",
        privacy: value === null || value === void 0 ? void 0 : value.privacy,
        rowContainerStyle: getRowStyles(),
        labelStyle: {
          wordBreak: "break-all"
        },
        textStyle: {
          wordBreak: "break-all"
        }
      }));
    })))), (detail === null || detail === void 0 ? void 0 : detail.belowComponent) && /*#__PURE__*/React.createElement(detail.belowComponent, null), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet = detail.additionalDetails) === null || _detail$additionalDet === void 0 ? void 0 : _detail$additionalDet.inspectionReport) && /*#__PURE__*/React.createElement(ScruntinyDetails, {
      scrutinyDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails,
      paymentsList: paymentsList
    }), (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a2 = applicationDetails.applicationData) === null || _applicationDetails$a2 === void 0 ? void 0 : (_applicationDetails$a3 = _applicationDetails$a2.additionalDetails) === null || _applicationDetails$a3 === void 0 ? void 0 : (_applicationDetails$a4 = _applicationDetails$a3.fieldinspection_pending) === null || _applicationDetails$a4 === void 0 ? void 0 : _applicationDetails$a4.length) > 0 && (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet2 = detail.additionalDetails) === null || _detail$additionalDet2 === void 0 ? void 0 : _detail$additionalDet2.fiReport) && /*#__PURE__*/React.createElement(InspectionReport, {
      fiReport: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a5 = applicationDetails.applicationData) === null || _applicationDetails$a5 === void 0 ? void 0 : (_applicationDetails$a6 = _applicationDetails$a5.additionalDetails) === null || _applicationDetails$a6 === void 0 ? void 0 : _applicationDetails$a6.fieldinspection_pending
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet3 = detail.additionalDetails) === null || _detail$additionalDet3 === void 0 ? void 0 : _detail$additionalDet3.floors) && /*#__PURE__*/React.createElement(PropertyFloors, {
      floors: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet4 = detail.additionalDetails) === null || _detail$additionalDet4 === void 0 ? void 0 : _detail$additionalDet4.floors
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet5 = detail.additionalDetails) === null || _detail$additionalDet5 === void 0 ? void 0 : _detail$additionalDet5.owners) && /*#__PURE__*/React.createElement(PropertyOwners, {
      owners: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet6 = detail.additionalDetails) === null || _detail$additionalDet6 === void 0 ? void 0 : _detail$additionalDet6.owners
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet7 = detail.additionalDetails) === null || _detail$additionalDet7 === void 0 ? void 0 : _detail$additionalDet7.units) && /*#__PURE__*/React.createElement(TLTradeUnits, {
      units: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet8 = detail.additionalDetails) === null || _detail$additionalDet8 === void 0 ? void 0 : _detail$additionalDet8.units
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet9 = detail.additionalDetails) === null || _detail$additionalDet9 === void 0 ? void 0 : _detail$additionalDet9.accessories) && /*#__PURE__*/React.createElement(TLTradeAccessories, {
      units: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet10 = detail.additionalDetails) === null || _detail$additionalDet10 === void 0 ? void 0 : _detail$additionalDet10.accessories
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet11 = detail.additionalDetails) === null || _detail$additionalDet11 === void 0 ? void 0 : _detail$additionalDet11.permissions) && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : (_workflowDetails$data2 = _workflowDetails$data.nextActions) === null || _workflowDetails$data2 === void 0 ? void 0 : _workflowDetails$data2.length) > 0 && /*#__PURE__*/React.createElement(PermissionCheck, {
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
      t: t,
      permissions: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet12 = detail.additionalDetails) === null || _detail$additionalDet12 === void 0 ? void 0 : _detail$additionalDet12.permissions
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet13 = detail.additionalDetails) === null || _detail$additionalDet13 === void 0 ? void 0 : _detail$additionalDet13.obpsDocuments) && /*#__PURE__*/React.createElement(BPADocuments, {
      t: t,
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
      docs: detail.additionalDetails.obpsDocuments,
      bpaActionsDetails: workflowDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet14 = detail.additionalDetails) === null || _detail$additionalDet14 === void 0 ? void 0 : _detail$additionalDet14.noc) && /*#__PURE__*/React.createElement(NOCDocuments, {
      t: t,
      isNoc: true,
      NOCdata: detail.values,
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
      docs: detail.additionalDetails.noc,
      noc: (_detail$additionalDet15 = detail.additionalDetails) === null || _detail$additionalDet15 === void 0 ? void 0 : _detail$additionalDet15.data,
      bpaActionsDetails: workflowDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet16 = detail.additionalDetails) === null || _detail$additionalDet16 === void 0 ? void 0 : _detail$additionalDet16.scruntinyDetails) && /*#__PURE__*/React.createElement(ScruntinyDetails, {
      scrutinyDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet17 = detail.additionalDetails) === null || _detail$additionalDet17 === void 0 ? void 0 : _detail$additionalDet17.buildingExtractionDetails) && /*#__PURE__*/React.createElement(ScruntinyDetails, {
      scrutinyDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet18 = detail.additionalDetails) === null || _detail$additionalDet18 === void 0 ? void 0 : _detail$additionalDet18.subOccupancyTableDetails) && /*#__PURE__*/React.createElement(SubOccupancyTable, {
      edcrDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails,
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet19 = detail.additionalDetails) === null || _detail$additionalDet19 === void 0 ? void 0 : _detail$additionalDet19.documentsWithUrl) && /*#__PURE__*/React.createElement(DocumentsPreview, {
      documents: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet20 = detail.additionalDetails) === null || _detail$additionalDet20 === void 0 ? void 0 : _detail$additionalDet20.documentsWithUrl
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet21 = detail.additionalDetails) === null || _detail$additionalDet21 === void 0 ? void 0 : _detail$additionalDet21.documents) && /*#__PURE__*/React.createElement(PropertyDocuments, {
      documents: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet22 = detail.additionalDetails) === null || _detail$additionalDet22 === void 0 ? void 0 : _detail$additionalDet22.documents
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet23 = detail.additionalDetails) === null || _detail$additionalDet23 === void 0 ? void 0 : _detail$additionalDet23.taxHeadEstimatesCalculation) && /*#__PURE__*/React.createElement(PropertyEstimates, {
      taxHeadEstimatesCalculation: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet24 = detail.additionalDetails) === null || _detail$additionalDet24 === void 0 ? void 0 : _detail$additionalDet24.taxHeadEstimatesCalculation
    }), (detail === null || detail === void 0 ? void 0 : detail.isWaterConnectionDetails) && /*#__PURE__*/React.createElement(WSAdditonalDetails, {
      wsAdditionalDetails: detail,
      oldValue: oldValue
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet25 = detail.additionalDetails) === null || _detail$additionalDet25 === void 0 ? void 0 : _detail$additionalDet25.redirectUrl) && /*#__PURE__*/React.createElement("div", {
      style: {
        fontSize: "16px",
        lineHeight: "24px",
        fontWeight: "400",
        padding: "10px 0px"
      }
    }, /*#__PURE__*/React.createElement(Link, {
      to: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet26 = detail.additionalDetails) === null || _detail$additionalDet26 === void 0 ? void 0 : (_detail$additionalDet27 = _detail$additionalDet26.redirectUrl) === null || _detail$additionalDet27 === void 0 ? void 0 : _detail$additionalDet27.url
    }, /*#__PURE__*/React.createElement("span", {
      className: "link",
      style: {
        color: "#a82227"
      }
    }, detail === null || detail === void 0 ? void 0 : (_detail$additionalDet28 = detail.additionalDetails) === null || _detail$additionalDet28 === void 0 ? void 0 : (_detail$additionalDet29 = _detail$additionalDet28.redirectUrl) === null || _detail$additionalDet29 === void 0 ? void 0 : _detail$additionalDet29.title))), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet30 = detail.additionalDetails) === null || _detail$additionalDet30 === void 0 ? void 0 : _detail$additionalDet30.estimationDetails) && /*#__PURE__*/React.createElement(WSFeeEstimation, {
      wsAdditionalDetails: detail,
      workflowDetails: workflowDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet31 = detail.additionalDetails) === null || _detail$additionalDet31 === void 0 ? void 0 : _detail$additionalDet31.estimationDetails) && /*#__PURE__*/React.createElement(ViewBreakup, {
      wsAdditionalDetails: detail,
      workflowDetails: workflowDetails
    }));
  }), showTimeLine && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data3 = workflowDetails.data) === null || _workflowDetails$data3 === void 0 ? void 0 : (_workflowDetails$data4 = _workflowDetails$data3.timeline) === null || _workflowDetails$data4 === void 0 ? void 0 : _workflowDetails$data4.length) > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BreakLine, null), ((workflowDetails === null || workflowDetails === void 0 ? void 0 : workflowDetails.isLoading) || isDataLoading) && /*#__PURE__*/React.createElement(Loader, null), !(workflowDetails !== null && workflowDetails !== void 0 && workflowDetails.isLoading) && !isDataLoading && /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(CardSectionHeader, {
    style: {
      marginBottom: "16px",
      marginTop: "32px"
    }
  }, t("ES_APPLICATION_DETAILS_APPLICATION_TIMELINE")), workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data5 = workflowDetails.data) !== null && _workflowDetails$data5 !== void 0 && _workflowDetails$data5.timeline && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data6 = workflowDetails.data) === null || _workflowDetails$data6 === void 0 ? void 0 : (_workflowDetails$data7 = _workflowDetails$data6.timeline) === null || _workflowDetails$data7 === void 0 ? void 0 : _workflowDetails$data7.length) === 1 ? /*#__PURE__*/React.createElement(CheckPoint, {
    isCompleted: true,
    label: t(`${timelineStatusPrefix}${workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data8 = workflowDetails.data) === null || _workflowDetails$data8 === void 0 ? void 0 : (_workflowDetails$data9 = _workflowDetails$data8.timeline[0]) === null || _workflowDetails$data9 === void 0 ? void 0 : _workflowDetails$data9.state}`),
    customChild: getTimelineCaptions(workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data10 = workflowDetails.data) === null || _workflowDetails$data10 === void 0 ? void 0 : _workflowDetails$data10.timeline[0])
  }) : /*#__PURE__*/React.createElement(ConnectingCheckPoints, null, (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data11 = workflowDetails.data) === null || _workflowDetails$data11 === void 0 ? void 0 : _workflowDetails$data11.timeline) && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data12 = workflowDetails.data) === null || _workflowDetails$data12 === void 0 ? void 0 : _workflowDetails$data12.timeline.map((checkpoint, index, arr) => {
    let timelineStatusPostfix = "";
    if (window.location.href.includes("/obps/")) {
      var _workflowDetails$data13, _workflowDetails$data14, _workflowDetails$data15, _workflowDetails$data16, _workflowDetails$data17, _workflowDetails$data18;
      if (workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data13 = workflowDetails.data) !== null && _workflowDetails$data13 !== void 0 && (_workflowDetails$data14 = _workflowDetails$data13.timeline[index - 1]) !== null && _workflowDetails$data14 !== void 0 && (_workflowDetails$data15 = _workflowDetails$data14.state) !== null && _workflowDetails$data15 !== void 0 && _workflowDetails$data15.includes("BACK_FROM") || workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data16 = workflowDetails.data) !== null && _workflowDetails$data16 !== void 0 && (_workflowDetails$data17 = _workflowDetails$data16.timeline[index - 1]) !== null && _workflowDetails$data17 !== void 0 && (_workflowDetails$data18 = _workflowDetails$data17.state) !== null && _workflowDetails$data18 !== void 0 && _workflowDetails$data18.includes("SEND_TO_CITIZEN")) timelineStatusPostfix = `_NOT_DONE`;else if ((checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.performedAction) === "SEND_TO_ARCHITECT") timelineStatusPostfix = `_BY_ARCHITECT_DONE`;else timelineStatusPostfix = index == 0 ? "" : `_DONE`;
    }
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, /*#__PURE__*/React.createElement(CheckPoint, {
      keyValue: index,
      isCompleted: index === 0,
      info: checkpoint.comment,
      label: t(`${timelineStatusPrefix}${(checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.performedAction) === "REOPEN" ? checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.performedAction : checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint[statusAttribute]}${timelineStatusPostfix}`),
      customChild: getTimelineCaptions(checkpoint, index)
    }));
  }))))));
}

function ApplicationDetailsToast({
  t,
  showToast,
  closeToast,
  businessService
}) {
  var _showToast$error, _showToast$error2, _showToast$error3, _showToast$error4, _showToast$error5, _showToast$error6, _showToast$error7, _showToast$error8, _showToast$action2, _showToast$error9, _showToast$error10, _showToast$error11, _showToast$error12, _showToast$error13, _showToast$error14, _showToast$error15, _showToast$error16, _showToast$action4;
  if (businessService !== null && businessService !== void 0 && businessService.includes("NewTL") || businessService !== null && businessService !== void 0 && businessService.includes("TL") || businessService !== null && businessService !== void 0 && businessService.includes("EDITRENEWAL")) {
    var _showToast$action;
    let label = "";
    switch (showToast === null || showToast === void 0 ? void 0 : (_showToast$action = showToast.action) === null || _showToast$action === void 0 ? void 0 : _showToast$action.action) {
      case "SENDBACK":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error = showToast.error) === null || _showToast$error === void 0 ? void 0 : _showToast$error.message : t("TL_SENDBACK_CHECKLIST_MESSAGE_HEAD");
        break;
      case "FORWARD":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error2 = showToast.error) === null || _showToast$error2 === void 0 ? void 0 : _showToast$error2.message : t("TL_FORWARD_SUCCESS_MESSAGE_MAIN");
        break;
      case "APPROVE":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error3 = showToast.error) === null || _showToast$error3 === void 0 ? void 0 : _showToast$error3.message : t("TL_APPROVAL_CHECKLIST_MESSAGE_HEAD");
        break;
      case "SENDBACKTOCITIZEN":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error4 = showToast.error) === null || _showToast$error4 === void 0 ? void 0 : _showToast$error4.message : t("TL_SENDBACK_TOCITIZEN_CHECKLIST_MESSAGE_HEAD");
        break;
      case "REJECT":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error5 = showToast.error) === null || _showToast$error5 === void 0 ? void 0 : _showToast$error5.message : t("TL_APPROVAL_REJ_MESSAGE_HEAD");
        break;
      case "RESUBMIT":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error6 = showToast.error) === null || _showToast$error6 === void 0 ? void 0 : _showToast$error6.message : t("TL_APPLICATION_RESUBMIT_SUCCESS_MESSAGE_MAIN");
        break;
      case "CANCEL":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error7 = showToast.error) === null || _showToast$error7 === void 0 ? void 0 : _showToast$error7.message : t("TL_TL_CANCELLED_MESSAGE_HEAD");
        break;
      default:
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error8 = showToast.error) === null || _showToast$error8 === void 0 ? void 0 : _showToast$error8.message : t(`ES_${businessService}_${showToast === null || showToast === void 0 ? void 0 : (_showToast$action2 = showToast.action) === null || _showToast$action2 === void 0 ? void 0 : _showToast$action2.action}_UPDATE_SUCCESS`);
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, showToast && /*#__PURE__*/React.createElement(Toast, {
      error: showToast.key === "error",
      label: label,
      onClose: closeToast
    }));
  } else if (businessService !== null && businessService !== void 0 && businessService.includes("BPA") || businessService !== null && businessService !== void 0 && businessService.includes("BPA_LOW") || businessService !== null && businessService !== void 0 && businessService.includes("BPA_OC")) {
    var _showToast$action3;
    const getMessage = (messages = []) => {
      let returnValue = messages[0];
      if ((messages === null || messages === void 0 ? void 0 : messages.length) == 2) returnValue = businessService !== null && businessService !== void 0 && businessService.includes("BPA_OC") ? t(messages[1]) : t(messages[0]);else returnValue = t(messages[0]);
      return returnValue;
    };
    let label = "";
    switch (showToast === null || showToast === void 0 ? void 0 : (_showToast$action3 = showToast.action) === null || _showToast$action3 === void 0 ? void 0 : _showToast$action3.action) {
      case "REVOCATE":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error9 = showToast.error) === null || _showToast$error9 === void 0 ? void 0 : _showToast$error9.message : getMessage(["BPA_APPROVAL_REVOCATED_MESSAGE_HEAD", "BPA_APPROVAL_OC_REVOCATED_MESSAGE_HEAD"]);
        break;
      case "VERIFY_AND_FORWARD":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error10 = showToast.error) === null || _showToast$error10 === void 0 ? void 0 : _showToast$error10.message : getMessage(["BPA_FORWARD_SUCCESS_MESSAGE_MAIN"]);
        break;
      case "SEND_BACK_TO_CITIZEN":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error11 = showToast.error) === null || _showToast$error11 === void 0 ? void 0 : _showToast$error11.message : getMessage(["BPA_SENDBACK_SUCCESS_MESSAGE_MAIN"]);
        break;
      case "APPROVE":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error12 = showToast.error) === null || _showToast$error12 === void 0 ? void 0 : _showToast$error12.message : getMessage(["BPA_APPROVAL_CHECKLIST_MESSAGE_HEAD"]);
        break;
      case "REJECT":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error13 = showToast.error) === null || _showToast$error13 === void 0 ? void 0 : _showToast$error13.message : getMessage(["BPA_APPROVAL_REJECTED_MESSAGE_HEAD", "BPA_OC_APPROVAL_REJECTED_MESSAGE_HEAD"]);
        break;
      case "FORWARD":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error14 = showToast.error) === null || _showToast$error14 === void 0 ? void 0 : _showToast$error14.message : getMessage(["BPA_FORWARD_SUCCESS_MESSAGE_MAIN"]);
        break;
      case "SEND_BACK_FOR_DOCUMENT_VERIFICATION":
      case "SEND_BACK_FOR_FIELD_INSPECTION":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error15 = showToast.error) === null || _showToast$error15 === void 0 ? void 0 : _showToast$error15.message : getMessage(["BPA_SENDBACK_SUCCESS_MESSAGE_MAIN"]);
        break;
      default:
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error16 = showToast.error) === null || _showToast$error16 === void 0 ? void 0 : _showToast$error16.message : t(`ES_${businessService}_${showToast === null || showToast === void 0 ? void 0 : (_showToast$action4 = showToast.action) === null || _showToast$action4 === void 0 ? void 0 : _showToast$action4.action}_UPDATE_SUCCESS`);
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, showToast && /*#__PURE__*/React.createElement(Toast, {
      error: showToast.key === "error",
      label: label,
      onClose: closeToast
    }));
  } else {
    var _showToast$error17, _showToast$action5;
    const label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error17 = showToast.error) === null || _showToast$error17 === void 0 ? void 0 : _showToast$error17.message : `ES_${businessService}_${showToast === null || showToast === void 0 ? void 0 : (_showToast$action5 = showToast.action) === null || _showToast$action5 === void 0 ? void 0 : _showToast$action5.action}_UPDATE_SUCCESS`;
    return /*#__PURE__*/React.createElement(React.Fragment, null, showToast && /*#__PURE__*/React.createElement(Toast, {
      error: showToast.key === "error",
      label: t(label),
      onClose: closeToast
    }));
  }
}

function ApplicationDetailsActionBar({
  workflowDetails,
  displayMenu,
  onActionSelect,
  setDisplayMenu,
  businessService,
  forcedActionPrefix,
  ActionBarStyle = {},
  MenuStyle = {}
}) {
  var _user, _user$info, _user$info$roles, _workflowDetails$data, _workflowDetails$data2, _workflowDetails$data3, _workflowDetails$data4, _workflowDetails$data5, _actions$, _actions$$redirection, _workflowDetails$data6, _workflowDetails$data7, _workflowDetails$data8, _actions$2, _actions$3, _actions$4;
  const {
    t
  } = useTranslation();
  let user = Digit.UserService.getUser();
  const menuRef = useRef();
  if (window.location.href.includes("/obps") || window.location.href.includes("/noc")) {
    const userInfos = sessionStorage.getItem("Digit.citizen.userRequestObject");
    const userInfo = userInfos ? JSON.parse(userInfos) : {};
    user = userInfo === null || userInfo === void 0 ? void 0 : userInfo.value;
  }
  const userRoles = (_user = user) === null || _user === void 0 ? void 0 : (_user$info = _user.info) === null || _user$info === void 0 ? void 0 : (_user$info$roles = _user$info.roles) === null || _user$info$roles === void 0 ? void 0 : _user$info$roles.map(e => e.code);
  let isSingleButton = false;
  let isMenuBotton = false;
  let actions = (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : (_workflowDetails$data2 = _workflowDetails$data.actionState) === null || _workflowDetails$data2 === void 0 ? void 0 : (_workflowDetails$data3 = _workflowDetails$data2.nextActions) === null || _workflowDetails$data3 === void 0 ? void 0 : _workflowDetails$data3.filter(e => {
    return (userRoles === null || userRoles === void 0 ? void 0 : userRoles.some(role => {
      var _e$roles;
      return (_e$roles = e.roles) === null || _e$roles === void 0 ? void 0 : _e$roles.includes(role);
    })) || !e.roles;
  })) || (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data4 = workflowDetails.data) === null || _workflowDetails$data4 === void 0 ? void 0 : (_workflowDetails$data5 = _workflowDetails$data4.nextActions) === null || _workflowDetails$data5 === void 0 ? void 0 : _workflowDetails$data5.filter(e => {
    return (userRoles === null || userRoles === void 0 ? void 0 : userRoles.some(role => {
      var _e$roles2;
      return (_e$roles2 = e.roles) === null || _e$roles2 === void 0 ? void 0 : _e$roles2.includes(role);
    })) || !e.roles;
  }));
  const closeMenu = () => {
    setDisplayMenu(false);
  };
  Digit.Hooks.useClickOutside(menuRef, closeMenu, displayMenu);
  if ((window.location.href.includes("/obps") || window.location.href.includes("/noc")) && (actions === null || actions === void 0 ? void 0 : actions.length) == 1 || actions !== null && actions !== void 0 && (_actions$ = actions[0]) !== null && _actions$ !== void 0 && (_actions$$redirection = _actions$.redirectionUrl) !== null && _actions$$redirection !== void 0 && _actions$$redirection.pathname.includes("/pt/property-details/") && (actions === null || actions === void 0 ? void 0 : actions.length) == 1) {
    isMenuBotton = false;
    isSingleButton = true;
  } else if ((actions === null || actions === void 0 ? void 0 : actions.length) > 0) {
    isMenuBotton = true;
    isSingleButton = false;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, !(workflowDetails !== null && workflowDetails !== void 0 && workflowDetails.isLoading) && isMenuBotton && !isSingleButton && /*#__PURE__*/React.createElement(ActionBar, {
    style: {
      ...ActionBarStyle
    }
  }, displayMenu && (workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data6 = workflowDetails.data) !== null && _workflowDetails$data6 !== void 0 && (_workflowDetails$data7 = _workflowDetails$data6.actionState) !== null && _workflowDetails$data7 !== void 0 && _workflowDetails$data7.nextActions || workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data8 = workflowDetails.data) !== null && _workflowDetails$data8 !== void 0 && _workflowDetails$data8.nextActions) ? /*#__PURE__*/React.createElement(Menu, {
    localeKeyPrefix: forcedActionPrefix || `WF_EMPLOYEE_${businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()}`,
    options: actions,
    optionKey: "action",
    t: t,
    onSelect: onActionSelect,
    style: MenuStyle
  }) : null, /*#__PURE__*/React.createElement(SubmitBar, {
    ref: menuRef,
    label: t("WF_TAKE_ACTION"),
    onSubmit: () => setDisplayMenu(!displayMenu)
  })), !(workflowDetails !== null && workflowDetails !== void 0 && workflowDetails.isLoading) && !isMenuBotton && isSingleButton && /*#__PURE__*/React.createElement(ActionBar, {
    style: {
      ...ActionBarStyle
    }
  }, /*#__PURE__*/React.createElement("button", {
    style: {
      color: "#FFFFFF",
      fontSize: "18px"
    },
    className: "submit-bar",
    name: actions === null || actions === void 0 ? void 0 : (_actions$2 = actions[0]) === null || _actions$2 === void 0 ? void 0 : _actions$2.action,
    value: actions === null || actions === void 0 ? void 0 : (_actions$3 = actions[0]) === null || _actions$3 === void 0 ? void 0 : _actions$3.action,
    onClick: e => {
      onActionSelect((actions === null || actions === void 0 ? void 0 : actions[0]) || {});
    }
  }, t(`${forcedActionPrefix || `WF_EMPLOYEE_${businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()}`}_${actions === null || actions === void 0 ? void 0 : (_actions$4 = actions[0]) === null || _actions$4 === void 0 ? void 0 : _actions$4.action}`))));
}

const Close$6 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$6 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$6, null));
};
function ApplicationDetailsWarningPopup({
  action,
  workflowDetails,
  businessService,
  isWarningPop,
  closeWarningPopup
}) {
  const {
    t
  } = useTranslation();
  const isMobile = window.Digit.Utils.browser.isMobile();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement("h1", {
      className: "heading-m"
    }, t("PT_DUES_ARE_PENDING")),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$6, {
      onClick: () => {
        closeWarningPopup();
      }
    }),
    hideSubmit: true,
    isDisabled: false,
    popupStyles: isMobile ? {} : {
      width: "29%",
      marginTop: "auto"
    }
  }, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: "30px"
    }
  }, /*#__PURE__*/React.createElement("h1", null, t("PT_YOU_HAVE"), " \u20B9", action === null || action === void 0 ? void 0 : action.AmountDueForPay, " ", t("PT_DUE_WARNING_MSG2"))), /*#__PURE__*/React.createElement(Row, {
    rowContainerStyle: {
      display: "flex"
    },
    labelStyle: {
      fontSize: "24px",
      fontWeight: "700",
      marginRight: "10%"
    },
    textStyle: {
      fontSize: "24px",
      fontWeight: "700",
      marginBottom: "20px"
    },
    label: `${t("PT_AMOUNT_DUE")}`,
    text: `₹${t(action === null || action === void 0 ? void 0 : action.AmountDueForPay)}`
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      width: "100%",
      display: "flex",
      justifyContent: "flex-end"
    }
  }, /*#__PURE__*/React.createElement(ButtonSelector, {
    theme: "border",
    label: t('ES_PT_COMMON_CANCEL'),
    onSubmit: closeWarningPopup,
    style: {
      marginLeft: "10px"
    }
  }), /*#__PURE__*/React.createElement(ButtonSelector, {
    label: t('PT_COLLECT'),
    onSubmit: () => {
      var _action$redirectionUr;
      return window.location.assign(`${window.location.origin}${action === null || action === void 0 ? void 0 : (_action$redirectionUr = action.redirectionUrl) === null || _action$redirectionUr === void 0 ? void 0 : _action$redirectionUr.pathname}`);
    },
    style: {
      marginLeft: "10px"
    }
  })))), ")");
}

const ApplicationDetails = props => {
  var _workflowDetails$data;
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const state = Digit.ULBService.getStateId();
  const {
    t
  } = useTranslation();
  const history = useHistory();
  let {
    id: applicationNumber
  } = useParams();
  const [displayMenu, setDisplayMenu] = useState(false);
  const [selectedAction, setSelectedAction] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [isEnableLoader, setIsEnableLoader] = useState(false);
  const [isWarningPop, setWarningPopUp] = useState(false);
  const {
    applicationDetails,
    showToast,
    setShowToast,
    isLoading,
    isDataLoading,
    applicationData,
    mutate,
    nocMutation,
    workflowDetails,
    businessService,
    closeToast,
    moduleCode,
    timelineStatusPrefix,
    forcedActionPrefix,
    statusAttribute,
    ActionBarStyle,
    MenuStyle,
    paymentsList,
    showTimeLine = true,
    oldValue,
    isInfoLabel = false,
    clearDataDetails
  } = props;
  useEffect(() => {
    if (showToast) {
      workflowDetails.revalidate();
    }
  }, [showToast]);
  function onActionSelect(action) {
    if (action) {
      if (action !== null && action !== void 0 && action.isToast) {
        setShowToast({
          key: "error",
          error: {
            message: action === null || action === void 0 ? void 0 : action.toastMessage
          }
        });
        setTimeout(closeToast, 5000);
      } else if (action !== null && action !== void 0 && action.isWarningPopUp) {
        setWarningPopUp(true);
      } else if (action !== null && action !== void 0 && action.redirectionUrll) {
        var _action$redirectionUr, _action$redirectionUr4;
        if ((action === null || action === void 0 ? void 0 : (_action$redirectionUr = action.redirectionUrll) === null || _action$redirectionUr === void 0 ? void 0 : _action$redirectionUr.action) === "ACTIVATE_CONNECTION") {
          var _action$redirectionUr2, _action$redirectionUr3, _location;
          history.push(`${action === null || action === void 0 ? void 0 : (_action$redirectionUr2 = action.redirectionUrll) === null || _action$redirectionUr2 === void 0 ? void 0 : _action$redirectionUr2.pathname}`, JSON.stringify({
            data: action === null || action === void 0 ? void 0 : (_action$redirectionUr3 = action.redirectionUrll) === null || _action$redirectionUr3 === void 0 ? void 0 : _action$redirectionUr3.state,
            url: `${(_location = location) === null || _location === void 0 ? void 0 : _location.pathname}${location.search}`
          }));
        } else if ((action === null || action === void 0 ? void 0 : (_action$redirectionUr4 = action.redirectionUrll) === null || _action$redirectionUr4 === void 0 ? void 0 : _action$redirectionUr4.action) === "RE-SUBMIT-APPLICATION") {
          var _action$redirectionUr5, _action$redirectionUr6;
          history.push(`${action === null || action === void 0 ? void 0 : (_action$redirectionUr5 = action.redirectionUrll) === null || _action$redirectionUr5 === void 0 ? void 0 : _action$redirectionUr5.pathname}`, {
            data: action === null || action === void 0 ? void 0 : (_action$redirectionUr6 = action.redirectionUrll) === null || _action$redirectionUr6 === void 0 ? void 0 : _action$redirectionUr6.state
          });
        } else {
          var _action$redirectionUr7;
          window.location.assign(`${window.location.origin}/digit-ui/employee/payment/collect/${action === null || action === void 0 ? void 0 : (_action$redirectionUr7 = action.redirectionUrll) === null || _action$redirectionUr7 === void 0 ? void 0 : _action$redirectionUr7.pathname}`);
        }
      } else if (!(action !== null && action !== void 0 && action.redirectionUrl)) {
        setShowModal(true);
      } else {
        var _action$redirectionUr8, _action$redirectionUr9;
        history.push({
          pathname: (_action$redirectionUr8 = action.redirectionUrl) === null || _action$redirectionUr8 === void 0 ? void 0 : _action$redirectionUr8.pathname,
          state: {
            ...((_action$redirectionUr9 = action.redirectionUrl) === null || _action$redirectionUr9 === void 0 ? void 0 : _action$redirectionUr9.state)
          }
        });
      }
    }
    setSelectedAction(action);
    setDisplayMenu(false);
  }
  const queryClient = useQueryClient();
  const closeModal = () => {
    setSelectedAction(null);
    setShowModal(false);
  };
  const closeWarningPopup = () => {
    setWarningPopUp(false);
  };
  const submitAction = async (data, nocData = false, isOBPS = {}) => {
    setIsEnableLoader(true);
    if (typeof (data === null || data === void 0 ? void 0 : data.customFunctionToExecute) === "function") {
      data === null || data === void 0 ? void 0 : data.customFunctionToExecute({
        ...data
      });
    }
    if (nocData !== false && nocMutation) {
      const nocPrmomises = nocData === null || nocData === void 0 ? void 0 : nocData.map(noc => {
        return nocMutation === null || nocMutation === void 0 ? void 0 : nocMutation.mutateAsync(noc);
      });
      try {
        setIsEnableLoader(true);
        const values = await Promise.all(nocPrmomises);
        values && values.map(ob => {
          var _ob$Noc, _ob$Noc$;
          Digit.SessionStorage.del(ob === null || ob === void 0 ? void 0 : (_ob$Noc = ob.Noc) === null || _ob$Noc === void 0 ? void 0 : (_ob$Noc$ = _ob$Noc[0]) === null || _ob$Noc$ === void 0 ? void 0 : _ob$Noc$.nocType);
        });
      } catch (err) {
        var _err$response, _err$response$data, _err$response$data$Er, _err$response$data$Er2, _err$response2, _err$response2$data, _err$response2$data$E, _err$response2$data$E2, _err$response3, _err$response3$data, _err$response3$data$E, _err$response3$data$E2;
        setIsEnableLoader(false);
        let errorValue = err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && (_err$response$data$Er = _err$response$data.Errors) !== null && _err$response$data$Er !== void 0 && (_err$response$data$Er2 = _err$response$data$Er[0]) !== null && _err$response$data$Er2 !== void 0 && _err$response$data$Er2.code ? t(err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : (_err$response2$data$E = _err$response2$data.Errors) === null || _err$response2$data$E === void 0 ? void 0 : (_err$response2$data$E2 = _err$response2$data$E[0]) === null || _err$response2$data$E2 === void 0 ? void 0 : _err$response2$data$E2.code) : (err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : (_err$response3$data$E = _err$response3$data.Errors) === null || _err$response3$data$E === void 0 ? void 0 : (_err$response3$data$E2 = _err$response3$data$E[0]) === null || _err$response3$data$E2 === void 0 ? void 0 : _err$response3$data$E2.message) || err;
        closeModal();
        setShowToast({
          key: "error",
          error: {
            message: errorValue
          }
        });
        setTimeout(closeToast, 5000);
        return;
      }
    }
    if (mutate) {
      setIsEnableLoader(true);
      mutate(data, {
        onError: (error, variables) => {
          setIsEnableLoader(false);
          setShowToast({
            key: "error",
            error
          });
          setTimeout(closeToast, 5000);
        },
        onSuccess: (data, variables) => {
          var _data$Amendments;
          sessionStorage.removeItem("WS_SESSION_APPLICATION_DETAILS");
          setIsEnableLoader(false);
          if (isOBPS !== null && isOBPS !== void 0 && isOBPS.bpa) {
            data.selectedAction = selectedAction;
            history.replace(`/digit-ui/employee/obps/response`, {
              data: data
            });
          }
          if (isOBPS !== null && isOBPS !== void 0 && isOBPS.isStakeholder) {
            data.selectedAction = selectedAction;
            history.push(`/digit-ui/employee/obps/stakeholder-response`, {
              data: data
            });
          }
          if (isOBPS !== null && isOBPS !== void 0 && isOBPS.isNoc) {
            history.push(`/digit-ui/employee/noc/response`, {
              data: data
            });
          }
          if ((data === null || data === void 0 ? void 0 : (_data$Amendments = data.Amendments) === null || _data$Amendments === void 0 ? void 0 : _data$Amendments.length) > 0) {
            var _variables$AmendmentU, _variables$AmendmentU2, _variables$AmendmentU3, _variables$AmendmentU4, _variables$AmendmentU5, _variables$AmendmentU6, _variables$AmendmentU7, _variables$AmendmentU8;
            if (variables !== null && variables !== void 0 && (_variables$AmendmentU = variables.AmendmentUpdate) !== null && _variables$AmendmentU !== void 0 && (_variables$AmendmentU2 = _variables$AmendmentU.workflow) !== null && _variables$AmendmentU2 !== void 0 && _variables$AmendmentU2.action.includes("SEND_BACK")) {
              setShowToast({
                key: "success",
                label: t("ES_MODIFYSWCONNECTION_SEND_BACK_UPDATE_SUCCESS")
              });
            } else if (variables !== null && variables !== void 0 && (_variables$AmendmentU3 = variables.AmendmentUpdate) !== null && _variables$AmendmentU3 !== void 0 && (_variables$AmendmentU4 = _variables$AmendmentU3.workflow) !== null && _variables$AmendmentU4 !== void 0 && _variables$AmendmentU4.action.includes("RE-SUBMIT")) {
              setShowToast({
                key: "success",
                label: t("ES_MODIFYSWCONNECTION_RE_SUBMIT_UPDATE_SUCCESS")
              });
            } else if (variables !== null && variables !== void 0 && (_variables$AmendmentU5 = variables.AmendmentUpdate) !== null && _variables$AmendmentU5 !== void 0 && (_variables$AmendmentU6 = _variables$AmendmentU5.workflow) !== null && _variables$AmendmentU6 !== void 0 && _variables$AmendmentU6.action.includes("APPROVE")) {
              setShowToast({
                key: "success",
                label: t("ES_MODIFYSWCONNECTION_APPROVE_UPDATE_SUCCESS")
              });
            } else if (variables !== null && variables !== void 0 && (_variables$AmendmentU7 = variables.AmendmentUpdate) !== null && _variables$AmendmentU7 !== void 0 && (_variables$AmendmentU8 = _variables$AmendmentU7.workflow) !== null && _variables$AmendmentU8 !== void 0 && _variables$AmendmentU8.action.includes("REJECT")) {
              setShowToast({
                key: "success",
                label: t("ES_MODIFYWSCONNECTION_REJECT_UPDATE_SUCCESS")
              });
            }
            return;
          }
          setShowToast({
            key: "success",
            action: selectedAction
          });
          clearDataDetails && setTimeout(clearDataDetails, 3000);
          setTimeout(closeToast, 5000);
          queryClient.clear();
          queryClient.refetchQueries("APPLICATION_SEARCH");
        }
      });
    }
    closeModal();
  };
  if (isLoading || isEnableLoader) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isLoading ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ApplicationDetailsContent, {
    applicationDetails: applicationDetails,
    workflowDetails: workflowDetails,
    isDataLoading: isDataLoading,
    applicationData: applicationData,
    businessService: businessService,
    timelineStatusPrefix: timelineStatusPrefix,
    statusAttribute: statusAttribute,
    paymentsList: paymentsList,
    showTimeLine: showTimeLine,
    oldValue: oldValue,
    isInfoLabel: isInfoLabel
  }), showModal ? /*#__PURE__*/React.createElement(ActionModal$6, {
    t: t,
    action: selectedAction,
    tenantId: tenantId,
    state: state,
    id: applicationNumber,
    applicationDetails: applicationDetails,
    applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
    closeModal: closeModal,
    submitAction: submitAction,
    actionData: workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : _workflowDetails$data.timeline,
    businessService: businessService,
    workflowDetails: workflowDetails,
    moduleCode: moduleCode
  }) : null, isWarningPop ? /*#__PURE__*/React.createElement(ApplicationDetailsWarningPopup, {
    action: selectedAction,
    workflowDetails: workflowDetails,
    businessService: businessService,
    isWarningPop: isWarningPop,
    closeWarningPopup: closeWarningPopup
  }) : null, /*#__PURE__*/React.createElement(ApplicationDetailsToast, {
    t: t,
    showToast: showToast,
    closeToast: closeToast,
    businessService: businessService
  }), /*#__PURE__*/React.createElement(ApplicationDetailsActionBar, {
    workflowDetails: workflowDetails,
    displayMenu: displayMenu,
    onActionSelect: onActionSelect,
    setDisplayMenu: setDisplayMenu,
    businessService: businessService,
    forcedActionPrefix: forcedActionPrefix,
    ActionBarStyle: ActionBarStyle,
    MenuStyle: MenuStyle
  })) : /*#__PURE__*/React.createElement(Loader, null));
};

const MutationApplicationDetails = ({
  propertyId,
  acknowledgementIds,
  workflowDetails,
  mutate
}) => {
  var _property$additionalD, _data$Properties2, _data$Properties2$, _data$Properties3, _data$Properties3$, _property$address, _property$address2, _property$address3, _property$address3$lo, _property$address4, _property$address5, _property$additionalD3, _property$additionalD4, _property$additionalD5, _property$additionalD6, _property$additionalD7, _property$additionalD8, _property$additionalD9, _workflowDetails$data;
  const {
    t
  } = useTranslation();
  const [displayMenu, setDisplayMenu] = useState(false);
  const [showOptions, setShowOptions] = useState(false);
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const state = Digit.ULBService.getStateId();
  const {
    data: storeData
  } = Digit.Hooks.useStore.getInitData();
  const {
    tenants
  } = storeData || {};
  const [businessService, setBusinessService] = useState("PT.MUTATION");
  const history = useHistory();
  const [isEnableLoader, setIsEnableLoader] = useState(false);
  const {
    isLoading,
    isError,
    error,
    data
  } = Digit.Hooks.pt.usePropertySearch({
    filters: {
      acknowledgementIds
    },
    tenantId
  }, {
    filters: {
      acknowledgementIds
    },
    tenantId
  });
  const [billAmount, setBillAmount] = useState(null);
  const [billStatus, setBillStatus] = useState(null);
  const properties = get_1(data, "Properties", []);
  let property = properties && properties.length > 0 && properties[0] || {};
  const application = property;
  sessionStorage.setItem("pt-property", JSON.stringify(application));
  const queryClient = useQueryClient();
  const {
    isLoading: auditDataLoading,
    isError: isAuditError,
    data: auditResponse
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds: propertyId,
      audit: true
    }
  }, {
    enabled: true
  });
  const {
    data: reciept_data,
    isLoading: recieptDataLoading
  } = Digit.Hooks.useRecieptSearch({
    tenantId: tenantId,
    businessService: "PT.MUTATION",
    consumerCodes: acknowledgementIds,
    isEmployee: true
  }, {
    enabled: acknowledgementIds ? true : false
  });
  const [appDetailsToShow, setAppDetailsToShow] = useState({});
  const [showModal, setShowModal] = useState(false);
  const [selectedAction, setSelectedAction] = useState(null);
  const {
    isLoading: isLoadingApplicationDetails,
    isError: isErrorApplicationDetails,
    data: applicationDetails,
    error: errorApplicationDetails
  } = Digit.Hooks.pt.useApplicationDetail(t, tenantId, propertyId);
  useEffect(async () => {
    if (acknowledgementIds) {
      const res = await Digit.PaymentService.searchBill(tenantId, {
        Service: businessService,
        consumerCode: acknowledgementIds
      });
      if (!res.Bill.length) {
        var _res1$acknowledgement;
        const res1 = await Digit.PTService.ptCalculateMutation({
          Property: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData
        }, tenantId);
        setBillAmount((res1 === null || res1 === void 0 ? void 0 : (_res1$acknowledgement = res1[acknowledgementIds]) === null || _res1$acknowledgement === void 0 ? void 0 : _res1$acknowledgement.totalAmount) || t("CS_NA"));
        setBillStatus(t(`PT_MUT_BILL_ACTIVE`));
      } else {
        var _res$Bill$, _res$Bill$2, _res$Bill$2$status;
        setBillAmount((res === null || res === void 0 ? void 0 : (_res$Bill$ = res.Bill[0]) === null || _res$Bill$ === void 0 ? void 0 : _res$Bill$.totalAmount) || t("CS_NA"));
        setBillStatus(t(`PT_MUT_BILL_${res === null || res === void 0 ? void 0 : (_res$Bill$2 = res.Bill[0]) === null || _res$Bill$2 === void 0 ? void 0 : (_res$Bill$2$status = _res$Bill$2.status) === null || _res$Bill$2$status === void 0 ? void 0 : _res$Bill$2$status.toUpperCase()}`));
      }
    }
  }, [tenantId, acknowledgementIds, businessService]);
  useEffect(() => {
    showTransfererDetails();
  }, [auditResponse, applicationDetails, appDetailsToShow]);
  useEffect(() => {
    if (applicationDetails) {
      setAppDetailsToShow(lodash.cloneDeep(applicationDetails));
    }
  }, [applicationDetails]);
  const showTransfererDetails = () => {
    var _applicationDetails$a, _applicationDetails$a2;
    if (auditResponse && Object.keys(appDetailsToShow).length && (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a = applicationDetails.applicationData) === null || _applicationDetails$a === void 0 ? void 0 : _applicationDetails$a.status) !== "ACTIVE" && (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a2 = applicationDetails.applicationData) === null || _applicationDetails$a2 === void 0 ? void 0 : _applicationDetails$a2.creationReason) === "MUTATION" && !(appDetailsToShow !== null && appDetailsToShow !== void 0 && appDetailsToShow.applicationDetails.find(e => e.title === "PT_MUTATION_TRANSFEROR_DETAILS"))) {
      var _appDetailsToShow$app;
      let applicationDetails = (_appDetailsToShow$app = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app === void 0 ? void 0 : _appDetailsToShow$app.filter(e => e.title === "PT_OWNERSHIP_INFO_SUB_HEADER");
      let compConfig = newConfigMutate.reduce((acc, el) => [...acc, ...el.body], []).find(e => e.component === "TransfererDetails");
      applicationDetails.unshift({
        title: "PT_MUTATION_TRANSFEROR_DETAILS",
        belowComponent: () => /*#__PURE__*/React.createElement(TransfererDetails, {
          userType: "employee",
          formData: {
            originalData: auditResponse[0]
          },
          config: compConfig
        })
      });
      setAppDetailsToShow({
        ...appDetailsToShow,
        applicationDetails
      });
    }
  };
  const submitAction = async (data, nocData = false, isOBPS = {}) => {
    setIsEnableLoader(true);
    if (typeof (data === null || data === void 0 ? void 0 : data.customFunctionToExecute) === "function") {
      data === null || data === void 0 ? void 0 : data.customFunctionToExecute({
        ...data
      });
    }
    if (nocData !== false && nocMutation) {
      const nocPrmomises = nocData === null || nocData === void 0 ? void 0 : nocData.map(noc => {
        var _nocMutation;
        return (_nocMutation = nocMutation) === null || _nocMutation === void 0 ? void 0 : _nocMutation.mutateAsync(noc);
      });
      try {
        setIsEnableLoader(true);
        const values = await Promise.all(nocPrmomises);
        values && values.map(ob => {
          var _ob$Noc, _ob$Noc$;
          Digit.SessionStorage.del(ob === null || ob === void 0 ? void 0 : (_ob$Noc = ob.Noc) === null || _ob$Noc === void 0 ? void 0 : (_ob$Noc$ = _ob$Noc[0]) === null || _ob$Noc$ === void 0 ? void 0 : _ob$Noc$.nocType);
        });
      } catch (err) {
        var _err$response, _err$response$data, _err$response$data$Er, _err$response$data$Er2, _err$response2, _err$response2$data, _err$response2$data$E, _err$response2$data$E2, _err$response3, _err$response3$data, _err$response3$data$E, _err$response3$data$E2;
        setIsEnableLoader(false);
        let errorValue = err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && (_err$response$data$Er = _err$response$data.Errors) !== null && _err$response$data$Er !== void 0 && (_err$response$data$Er2 = _err$response$data$Er[0]) !== null && _err$response$data$Er2 !== void 0 && _err$response$data$Er2.code ? t(err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : (_err$response2$data$E = _err$response2$data.Errors) === null || _err$response2$data$E === void 0 ? void 0 : (_err$response2$data$E2 = _err$response2$data$E[0]) === null || _err$response2$data$E2 === void 0 ? void 0 : _err$response2$data$E2.code) : (err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : (_err$response3$data$E = _err$response3$data.Errors) === null || _err$response3$data$E === void 0 ? void 0 : (_err$response3$data$E2 = _err$response3$data$E[0]) === null || _err$response3$data$E2 === void 0 ? void 0 : _err$response3$data$E2.message) || err;
        closeModal();
        setShowToast({
          key: "error",
          error: {
            message: errorValue
          }
        });
        setTimeout(closeToast, 5000);
        return;
      }
    }
    if (mutate) {
      setIsEnableLoader(true);
      mutate(data, {
        onError: (error, variables) => {
          setIsEnableLoader(false);
          setShowToast({
            key: "error",
            error
          });
          setTimeout(closeToast, 5000);
        },
        onSuccess: (data, variables) => {
          setIsEnableLoader(false);
          if (isOBPS !== null && isOBPS !== void 0 && isOBPS.bpa) {
            data.selectedAction = selectedAction;
            history.replace(`/digit-ui/employee/obps/response`, {
              data: data
            });
          }
          if (isOBPS !== null && isOBPS !== void 0 && isOBPS.isStakeholder) {
            data.selectedAction = selectedAction;
            history.push(`/digit-ui/employee/obps/stakeholder-response`, {
              data: data
            });
          }
          if (isOBPS !== null && isOBPS !== void 0 && isOBPS.isNoc) {
            history.push(`/digit-ui/employee/noc/response`, {
              data: data
            });
          }
          queryClient.clear();
          queryClient.refetchQueries("APPLICATION_SEARCH");
        }
      });
    }
    closeModal();
  };
  async function getRecieptSearch({
    tenantId,
    payments,
    ...params
  }) {
    var _response;
    let response = {
      filestoreIds: [payments === null || payments === void 0 ? void 0 : payments.fileStoreId]
    };
    response = await Digit.PaymentService.generatePdf(tenantId, {
      Payments: [{
        ...payments
      }]
    }, "consolidatedreceipt");
    const fileStore = await Digit.PaymentService.printReciept(tenantId, {
      fileStoreIds: response.filestoreIds[0]
    });
    window.open(fileStore[(_response = response) === null || _response === void 0 ? void 0 : _response.filestoreIds[0]], "_blank");
  }
  const closeModal = () => {
    setSelectedAction(null);
    setShowModal(false);
  };
  function onActionSelect(action) {
    if (action) {
      if (action !== null && action !== void 0 && action.redirectionUrll) {
        var _action$redirectionUr;
        window.location.assign(`${window.location.origin}/digit-ui/employee/payment/collect/${action === null || action === void 0 ? void 0 : (_action$redirectionUr = action.redirectionUrll) === null || _action$redirectionUr === void 0 ? void 0 : _action$redirectionUr.pathname}`);
      } else if (!(action !== null && action !== void 0 && action.redirectionUrl)) {
        setShowModal(true);
      } else {
        var _action$redirectionUr2, _action$redirectionUr3;
        history.push({
          pathname: (_action$redirectionUr2 = action.redirectionUrl) === null || _action$redirectionUr2 === void 0 ? void 0 : _action$redirectionUr2.pathname,
          state: {
            ...((_action$redirectionUr3 = action.redirectionUrl) === null || _action$redirectionUr3 === void 0 ? void 0 : _action$redirectionUr3.state)
          }
        });
      }
    }
    setSelectedAction(action);
    setDisplayMenu(false);
  }
  if (!property.workflow) {
    let workflow = {
      id: null,
      tenantId: tenantId,
      businessService: "PT.MUTATION",
      businessId: application === null || application === void 0 ? void 0 : application.acknowldgementNumber,
      action: "",
      moduleName: "PT",
      state: null,
      comment: null,
      documents: null,
      assignes: null
    };
    property.workflow = workflow;
  }
  if (property && property.owners && property.owners.length > 0) {
    let ownersTemp = [];
    let _owners = [];
    property.owners.map(owner => {
      owner.documentUid = owner.documents ? owner.documents[0].documentUid : "NA";
      owner.documentType = owner.documents ? owner.documents[0].documentType : "NA";
      if (owner.status == "ACTIVE") {
        ownersTemp.push(owner);
      } else {
        _owners.push(owner);
      }
    });
    property.ownersInit = _owners;
    property.ownersTemp = ownersTemp;
  }
  property.ownershipCategoryTemp = property.ownershipCategory;
  property.ownershipCategoryInit = 'NA';
  if (get_1(application, "Properties[0].ownershipCategory", "").startsWith("INSTITUTION")) {
    property.institutionTemp = property.institution;
  }
  if (auditResponse && Array.isArray(get_1(auditResponse, "Properties", [])) && get_1(auditResponse, "Properties", []).length > 0) {
    const propertiesAudit = get_1(auditResponse, "Properties", []);
    const propertyIndex = property.status == 'ACTIVE' ? 1 : 0;
    const previousActiveProperty = propertiesAudit.filter(property => property.status == 'ACTIVE').sort((x, y) => y.auditDetails.lastModifiedTime - x.auditDetails.lastModifiedTime)[propertyIndex];
    property.ownershipCategoryInit = previousActiveProperty.ownershipCategory;
    property.ownersInit = previousActiveProperty.owners.filter(owner => owner.status == "ACTIVE");
    if (property.ownershipCategoryInit.startsWith("INSTITUTION")) {
      property.institutionInit = previousActiveProperty.institution;
    }
  }
  let transfereeOwners = get_1(property, "ownersTemp", []);
  let transferorOwners = get_1(property, "ownersInit", []);
  let transfereeInstitution = get_1(property, "institutionTemp", []);
  let transferorInstitution = get_1(property, "institutionInit", []);
  let units = [];
  units = application === null || application === void 0 ? void 0 : application.units;
  units && units.sort((x, y) => {
    let a = x.floorNo,
      b = y.floorNo;
    if (x.floorNo < 0) {
      a = x.floorNo * -20;
    }
    if (y.floorNo < 0) {
      b = y.floorNo * -20;
    }
    if (a > b) {
      return 1;
    } else {
      return -1;
    }
  });
  let docs = [];
  docs = application === null || application === void 0 ? void 0 : application.documents;
  if (isLoading || auditDataLoading || isEnableLoader) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const handleDownloadPdf = async () => {
    const applications = application || {};
    const tenantInfo = tenants.find(tenant => tenant.code === applications.tenantId);
    const acknowldgementDataAPI = await getPTAcknowledgementData({
      ...applications
    }, tenantInfo, t);
    Digit.Utils.pdf.generate(acknowldgementDataAPI);
  };
  let documentDate = t("CS_NA");
  if (property !== null && property !== void 0 && (_property$additionalD = property.additionalDetails) !== null && _property$additionalD !== void 0 && _property$additionalD.documentDate) {
    var _property$additionalD2;
    const date = new Date(property === null || property === void 0 ? void 0 : (_property$additionalD2 = property.additionalDetails) === null || _property$additionalD2 === void 0 ? void 0 : _property$additionalD2.documentDate);
    const month = Digit.Utils.date.monthNames[date.getMonth()];
    documentDate = `${date.getDate()} ${month} ${date.getFullYear()}`;
  }
  const printCertificate = async () => {
    var _data$Properties;
    let response = await Digit.PaymentService.generatePdf(tenantId, {
      Properties: [data === null || data === void 0 ? void 0 : (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : _data$Properties[0]]
    }, "ptmutationcertificate");
    const fileStore = await Digit.PaymentService.printReciept(tenantId, {
      fileStoreIds: response.filestoreIds[0]
    });
    window.open(fileStore[response === null || response === void 0 ? void 0 : response.filestoreIds[0]], "_blank");
  };
  let dowloadOptions = [];
  dowloadOptions.push({
    label: t("MT_APPLICATION"),
    onClick: () => handleDownloadPdf()
  });
  if (reciept_data && (reciept_data === null || reciept_data === void 0 ? void 0 : reciept_data.Payments.length) > 0 && recieptDataLoading == false) dowloadOptions.push({
    label: t("MT_FEE_RECIEPT"),
    onClick: () => {
      var _reciept_data$Payment;
      return getRecieptSearch({
        tenantId: reciept_data === null || reciept_data === void 0 ? void 0 : (_reciept_data$Payment = reciept_data.Payments[0]) === null || _reciept_data$Payment === void 0 ? void 0 : _reciept_data$Payment.tenantId,
        payments: reciept_data === null || reciept_data === void 0 ? void 0 : reciept_data.Payments[0]
      });
    }
  });
  if ((data === null || data === void 0 ? void 0 : (_data$Properties2 = data.Properties) === null || _data$Properties2 === void 0 ? void 0 : (_data$Properties2$ = _data$Properties2[0]) === null || _data$Properties2$ === void 0 ? void 0 : _data$Properties2$.creationReason) === "MUTATION" && (data === null || data === void 0 ? void 0 : (_data$Properties3 = data.Properties) === null || _data$Properties3 === void 0 ? void 0 : (_data$Properties3$ = _data$Properties3[0]) === null || _data$Properties3$ === void 0 ? void 0 : _data$Properties3$.status) === "ACTIVE") dowloadOptions.push({
    label: t("MT_CERTIFICATE"),
    onClick: () => printCertificate()
  });
  const getCardSubHeadrStyles = () => {
    return {
      fontSize: "24px",
      fontWeight: "700",
      lineHeight: "28px",
      margin: "20px 0px"
    };
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "cardHeaderWithOptions",
    style: {
      marginRight: "auto"
    }
  }, /*#__PURE__*/React.createElement(Header, {
    styles: {
      fontSize: "32px",
      marginLeft: "12px"
    }
  }, t("PT_MUTATION_APPLICATION_DETAILS")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, dowloadOptions && dowloadOptions.length > 0 && /*#__PURE__*/React.createElement(MultiLink, {
    onHeadClick: () => setShowOptions(!showOptions),
    displayOptions: showOptions,
    options: dowloadOptions,
    className: "multilinkWrapper",
    style: {
      top: "90px"
    }
  })))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_APPLICATION_NUMBER_LABEL"),
    text: property === null || property === void 0 ? void 0 : property.acknowldgementNumber,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_SEARCHPROPERTY_TABEL_PTUID"),
    text: property === null || property === void 0 ? void 0 : property.propertyId,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_APPLICATION_CHANNEL_LABEL"),
    text: t(`ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_${property === null || property === void 0 ? void 0 : property.channel}`)
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FEE_AMOUNT"),
    text: billAmount,
    textStyle: {
      whiteSpace: "pre"
    }
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PAYMENT_STATUS"),
    text: billStatus,
    textStyle: {
      whiteSpace: "pre"
    }
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_PROPERTY_ADDRESS_SUB_HEADER")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PROPERTY_ADDRESS_PINCODE"),
    text: (property === null || property === void 0 ? void 0 : (_property$address = property.address) === null || _property$address === void 0 ? void 0 : _property$address.pincode) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_COMMON_CITY"),
    text: (property === null || property === void 0 ? void 0 : (_property$address2 = property.address) === null || _property$address2 === void 0 ? void 0 : _property$address2.city) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_COMMON_LOCALITY_OR_MOHALLA"),
    text: t(`${property === null || property === void 0 ? void 0 : (_property$address3 = property.address) === null || _property$address3 === void 0 ? void 0 : (_property$address3$lo = _property$address3.locality) === null || _property$address3$lo === void 0 ? void 0 : _property$address3$lo.area}`) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PROPERTY_ADDRESS_STREET_NAME"),
    text: (property === null || property === void 0 ? void 0 : (_property$address4 = property.address) === null || _property$address4 === void 0 ? void 0 : _property$address4.street) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_DOOR_OR_HOUSE"),
    text: (property === null || property === void 0 ? void 0 : (_property$address5 = property.address) === null || _property$address5 === void 0 ? void 0 : _property$address5.doorNo) || t("CS_NA")
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_MUTATION_TRANSFEROR_DETAILS")), /*#__PURE__*/React.createElement("div", null, Array.isArray(transferorOwners) && transferorOwners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, transferorOwners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("Guardian Name"),
    text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
    text: (owner === null || owner === void 0 ? void 0 : owner.ownerType.toLowerCase()) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  }))))), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_MUTATION_TRANSFEREE_DETAILS")), transferorInstitution.length ? /*#__PURE__*/React.createElement("div", null, Array.isArray(transfereeOwners) && transfereeOwners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, transfereeOwners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_INSTITUTION_NAME"),
    text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_TYPE_OF_INSTITUTION"),
    text: `${t(transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.type)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_NAME_AUTHORIZED_PERSON"),
    text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.nameOfAuthorizedPerson) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_LANDLINE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.altContactNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_INSTITUTION_DESIGNATION"),
    text: (transferorInstitution === null || transferorInstitution === void 0 ? void 0 : transferorInstitution.designation) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  }))))) : /*#__PURE__*/React.createElement("div", null, Array.isArray(transfereeOwners) && transfereeOwners.map((owner, index) => /*#__PURE__*/React.createElement("div", {
    key: index
  }, /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, transfereeOwners.length != 1 && /*#__PURE__*/React.createElement("span", null, t("PT_OWNER_SUB_HEADER"), " - ", index + 1, " ")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_COMMON_APPLICANT_NAME_LABEL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.name) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_COMMON_GENDER_LABEL"),
    text: t(owner === null || owner === void 0 ? void 0 : owner.gender) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_MOBILE_NUMBER"),
    text: (owner === null || owner === void 0 ? void 0 : owner.mobileNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_GUARDIAN_NAME"),
    text: (owner === null || owner === void 0 ? void 0 : owner.fatherOrHusbandName) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_RELATIONSHIP"),
    text: t(owner === null || owner === void 0 ? void 0 : owner.relationship) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_MUTATION_AUTHORISED_EMAIL"),
    text: (owner === null || owner === void 0 ? void 0 : owner.emailId) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_OWNERSHIP_INFO_CORR_ADDR"),
    text: (owner === null || owner === void 0 ? void 0 : owner.correspondenceAddress) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_MUTATION_TRANSFEROR_SPECIAL_CATEGORY"),
    text: (owner === null || owner === void 0 ? void 0 : owner.ownerType).toLowerCase() || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_FORM3_OWNERSHIP_TYPE"),
    text: `${property !== null && property !== void 0 && property.ownershipCategoryTemp ? t(`PT_OWNERSHIP_${property === null || property === void 0 ? void 0 : property.ownershipCategoryTemp}`) : t("CS_NA")}`
  }))))), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_MUTATION_DETAILS")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_MUTATION_PENDING_COURT"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD3 = property.additionalDetails) === null || _property$additionalD3 === void 0 ? void 0 : _property$additionalD3.isMutationInCourt) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_DETAILS_COURT_CASE"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD4 = property.additionalDetails) === null || _property$additionalD4 === void 0 ? void 0 : _property$additionalD4.caseDetails) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PROP_UNDER_GOV_AQUISITION"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD5 = property.additionalDetails) === null || _property$additionalD5 === void 0 ? void 0 : _property$additionalD5.isPropertyUnderGovtPossession) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_DETAILS_GOV_AQUISITION"),
    text: t("CS_NA")
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_REGISTRATION_DETAILS")), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    label: t("PT_REASON_PROP_TRANSFER"),
    text: `${t(property === null || property === void 0 ? void 0 : (_property$additionalD6 = property.additionalDetails) === null || _property$additionalD6 === void 0 ? void 0 : _property$additionalD6.reasonForTransfer)}` || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_PROP_MARKET_VALUE"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD7 = property.additionalDetails) === null || _property$additionalD7 === void 0 ? void 0 : _property$additionalD7.marketValue) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_REG_NUMBER"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD8 = property.additionalDetails) === null || _property$additionalD8 === void 0 ? void 0 : _property$additionalD8.documentNumber) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_DOC_ISSUE_DATE"),
    text: documentDate
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_REG_DOC_VALUE"),
    text: (property === null || property === void 0 ? void 0 : (_property$additionalD9 = property.additionalDetails) === null || _property$additionalD9 === void 0 ? void 0 : _property$additionalD9.documentValue) || t("CS_NA")
  }), /*#__PURE__*/React.createElement(Row, {
    label: t("PT_REMARKS"),
    text: t("CS_NA")
  })), /*#__PURE__*/React.createElement(CardSubHeader, {
    style: getCardSubHeadrStyles()
  }, t("PT_COMMON_DOCS")), /*#__PURE__*/React.createElement("div", null, Array.isArray(docs) ? docs.length > 0 && /*#__PURE__*/React.createElement(PropertyDocument, {
    property: property
  }) : /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    text: t("PT_NO_DOCUMENTS_MSG")
  }))), /*#__PURE__*/React.createElement(PTWFApplicationTimeline, {
    application: application,
    id: acknowledgementIds,
    userType: 'employee'
  }), showModal ? /*#__PURE__*/React.createElement(ActionModal$6, {
    t: t,
    action: selectedAction,
    tenantId: tenantId,
    state: state,
    id: acknowledgementIds,
    applicationDetails: appDetailsToShow,
    applicationData: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationData,
    closeModal: closeModal,
    submitAction: submitAction,
    actionData: workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : _workflowDetails$data.timeline,
    businessService: businessService,
    workflowDetails: workflowDetails,
    moduleCode: "PT"
  }) : null, /*#__PURE__*/React.createElement(ApplicationDetailsActionBar, {
    workflowDetails: workflowDetails,
    displayMenu: displayMenu,
    onActionSelect: onActionSelect,
    setDisplayMenu: setDisplayMenu,
    businessService: businessService,
    forcedActionPrefix: "WF_EMPLOYEE_PT.CREATE"
  })));
};

const ApplicationDetails$1 = () => {
  var _applicationDetails$a, _appDetailsToShow$app3, _workflowDetails5, _workflowDetails5$dat, _workflowDetails5$dat2, _workflowDetails6, _workflowDetails6$dat, _workflowDetails6$dat2, _workflowDetails6$dat3, _appDetailsToShow$app4, _appDetailsToShow$app5, _appDetailsToShow$app6, _workflowDetails9, _workflowDetails9$dat, _workflowDetails10, _workflowDetails10$da, _workflowDetails10$da2, _workflowDetails10$da3, _workflowDetails$data2, _workflowDetails$data3, _appDetailsToShow$app12, _appDetailsToShow$app13, _appDetailsToShow$app14, _applicationDetails$a6;
  const {
    t
  } = useTranslation();
  const {
    data: storeData
  } = Digit.Hooks.useStore.getInitData();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    tenants
  } = storeData || {};
  const {
    id: propertyId
  } = useParams();
  const [showToast, setShowToast] = useState(null);
  const [appDetailsToShow, setAppDetailsToShow] = useState({});
  const [showOptions, setShowOptions] = useState(false);
  const [enableAudit, setEnableAudit] = useState(false);
  const [businessService, setBusinessService] = useState("PT.CREATE");
  sessionStorage.setItem("applicationNoinAppDetails", propertyId);
  const {
    isLoading,
    isError,
    data: applicationDetails,
    error
  } = Digit.Hooks.pt.useApplicationDetail(t, tenantId, propertyId);
  const {
    isLoading: updatingApplication,
    isError: updateApplicationError,
    data: updateResponse,
    error: updateError,
    mutate
  } = Digit.Hooks.pt.useApplicationActions(tenantId);
  let workflowDetails = Digit.Hooks.useWorkflowDetails({
    tenantId: (applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.tenantId) || tenantId,
    id: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a = applicationDetails.applicationData) === null || _applicationDetails$a === void 0 ? void 0 : _applicationDetails$a.acknowldgementNumber,
    moduleCode: businessService,
    role: "PT_CEMP"
  });
  const {
    isLoading: auditDataLoading,
    isError: isAuditError,
    data: auditData
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds: propertyId,
      audit: true
    }
  }, {
    enabled: enableAudit,
    select: data => {
      var _data$Properties;
      return (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : _data$Properties.filter(e => e.status === "ACTIVE");
    }
  });
  const showTransfererDetails = React.useCallback(() => {
    var _applicationDetails$a2, _applicationDetails$a3;
    if (auditData && Object.keys(appDetailsToShow).length && (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a2 = applicationDetails.applicationData) === null || _applicationDetails$a2 === void 0 ? void 0 : _applicationDetails$a2.status) !== "ACTIVE" && (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a3 = applicationDetails.applicationData) === null || _applicationDetails$a3 === void 0 ? void 0 : _applicationDetails$a3.creationReason) === "MUTATION" && !(appDetailsToShow !== null && appDetailsToShow !== void 0 && appDetailsToShow.applicationDetails.find(e => e.title === "PT_MUTATION_TRANSFEROR_DETAILS"))) {
      var _appDetailsToShow$app;
      let applicationDetails = (_appDetailsToShow$app = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app === void 0 ? void 0 : _appDetailsToShow$app.filter(e => e.title === "PT_OWNERSHIP_INFO_SUB_HEADER");
      let compConfig = newConfigMutate.reduce((acc, el) => [...acc, ...el.body], []).find(e => e.component === "TransfererDetails");
      applicationDetails.unshift({
        title: "PT_MUTATION_TRANSFEROR_DETAILS",
        belowComponent: () => /*#__PURE__*/React.createElement(TransfererDetails$1, {
          userType: "employee",
          formData: {
            originalData: auditData[0]
          },
          config: compConfig
        })
      });
      setAppDetailsToShow({
        ...appDetailsToShow,
        applicationDetails
      });
    }
  }, [setAppDetailsToShow, appDetailsToShow, auditData, applicationDetails, auditData, newConfigMutate]);
  const closeToast = () => {
    setShowToast(null);
  };
  useEffect(() => {
    if (applicationDetails) {
      var _applicationDetails$a4, _applicationDetails$a5;
      setAppDetailsToShow(lodash.cloneDeep(applicationDetails));
      if ((applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a4 = applicationDetails.applicationData) === null || _applicationDetails$a4 === void 0 ? void 0 : _applicationDetails$a4.status) !== "ACTIVE" && (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a5 = applicationDetails.applicationData) === null || _applicationDetails$a5 === void 0 ? void 0 : _applicationDetails$a5.creationReason) === "MUTATION") {
        setEnableAudit(true);
      }
    }
  }, [applicationDetails]);
  useEffect(() => {
    var _appDetailsToShow$app2;
    showTransfererDetails();
    if ((appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app2 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app2 === void 0 ? void 0 : _appDetailsToShow$app2.status) === "ACTIVE" && PT_CEMP && businessService == "PT.CREATE") {
      setBusinessService("PT.UPDATE");
    }
  }, [auditData, applicationDetails, appDetailsToShow]);
  useEffect(() => {
    var _workflowDetails, _workflowDetails$data, _workflowDetails2, _workflowDetails2$dat;
    if ((_workflowDetails = workflowDetails) !== null && _workflowDetails !== void 0 && (_workflowDetails$data = _workflowDetails.data) !== null && _workflowDetails$data !== void 0 && _workflowDetails$data.applicationBusinessService && !(((_workflowDetails2 = workflowDetails) === null || _workflowDetails2 === void 0 ? void 0 : (_workflowDetails2$dat = _workflowDetails2.data) === null || _workflowDetails2$dat === void 0 ? void 0 : _workflowDetails2$dat.applicationBusinessService) === "PT.CREATE" && businessService === "PT.UPDATE")) {
      var _workflowDetails3, _workflowDetails3$dat;
      setBusinessService((_workflowDetails3 = workflowDetails) === null || _workflowDetails3 === void 0 ? void 0 : (_workflowDetails3$dat = _workflowDetails3.data) === null || _workflowDetails3$dat === void 0 ? void 0 : _workflowDetails3$dat.applicationBusinessService);
    }
  }, [workflowDetails.data]);
  const PT_CEMP = Digit.UserService.hasAccess(["PT_CEMP"]) || false;
  if ((appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app3 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app3 === void 0 ? void 0 : _appDetailsToShow$app3.status) === "ACTIVE" && PT_CEMP) {
    var _workflowDetails4;
    workflowDetails = {
      ...workflowDetails,
      data: {
        ...((_workflowDetails4 = workflowDetails) === null || _workflowDetails4 === void 0 ? void 0 : _workflowDetails4.data),
        actionState: {
          nextActions: [{
            action: "VIEW_DETAILS",
            redirectionUrl: {
              pathname: `/digit-ui/employee/pt/property-details/${propertyId}`
            },
            tenantId: Digit.ULBService.getStateId()
          }]
        }
      }
    };
  }
  if (PT_CEMP && (_workflowDetails5 = workflowDetails) !== null && _workflowDetails5 !== void 0 && (_workflowDetails5$dat = _workflowDetails5.data) !== null && _workflowDetails5$dat !== void 0 && (_workflowDetails5$dat2 = _workflowDetails5$dat.actionState) !== null && _workflowDetails5$dat2 !== void 0 && _workflowDetails5$dat2.isStateUpdatable && !((_workflowDetails6 = workflowDetails) !== null && _workflowDetails6 !== void 0 && (_workflowDetails6$dat = _workflowDetails6.data) !== null && _workflowDetails6$dat !== void 0 && (_workflowDetails6$dat2 = _workflowDetails6$dat.actionState) !== null && _workflowDetails6$dat2 !== void 0 && (_workflowDetails6$dat3 = _workflowDetails6$dat2.nextActions) !== null && _workflowDetails6$dat3 !== void 0 && _workflowDetails6$dat3.find(e => e.action === "UPDATE"))) {
    var _workflowDetails7, _workflowDetails7$dat, _workflowDetails7$dat2, _workflowDetails8, _workflowDetails8$dat, _workflowDetails8$dat2;
    if (!((_workflowDetails7 = workflowDetails) !== null && _workflowDetails7 !== void 0 && (_workflowDetails7$dat = _workflowDetails7.data) !== null && _workflowDetails7$dat !== void 0 && (_workflowDetails7$dat2 = _workflowDetails7$dat.actionState) !== null && _workflowDetails7$dat2 !== void 0 && _workflowDetails7$dat2.nextActions)) workflowDetails.data.actionState.nextActions = [];
    (_workflowDetails8 = workflowDetails) === null || _workflowDetails8 === void 0 ? void 0 : (_workflowDetails8$dat = _workflowDetails8.data) === null || _workflowDetails8$dat === void 0 ? void 0 : (_workflowDetails8$dat2 = _workflowDetails8$dat.actionState) === null || _workflowDetails8$dat2 === void 0 ? void 0 : _workflowDetails8$dat2.nextActions.push({
      action: "UPDATE",
      redirectionUrl: {
        pathname: `/digit-ui/employee/pt/modify-application/${propertyId}`,
        state: {
          workflow: {
            action: "REOPEN",
            moduleName: "PT",
            businessService
          }
        }
      },
      tenantId: Digit.ULBService.getStateId()
    });
  }
  if (!((appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app4 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app4 === void 0 ? void 0 : (_appDetailsToShow$app5 = _appDetailsToShow$app4[0]) === null || _appDetailsToShow$app5 === void 0 ? void 0 : (_appDetailsToShow$app6 = _appDetailsToShow$app5.values) === null || _appDetailsToShow$app6 === void 0 ? void 0 : _appDetailsToShow$app6[0].title) === "PT_PROPERTY_APPLICATION_NO")) {
    var _appDetailsToShow$app7, _appDetailsToShow$app8, _appDetailsToShow$app9, _appDetailsToShow$app10;
    appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app7 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app7 === void 0 ? void 0 : _appDetailsToShow$app7.unshift({
      values: [{
        title: "PT_PROPERTY_APPLICATION_NO",
        value: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app8 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app8 === void 0 ? void 0 : _appDetailsToShow$app8.acknowldgementNumber
      }, {
        title: "PT_SEARCHPROPERTY_TABEL_PTUID",
        value: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app9 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app9 === void 0 ? void 0 : _appDetailsToShow$app9.propertyId
      }, {
        title: "ES_APPLICATION_CHANNEL",
        value: `ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_${appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app10 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app10 === void 0 ? void 0 : _appDetailsToShow$app10.channel}`
      }]
    });
  }
  if (PT_CEMP && ((_workflowDetails9 = workflowDetails) === null || _workflowDetails9 === void 0 ? void 0 : (_workflowDetails9$dat = _workflowDetails9.data) === null || _workflowDetails9$dat === void 0 ? void 0 : _workflowDetails9$dat.applicationBusinessService) === "PT.MUTATION" && (_workflowDetails10 = workflowDetails) !== null && _workflowDetails10 !== void 0 && (_workflowDetails10$da = _workflowDetails10.data) !== null && _workflowDetails10$da !== void 0 && (_workflowDetails10$da2 = _workflowDetails10$da.actionState) !== null && _workflowDetails10$da2 !== void 0 && (_workflowDetails10$da3 = _workflowDetails10$da2.nextActions) !== null && _workflowDetails10$da3 !== void 0 && _workflowDetails10$da3.find(act => act.action === "PAY")) {
    var _workflowDetails11, _workflowDetails11$da, _workflowDetails11$da2;
    workflowDetails.data.actionState.nextActions = (_workflowDetails11 = workflowDetails) === null || _workflowDetails11 === void 0 ? void 0 : (_workflowDetails11$da = _workflowDetails11.data) === null || _workflowDetails11$da === void 0 ? void 0 : (_workflowDetails11$da2 = _workflowDetails11$da.actionState) === null || _workflowDetails11$da2 === void 0 ? void 0 : _workflowDetails11$da2.nextActions.map(act => {
      if (act.action === "PAY") {
        var _appDetailsToShow$app11;
        return {
          action: "PAY",
          forcedName: "WF_EMPLOYEE_PT.MUTATION_PAY",
          redirectionUrl: {
            pathname: `/digit-ui/employee/payment/collect/PT.MUTATION/${appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app11 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app11 === void 0 ? void 0 : _appDetailsToShow$app11.acknowldgementNumber}`
          }
        };
      }
      return act;
    });
  }
  const wfDocs = (_workflowDetails$data2 = workflowDetails.data) === null || _workflowDetails$data2 === void 0 ? void 0 : (_workflowDetails$data3 = _workflowDetails$data2.timeline) === null || _workflowDetails$data3 === void 0 ? void 0 : _workflowDetails$data3.reduce((acc, {
    wfDocuments
  }) => {
    return wfDocuments ? [...acc, ...wfDocuments] : acc;
  }, []);
  let appdetailsDocuments = appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app12 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app12 === void 0 ? void 0 : (_appDetailsToShow$app13 = _appDetailsToShow$app12.find(e => e.title === "PT_OWNERSHIP_INFO_SUB_HEADER")) === null || _appDetailsToShow$app13 === void 0 ? void 0 : (_appDetailsToShow$app14 = _appDetailsToShow$app13.additionalDetails) === null || _appDetailsToShow$app14 === void 0 ? void 0 : _appDetailsToShow$app14.documents;
  if (appdetailsDocuments && wfDocs !== null && wfDocs !== void 0 && wfDocs.length && !(appdetailsDocuments !== null && appdetailsDocuments !== void 0 && appdetailsDocuments.find(e => e.title === "PT_WORKFLOW_DOCS"))) {
    var _wfDocs$map;
    appDetailsToShow.applicationDetails.find(e => e.title === "PT_OWNERSHIP_INFO_SUB_HEADER").additionalDetails.documents = [...appdetailsDocuments, {
      title: "PT_WORKFLOW_DOCS",
      values: wfDocs === null || wfDocs === void 0 ? void 0 : (_wfDocs$map = wfDocs.map) === null || _wfDocs$map === void 0 ? void 0 : _wfDocs$map.call(wfDocs, e => ({
        ...e,
        title: e.documentType
      }))
    }];
  }
  const handleDownloadPdf = async () => {
    const Property = appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationData;
    const tenantInfo = tenants.find(tenant => tenant.code === Property.tenantId);
    const data = await getPTAcknowledgementData(Property, tenantInfo, t);
    Digit.Utils.pdf.generate(data);
  };
  const propertyDetailsPDF = {
    order: 1,
    label: t("PT_APPLICATION"),
    onClick: () => handleDownloadPdf()
  };
  let dowloadOptions = [propertyDetailsPDF];
  if ((applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a6 = applicationDetails.applicationData) === null || _applicationDetails$a6 === void 0 ? void 0 : _applicationDetails$a6.creationReason) === "MUTATION") {
    var _appDetailsToShow$app15;
    return /*#__PURE__*/React.createElement(MutationApplicationDetails, {
      propertyId: propertyId,
      acknowledgementIds: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app15 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app15 === void 0 ? void 0 : _appDetailsToShow$app15.acknowldgementNumber,
      workflowDetails: workflowDetails,
      mutate: mutate
    });
  }
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: "employee-application-details",
    style: {
      marginBottom: "15px"
    }
  }, /*#__PURE__*/React.createElement(Header, {
    styles: {
      marginLeft: "0px",
      paddingTop: "10px",
      fontSize: "32px"
    }
  }, t("PT_APPLICATION_TITLE")), dowloadOptions && dowloadOptions.length > 0 && /*#__PURE__*/React.createElement(MultiLink, {
    className: "multilinkWrapper employee-mulitlink-main-div",
    onHeadClick: () => setShowOptions(!showOptions),
    displayOptions: showOptions,
    options: dowloadOptions,
    downloadBtnClassName: "employee-download-btn-className",
    optionsClassName: "employee-options-btn-className"
  })), /*#__PURE__*/React.createElement(ApplicationDetails, {
    applicationDetails: appDetailsToShow,
    isLoading: isLoading,
    isDataLoading: isLoading,
    applicationData: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationData,
    mutate: mutate,
    workflowDetails: workflowDetails,
    businessService: businessService,
    moduleCode: "PT",
    showToast: showToast,
    setShowToast: setShowToast,
    closeToast: closeToast,
    timelineStatusPrefix: "ES_PT_COMMON_STATUS_",
    forcedActionPrefix: "WF_EMPLOYEE_PT.CREATE",
    statusAttribute: "state",
    MenuStyle: {
      color: "#FFFFFF",
      fontSize: "18px"
    }
  }));
};
var ApplicationDetails$2 = React.memo(ApplicationDetails$1);

const OwnerHistory = props => {
  const {
    propertyId,
    userType
  } = props;
  return /*#__PURE__*/React.createElement(propertyOwnerHistory, {
    propertyId: propertyId,
    userType: userType
  });
};

const Close$7 = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "#FFFFFF"
}, /*#__PURE__*/React.createElement("path", {
  d: "M0 0h24v24H0V0z",
  fill: "none"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
}));
const CloseBtn$7 = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React.createElement(Close$7, null));
};
const PropertyDetails = () => {
  var _applicationDetails$a2, _applicationDetails$a4, _appDetailsToShow$app13, _Digit, _Digit$ComponentRegis, _appDetailsToShow$app14;
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    id: applicationNumber
  } = useParams();
  const [showToast, setShowToast] = useState(null);
  const [appDetailsToShow, setAppDetailsToShow] = useState({});
  const [enableAudit, setEnableAudit] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [showUpdateNo, setShowUpdateNo] = useState(false);
  const PT_CEMP = Digit.UserService.hasAccess(["PT_CEMP"]) || false;
  const [businessService, setBusinessService] = useState("PT.CREATE");
  const history = useHistory();
  sessionStorage.setItem("propertyIdinPropertyDetail", applicationNumber);
  const [isMobile, setIsMobile] = React.useState(window.innerWidth <= 780);
  let {
    isLoading,
    isError,
    data: applicationDetails,
    error
  } = Digit.Hooks.pt.useApplicationDetail(t, tenantId, applicationNumber);
  const {
    data: fetchBillData,
    isLoading: fetchBillLoading,
    revalidate
  } = Digit.Hooks.useFetchBillsForBuissnessService({
    businessService: "PT",
    consumerCode: applicationNumber
  });
  const {
    isLoading: auditDataLoading,
    isError: isAuditError,
    data: auditData
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds: applicationNumber,
      audit: true
    }
  }, {
    enabled: enableAudit,
    select: data => {
      var _data$Properties$filt;
      return (_data$Properties$filt = data.Properties.filter(e => e.status === "ACTIVE")) === null || _data$Properties$filt === void 0 ? void 0 : _data$Properties$filt.sort((a, b) => b.auditDetails.lastModifiedTime - a.auditDetails.lastModifiedTime);
    }
  });
  const mutation = Digit.Hooks.pt.usePropertyAPI(tenantId, false);
  const {
    data: UpdateNumberConfig
  } = Digit.Hooks.useCommonMDMS(Digit.ULBService.getStateId(), "PropertyTax", ["UpdateNumber"], {
    select: data => {
      var _data$PropertyTax, _data$PropertyTax$Upd;
      return data === null || data === void 0 ? void 0 : (_data$PropertyTax = data.PropertyTax) === null || _data$PropertyTax === void 0 ? void 0 : (_data$PropertyTax$Upd = _data$PropertyTax.UpdateNumber) === null || _data$PropertyTax$Upd === void 0 ? void 0 : _data$PropertyTax$Upd[0];
    },
    retry: false,
    enable: false
  });
  React.useEffect(() => {
    const onResize = () => {
      if (window.innerWidth <= 780 && !isMobile) {
        setIsMobile(true);
      } else if (window.innerWidth > 780 && isMobile) {
        setIsMobile(false);
      }
    };
    window.addEventListener("resize", () => {
      onResize();
    });
    return () => {
      window.removeEventListener("resize", () => {
        onResize();
      });
    };
  });
  useEffect(() => {
    if (applicationDetails && !enableAudit) {
      var _applicationDetails$a;
      setAppDetailsToShow(lodash.cloneDeep(applicationDetails));
      if ((applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a = applicationDetails.applicationData) === null || _applicationDetails$a === void 0 ? void 0 : _applicationDetails$a.status) !== "ACTIVE") {
        setEnableAudit(true);
      }
    }
  }, [applicationDetails]);
  useEffect(() => {
    if (enableAudit && auditData !== null && auditData !== void 0 && auditData.length && Object.keys(appDetailsToShow).length) {
      var _lastActiveProperty$o;
      const lastActiveProperty = auditData === null || auditData === void 0 ? void 0 : auditData[0];
      lastActiveProperty.owners = lastActiveProperty === null || lastActiveProperty === void 0 ? void 0 : (_lastActiveProperty$o = lastActiveProperty.owners) === null || _lastActiveProperty$o === void 0 ? void 0 : _lastActiveProperty$o.filter(owner => owner.status == "ACTIVE");
      if (lastActiveProperty) {
        let applicationDetails = appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.transformToAppDetailsForEmployee({
          property: lastActiveProperty,
          t
        });
        setAppDetailsToShow({
          ...appDetailsToShow,
          applicationDetails
        });
      }
    }
  }, [auditData, enableAudit, applicationDetails]);
  let workflowDetails = Digit.Hooks.useWorkflowDetails({
    tenantId: (applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.tenantId) || tenantId,
    id: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a2 = applicationDetails.applicationData) === null || _applicationDetails$a2 === void 0 ? void 0 : _applicationDetails$a2.acknowldgementNumber,
    moduleCode: "PT.UPDATE",
    role: "PT_CEMP"
  });
  const closeToast = () => {
    setShowToast(null);
  };
  useEffect(() => {
    var _workflowDetails, _workflowDetails$data;
    if ((_workflowDetails = workflowDetails) !== null && _workflowDetails !== void 0 && (_workflowDetails$data = _workflowDetails.data) !== null && _workflowDetails$data !== void 0 && _workflowDetails$data.applicationBusinessService) {
      var _workflowDetails2, _workflowDetails2$dat;
      setBusinessService((_workflowDetails2 = workflowDetails) === null || _workflowDetails2 === void 0 ? void 0 : (_workflowDetails2$dat = _workflowDetails2.data) === null || _workflowDetails2$dat === void 0 ? void 0 : _workflowDetails2$dat.applicationBusinessService);
    }
  }, [workflowDetails.data]);
  if (appDetailsToShow !== null && appDetailsToShow !== void 0 && appDetailsToShow.applicationDetails) {
    var _appDetailsToShow$app;
    appDetailsToShow.applicationDetails = appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app === void 0 ? void 0 : _appDetailsToShow$app.map(e => {
      if (e.title === "PT_OWNERSHIP_INFO_SUB_HEADER") {
        var _applicationDetails$a3;
        if ((applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a3 = applicationDetails.applicationData) === null || _applicationDetails$a3 === void 0 ? void 0 : _applicationDetails$a3.status) === "ACTIVE") {
          e.additionalDetails.owners.map((owner, ind) => {
            owner.values.map(value => {
              if (value.title == "PT_OWNERSHIP_INFO_MOBILE_NO") {
                value.textStyle = {
                  display: "flex",
                  wordBreak: "revert"
                };
                value.caption = /*#__PURE__*/React.createElement("span", {
                  onClick: () => {
                    var _appDetailsToShow$app2, _appDetailsToShow$app3, _appDetailsToShow$app4, _appDetailsToShow$app5;
                    setShowModal(prev => !prev);
                    setShowUpdateNo({
                      name: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app2 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app2 === void 0 ? void 0 : (_appDetailsToShow$app3 = _appDetailsToShow$app2.owners[ind]) === null || _appDetailsToShow$app3 === void 0 ? void 0 : _appDetailsToShow$app3.name,
                      mobileNumber: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app4 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app4 === void 0 ? void 0 : (_appDetailsToShow$app5 = _appDetailsToShow$app4.owners[ind]) === null || _appDetailsToShow$app5 === void 0 ? void 0 : _appDetailsToShow$app5.mobileNumber,
                      index: ind
                    });
                  },
                  style: {
                    cursor: "pointer",
                    display: "inline-flex",
                    paddingLeft: "20px"
                  }
                }, /*#__PURE__*/React.createElement(EditIcon, null));
              }
            });
          });
        }
        return {
          ...e,
          Component: () => /*#__PURE__*/React.createElement(LinkLabel, {
            onClick: () => {
              setShowModal(prev => !prev);
            },
            style: {
              display: "inline",
              marginLeft: "25px"
            }
          }, t("PT_VIEW_HISTORY"))
        };
      }
      return e;
    });
  }
  useEffect(() => {
    var _appDetailsToShow$app6, _appDetailsToShow$app7, _appDetailsToShow$app8;
    if ((appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app6 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app6 === void 0 ? void 0 : (_appDetailsToShow$app7 = _appDetailsToShow$app6[0]) === null || _appDetailsToShow$app7 === void 0 ? void 0 : (_appDetailsToShow$app8 = _appDetailsToShow$app7.values) === null || _appDetailsToShow$app8 === void 0 ? void 0 : _appDetailsToShow$app8[1].title) !== "PT_TOTAL_DUES") {
      var _appDetailsToShow$app9, _fetchBillData$Bill$, _fetchBillData$Bill$2;
      appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app9 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app9 === void 0 ? void 0 : _appDetailsToShow$app9.unshift({
        title: " ",
        asSectionHeader: true,
        belowComponent: () => /*#__PURE__*/React.createElement(LinkLabel, {
          onClick: () => history.push({
            pathname: `/digit-ui/employee/pt/payment-details/${applicationNumber}`
          }),
          style: isMobile ? {
            marginTop: "15px",
            marginLeft: "0px"
          } : {
            marginTop: "15px"
          }
        }, t("PT_VIEW_PAYMENT")),
        values: [{
          title: "PT_PROPERTY_PTUID",
          value: applicationNumber
        }, {
          title: "PT_TOTAL_DUES",
          value: fetchBillData !== null && fetchBillData !== void 0 && (_fetchBillData$Bill$ = fetchBillData.Bill[0]) !== null && _fetchBillData$Bill$ !== void 0 && _fetchBillData$Bill$.totalAmount ? `₹ ${fetchBillData === null || fetchBillData === void 0 ? void 0 : (_fetchBillData$Bill$2 = fetchBillData.Bill[0]) === null || _fetchBillData$Bill$2 === void 0 ? void 0 : _fetchBillData$Bill$2.totalAmount}` : "N/A"
        }]
      });
    }
    return () => {
      var _appDetailsToShow$app10, _appDetailsToShow$app11, _appDetailsToShow$app12;
      if ((appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app10 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app10 === void 0 ? void 0 : (_appDetailsToShow$app11 = _appDetailsToShow$app10[0]) === null || _appDetailsToShow$app11 === void 0 ? void 0 : (_appDetailsToShow$app12 = _appDetailsToShow$app11.values) === null || _appDetailsToShow$app12 === void 0 ? void 0 : _appDetailsToShow$app12[1].title) == "PT_TOTAL_DUES" && !(sessionStorage.getItem("revalidateddone") === "done")) {
        appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationDetails.shift();
        sessionStorage.setItem("revalidateddone", "done");
        revalidate();
      }
    };
  }, [fetchBillData, appDetailsToShow]);
  if ((applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a4 = applicationDetails.applicationData) === null || _applicationDetails$a4 === void 0 ? void 0 : _applicationDetails$a4.status) === "ACTIVE") {
    var _workflowDetails3, _fetchBillData$Bill$3, _fetchBillData$Bill$4, _fetchBillData$Bill$5, _fetchBillData$Bill$6;
    workflowDetails = {
      ...workflowDetails,
      data: {
        ...((_workflowDetails3 = workflowDetails) === null || _workflowDetails3 === void 0 ? void 0 : _workflowDetails3.data),
        actionState: {
          nextActions: PT_CEMP ? [{
            action: "ASSESS_PROPERTY",
            forcedName: "PT_ASSESS",
            showFinancialYearsModal: true,
            customFunctionToExecute: data => {
              delete data.customFunctionToExecute;
              history.replace({
                pathname: `/digit-ui/employee/pt/ptsearch/assessment-details/${applicationNumber}`,
                state: {
                  ...data
                }
              });
            },
            tenantId: Digit.ULBService.getStateId()
          }, {
            action: !(fetchBillData !== null && fetchBillData !== void 0 && (_fetchBillData$Bill$3 = fetchBillData.Bill[0]) !== null && _fetchBillData$Bill$3 !== void 0 && _fetchBillData$Bill$3.totalAmount) ? "MUTATE_PROPERTY" : "PT_TOTALDUES_PAY",
            forcedName: "PT_OWNERSHIP_TRANSFER",
            AmountDueForPay: fetchBillData === null || fetchBillData === void 0 ? void 0 : (_fetchBillData$Bill$4 = fetchBillData.Bill[0]) === null || _fetchBillData$Bill$4 === void 0 ? void 0 : _fetchBillData$Bill$4.totalAmount,
            isWarningPopUp: !(fetchBillData !== null && fetchBillData !== void 0 && (_fetchBillData$Bill$5 = fetchBillData.Bill[0]) !== null && _fetchBillData$Bill$5 !== void 0 && _fetchBillData$Bill$5.totalAmount) ? false : true,
            redirectionUrl: {
              pathname: !(fetchBillData !== null && fetchBillData !== void 0 && (_fetchBillData$Bill$6 = fetchBillData.Bill[0]) !== null && _fetchBillData$Bill$6 !== void 0 && _fetchBillData$Bill$6.totalAmount) ? `/digit-ui/employee/pt/property-mutate-docs-required/${applicationNumber}` : `/digit-ui/employee/payment/collect/PT/${applicationNumber}`,
              state: null
            },
            tenantId: Digit.ULBService.getStateId()
          }] : []
        }
      }
    };
  }
  if ((appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app13 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app13 === void 0 ? void 0 : _appDetailsToShow$app13.status) === "ACTIVE" && PT_CEMP) {
    var _workflowDetails4, _workflowDetails4$dat, _workflowDetails4$dat2, _workflowDetails4$dat3;
    if (businessService == "PT.CREATE") setBusinessService("PT.UPDATE");
    if (!((_workflowDetails4 = workflowDetails) !== null && _workflowDetails4 !== void 0 && (_workflowDetails4$dat = _workflowDetails4.data) !== null && _workflowDetails4$dat !== void 0 && (_workflowDetails4$dat2 = _workflowDetails4$dat.actionState) !== null && _workflowDetails4$dat2 !== void 0 && (_workflowDetails4$dat3 = _workflowDetails4$dat2.nextActions) !== null && _workflowDetails4$dat3 !== void 0 && _workflowDetails4$dat3.find(e => e.action === "UPDATE"))) {
      var _workflowDetails5, _workflowDetails5$dat, _workflowDetails5$dat2, _workflowDetails5$dat3;
      (_workflowDetails5 = workflowDetails) === null || _workflowDetails5 === void 0 ? void 0 : (_workflowDetails5$dat = _workflowDetails5.data) === null || _workflowDetails5$dat === void 0 ? void 0 : (_workflowDetails5$dat2 = _workflowDetails5$dat.actionState) === null || _workflowDetails5$dat2 === void 0 ? void 0 : (_workflowDetails5$dat3 = _workflowDetails5$dat2.nextActions) === null || _workflowDetails5$dat3 === void 0 ? void 0 : _workflowDetails5$dat3.push({
        action: "UPDATE",
        redirectionUrl: {
          pathname: `/digit-ui/employee/pt/modify-application/${applicationNumber}`,
          state: {
            workflow: {
              action: "OPEN",
              moduleName: "PT",
              businessService: "PT.UPDATE"
            }
          }
        },
        tenantId: Digit.ULBService.getStateId()
      });
    }
  }
  if (fetchBillLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const UpdatePropertyNumberComponent = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent("EmployeeUpdateOwnerNumber");
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Header, null, t("PT_PROPERTY_INFORMATION")), /*#__PURE__*/React.createElement(ApplicationDetails, {
    applicationDetails: appDetailsToShow,
    isLoading: isLoading,
    isDataLoading: isLoading,
    applicationData: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationData,
    mutate: null,
    workflowDetails: (appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app14 = appDetailsToShow.applicationData) === null || _appDetailsToShow$app14 === void 0 ? void 0 : _appDetailsToShow$app14.status) === "ACTIVE" ? workflowDetails : {},
    businessService: "PT",
    showToast: showToast,
    setShowToast: setShowToast,
    closeToast: closeToast,
    showTimeLine: false,
    timelineStatusPrefix: "ES_PT_COMMON_STATUS_",
    forcedActionPrefix: "WF_EMPLOYEE_PT.CREATE"
  }), showModal ? /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement("h1", {
      className: "heading-m"
    }, showUpdateNo ? t("PTUPNO_HEADER") : t("PT_OWNER_HISTORY")),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn$7, {
      onClick: () => {
        setShowModal(false);
        setShowUpdateNo(false);
      }
    }),
    hideSubmit: true,
    isDisabled: false,
    popupStyles: showUpdateNo ? {
      width: isMobile ? "473px" : "50%"
    } : {
      width: "75%"
    }
  }, showUpdateNo && /*#__PURE__*/React.createElement(UpdatePropertyNumberComponent, {
    showPopup: setShowModal,
    name: showUpdateNo === null || showUpdateNo === void 0 ? void 0 : showUpdateNo.name,
    UpdateNumberConfig: UpdateNumberConfig,
    mobileNumber: showUpdateNo === null || showUpdateNo === void 0 ? void 0 : showUpdateNo.mobileNumber,
    t: t,
    onValidation: (data, showToast) => {
      let newProp = {
        ...(appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationData)
      };
      newProp.owners[showUpdateNo === null || showUpdateNo === void 0 ? void 0 : showUpdateNo.index].mobileNumber = data.mobileNumber;
      newProp.creationReason = "UPDATE";
      newProp.workflow = null;
      let newDocObj = {
        ...data
      };
      delete newDocObj.mobileNumber;
      newProp.documents = [...newProp.documents, ...Object.keys(newDocObj).map(key => ({
        documentType: key,
        documentUid: newDocObj[key],
        fileStoreId: newDocObj[key]
      }))];
      mutation.mutate({
        Property: newProp
      }, {
        onError: {},
        onSuccess: async successRes => {
          showToast();
          setTimeout(() => {
            window.location.reload();
          }, 3000);
        }
      });
    }
  }), !showUpdateNo && /*#__PURE__*/React.createElement(OwnerHistory, {
    propertyId: applicationNumber,
    userType: "employee"
  })) : null);
};

const AssessmentDetails = () => {
  var _location$state, _applicationDetails$a, _appDetailsToShow$app, _appDetailsToShow$app2, _location$state2, _location$state2$Asse, _applicationDetails$a2, _address_to_display, _location$state4, _location$state4$Asse, _paymentDetails$data, _paymentDetails$data$, _paymentDetails$data$2, _paymentDetails$data$3, _paymentDetails$data$4, _applicationDetails$a3, _applicationDetails$a4, _applicationDetails$a5, _applicationDetails$a6, _applicationDetails$a7, _applicationDetails$a8, _applicationDetails$a9, _applicationDetails$a10, _applicationDetails$a11, _location$state5, _location$state5$Asse, _location$state6, _location$state6$Asse, _paymentDetails$data2, _paymentDetails$data3, _paymentDetails$data4;
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    id: propertyId
  } = useParams();
  const stateId = Digit.ULBService.getStateId();
  const location = useLocation();
  const AssessmentData = location === null || location === void 0 ? void 0 : (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.Assessment;
  const [showToast, setShowToast] = useState(null);
  const queryClient = useQueryClient();
  const history = useHistory();
  const [appDetailsToShow, setAppDetailsToShow] = useState({});
  const isMobile = window.Digit.Utils.browser.isMobile();
  const [popup, showPopUp] = useState(false);
  const [selectedPenalityReason, setSelectedPenalityReason] = useState(null);
  const [selectedRebateReason, setSelectedRebateReason] = useState(null);
  const first_temp = useRef();
  const second_temp = useRef();
  const third_temp = useRef();
  const fourth_temp = useRef();
  const getPropertyTypeLocale = value => {
    return `PROPERTYTAX_BILLING_SLAB_${value === null || value === void 0 ? void 0 : value.split(".")[0]}`;
  };
  const getPropertySubtypeLocale = value => `PROPERTYTAX_BILLING_SLAB_${value}`;
  let {
    isLoading,
    isError,
    data: applicationDetails,
    error
  } = Digit.Hooks.pt.useApplicationDetail(t, tenantId, propertyId);
  const {
    isLoading: assessmentLoading,
    mutate: assessmentMutate
  } = Digit.Hooks.pt.usePropertyAssessment(tenantId);
  const {
    isLoading: ptCalculationEstimateLoading,
    data: ptCalculationEstimateData,
    mutate: ptCalculationEstimateMutate
  } = Digit.Hooks.pt.usePtCalculationEstimate(tenantId);
  const {
    data: ChargeSlabsMenu,
    isLoading: isChargeSlabsLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "ChargeSlabs");
  const fetchBillParams = {
    consumerCode: propertyId
  };
  let ptCalculationEstimateDataCopy;
  if (!ptCalculationEstimateDataCopy) ptCalculationEstimateDataCopy = ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : ptCalculationEstimateData.Calculation[0];
  const paymentDetails = Digit.Hooks.useFetchBillsForBuissnessService({
    businessService: "PT",
    ...fetchBillParams,
    tenantId: tenantId
  }, {
    enabled: propertyId ? true : false
  });
  useEffect(() => {
    ptCalculationEstimateMutate({
      Assessment: AssessmentData
    });
  }, []);
  useEffect(() => {
    if (applicationDetails) setAppDetailsToShow(lodash.cloneDeep(applicationDetails));
  }, [applicationDetails]);
  let workflowDetails = Digit.Hooks.useWorkflowDetails({
    tenantId: (applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.tenantId) || tenantId,
    id: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a = applicationDetails.applicationData) === null || _applicationDetails$a === void 0 ? void 0 : _applicationDetails$a.acknowldgementNumber,
    moduleCode: "PT",
    role: "PT_CEMP"
  });
  appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app === void 0 ? void 0 : _appDetailsToShow$app.shift();
  appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : (_appDetailsToShow$app2 = appDetailsToShow.applicationDetails) === null || _appDetailsToShow$app2 === void 0 ? void 0 : _appDetailsToShow$app2.unshift({
    title: "PT_ESTIMATE_DETAILS_HEADER",
    values: [{
      title: "PT_PROPERTY_PTUID",
      value: propertyId
    }, {
      title: "ES_PT_TITLE_BILLING_PERIOD",
      value: location === null || location === void 0 ? void 0 : (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : (_location$state2$Asse = _location$state2.Assessment) === null || _location$state2$Asse === void 0 ? void 0 : _location$state2$Asse.financialYear
    }],
    additionalDetails: {
      taxHeadEstimatesCalculation: ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : ptCalculationEstimateData.Calculation[0]
    }
  });
  const closeToast = () => {
    setShowToast(null);
  };
  const handleAssessment = () => {
    var _location$state3, _location$state3$Asse;
    if (!queryClient.getQueryData(["PT_ASSESSMENT", propertyId, location === null || location === void 0 ? void 0 : (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : (_location$state3$Asse = _location$state3.Assessment) === null || _location$state3$Asse === void 0 ? void 0 : _location$state3$Asse.financialYear])) {
      assessmentMutate({
        Assessment: AssessmentData
      }, {
        onError: (error, variables) => {
          var _error$response, _error$response$data, _error$response$data$, _error$response2, _error$response2$data, _error$response2$data2;
          setShowToast({
            key: "error",
            action: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.Errors[0]) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || error.message,
            error: {
              message: (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.Errors[0]) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.code) || error.message
            }
          });
          setTimeout(closeToast, 5000);
        },
        onSuccess: (data, variables) => {
          var _data$Assessments, _data$Assessments$, _data$Assessments$$au;
          sessionStorage.setItem("IsPTAccessDone", data === null || data === void 0 ? void 0 : (_data$Assessments = data.Assessments) === null || _data$Assessments === void 0 ? void 0 : (_data$Assessments$ = _data$Assessments[0]) === null || _data$Assessments$ === void 0 ? void 0 : (_data$Assessments$$au = _data$Assessments$.auditDetails) === null || _data$Assessments$$au === void 0 ? void 0 : _data$Assessments$$au.lastModifiedTime);
          setShowToast({
            key: "success",
            action: {
              action: "ASSESSMENT"
            }
          });
          setTimeout(closeToast, 5000);
          history.push(`/digit-ui/employee/payment/collect/PT/${propertyId}`);
        }
      });
    }
  };
  const proceeedToPay = () => {
    history.push(`/digit-ui/employee/payment/collect/PT/${propertyId}`);
  };
  if (ptCalculationEstimateLoading || assessmentLoading || !(applicationDetails !== null && applicationDetails !== void 0 && applicationDetails.applicationDetails)) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  let address_to_display = applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a2 = applicationDetails.applicationData) === null || _applicationDetails$a2 === void 0 ? void 0 : _applicationDetails$a2.address;
  if ((_address_to_display = address_to_display) !== null && _address_to_display !== void 0 && _address_to_display.doorNo) {
    var _address_to_display2, _address_to_display3, _address_to_display3$, _address_to_display4;
    address_to_display = ((_address_to_display2 = address_to_display) === null || _address_to_display2 === void 0 ? void 0 : _address_to_display2.doorNo) + ',' + ((_address_to_display3 = address_to_display) === null || _address_to_display3 === void 0 ? void 0 : (_address_to_display3$ = _address_to_display3.locality) === null || _address_to_display3$ === void 0 ? void 0 : _address_to_display3$.area) + ',' + ((_address_to_display4 = address_to_display) === null || _address_to_display4 === void 0 ? void 0 : _address_to_display4.city);
  } else {
    var _address_to_display5, _address_to_display5$, _address_to_display6;
    address_to_display = ((_address_to_display5 = address_to_display) === null || _address_to_display5 === void 0 ? void 0 : (_address_to_display5$ = _address_to_display5.locality) === null || _address_to_display5$ === void 0 ? void 0 : _address_to_display5$.area) + ',' + ((_address_to_display6 = address_to_display) === null || _address_to_display6 === void 0 ? void 0 : _address_to_display6.city);
  }
  const Heading = props => {
    return /*#__PURE__*/React.createElement("h1", {
      className: "heading-m"
    }, props.label);
  };
  const Close = () => /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
  const CloseBtn = props => {
    return /*#__PURE__*/React.createElement("div", {
      className: "icon-bg-secondary",
      onClick: props.onClick
    }, /*#__PURE__*/React.createElement(Close, null));
  };
  function change() {
    var _ptCalculationEstimat;
    var total_amount = ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : (_ptCalculationEstimat = ptCalculationEstimateData.Calculation[0]) === null || _ptCalculationEstimat === void 0 ? void 0 : _ptCalculationEstimat.totalAmount;
    const [first, second] = [parseInt(first_temp.current.value), parseInt(second_temp.current.value)];
    if (selectedPenalityReason && first > 0) {
      if (selectPenalityReason.value !== 'Others') {
        if (first < total_amount) {
          var _ptCalculationEstimat2, _ptCalculationEstimat3;
          var additionalPenality = first;
          ptCalculationEstimateData.Calculation[0].taxHeadEstimates[6] = {
            "taxHeadCode": "PT_TIME_PENALTY",
            "estimateAmount": ((_ptCalculationEstimat2 = ptCalculationEstimateData.Calculation[0].taxHeadEstimates[6]) === null || _ptCalculationEstimat2 === void 0 ? void 0 : _ptCalculationEstimat2.estimateAmount) + first,
            "category": "TAX"
          };
          AssessmentData.additionalDetails = {
            "adhocPenalty": additionalPenality,
            "adhocPenaltyReason": selectedPenalityReason.value
          };
          ptCalculationEstimateData.Calculation[0].totalAmount = (ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : (_ptCalculationEstimat3 = ptCalculationEstimateData.Calculation[0]) === null || _ptCalculationEstimat3 === void 0 ? void 0 : _ptCalculationEstimat3.totalAmount) + first;
        } else {
          alert("Penality cannot exceed total amount");
        }
      } else {
        if (first < total_amount) {
          var _ptCalculationEstimat4, _ptCalculationEstimat5;
          var additionalPenality = first;
          ptCalculationEstimateData.Calculation[0].taxHeadEstimates[6] = {
            "taxHeadCode": "PT_TIME_PENALTY",
            "estimateAmount": ((_ptCalculationEstimat4 = ptCalculationEstimateData.Calculation[0].taxHeadEstimates[6]) === null || _ptCalculationEstimat4 === void 0 ? void 0 : _ptCalculationEstimat4.estimateAmount) + first,
            "category": "TAX"
          };
          AssessmentData.additionalDetails = {
            "adhocPenalty": additionalPenality,
            "adhocPenaltyReason": fourth_temp.current.value
          };
          ptCalculationEstimateData.Calculation[0].totalAmount = (ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : (_ptCalculationEstimat5 = ptCalculationEstimateData.Calculation[0]) === null || _ptCalculationEstimat5 === void 0 ? void 0 : _ptCalculationEstimat5.totalAmount) + first;
        } else {
          alert("Penality cannot exceed total amount");
        }
      }
    }
    if (selectedRebateReason && second) {
      if (selectedRebateReason.value !== "Others") {
        if (second > 0) {
          if (second < total_amount) {
            var _ptCalculationEstimat6, _ptCalculationEstimat7;
            ptCalculationEstimateData.Calculation[0].taxHeadEstimates[5] = {
              "taxHeadCode": "PT_TIME_REBATE",
              "estimateAmount": ((_ptCalculationEstimat6 = ptCalculationEstimateData.Calculation[0].taxHeadEstimates[5]) === null || _ptCalculationEstimat6 === void 0 ? void 0 : _ptCalculationEstimat6.estimateAmount) + second,
              "category": "TAX"
            };
            AssessmentData.additionalDetails = {
              "adhocExemption": second,
              "adhocExemptionReason": selectedRebateReason.value
            };
            ptCalculationEstimateData.Calculation[0].totalAmount = (ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : (_ptCalculationEstimat7 = ptCalculationEstimateData.Calculation[0]) === null || _ptCalculationEstimat7 === void 0 ? void 0 : _ptCalculationEstimat7.totalAmount) - second;
          } else {
            alert("Adhoc Exemption cannot be greater than the estimated tax for the given property");
          }
        }
      } else {
        if (second > 0) {
          if (second < total_amount) {
            var _ptCalculationEstimat8, _ptCalculationEstimat9;
            ptCalculationEstimateData.Calculation[0].taxHeadEstimates[5] = {
              "taxHeadCode": "PT_TIME_REBATE",
              "estimateAmount": ((_ptCalculationEstimat8 = ptCalculationEstimateData.Calculation[0].taxHeadEstimates[5]) === null || _ptCalculationEstimat8 === void 0 ? void 0 : _ptCalculationEstimat8.estimateAmount) - second,
              "category": "TAX"
            };
            AssessmentData.additionalDetails = {
              "adhocExemption": second,
              "adhocExemptionReason": third_temp.current.value
            };
            ptCalculationEstimateData.Calculation[0].totalAmount = (ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : (_ptCalculationEstimat9 = ptCalculationEstimateData.Calculation[0]) === null || _ptCalculationEstimat9 === void 0 ? void 0 : _ptCalculationEstimat9.totalAmount) - second;
          } else {
            alert("Adhoc Exemption cannot be greater than the estimated tax for the given property");
          }
        }
      }
    }
    setSelectedPenalityReason(null);
    setSelectedRebateReason(null);
    showPopUp(false);
  }
  const Penality_menu = [{
    title: "PT_PENDING_DUES_FROM_EARLIER",
    value: "Pending dues from earlier"
  }, {
    title: "PT_MISCALCULATION_OF_EARLIER_ASSESSMENT",
    value: "Miscalculation of earlier Assessment"
  }, {
    title: "PT_ONE_TIME_PENALITY",
    value: "One time penality"
  }, {
    title: "PT_OTHERS",
    value: "Others"
  }];
  const Rebate_menu = [{
    title: "PT_ADVANCED_PAID_BY_CITIZEN_EARLIER",
    value: "Advanced Paid By Citizen Earlier"
  }, {
    title: "PT_REBATE_PROVIDED_BY_COMMISSIONER_EO",
    value: "Rebate provided by commissioner/EO"
  }, {
    title: "PT_ADDITIONAL_AMOUNT_CHARGED_FROM_THE_CITIZEN",
    value: "Additional amount charged from the citizen"
  }, {
    title: "PT_OTHERS",
    value: "Others"
  }];
  const selectPenalityReason = reason => {
    setSelectedPenalityReason(reason);
  };
  const selectRebateReason = reason => {
    setSelectedRebateReason(reason);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Header, null, t("PT_TX_ASSESSMENT")), /*#__PURE__*/React.createElement(ApplicationDetails, {
    applicationDetails: {
      applicationDetails: [{
        title: "PT_ESTIMATE_DETAILS_HEADER",
        values: [{
          title: "PT_PROPERTY_PTUID",
          value: propertyId
        }, {
          title: "PT_ADDRESS",
          value: address_to_display
        }, {
          title: "ES_PT_TITLE_BILLING_PERIOD",
          value: location === null || location === void 0 ? void 0 : (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : (_location$state4$Asse = _location$state4.Assessment) === null || _location$state4$Asse === void 0 ? void 0 : _location$state4$Asse.financialYear
        }, {
          title: "PT_BILLING_DUE_DATE",
          value: convertEpochToDate(paymentDetails === null || paymentDetails === void 0 ? void 0 : (_paymentDetails$data = paymentDetails.data) === null || _paymentDetails$data === void 0 ? void 0 : (_paymentDetails$data$ = _paymentDetails$data.Bill) === null || _paymentDetails$data$ === void 0 ? void 0 : (_paymentDetails$data$2 = _paymentDetails$data$[0]) === null || _paymentDetails$data$2 === void 0 ? void 0 : (_paymentDetails$data$3 = _paymentDetails$data$2.billDetails) === null || _paymentDetails$data$3 === void 0 ? void 0 : (_paymentDetails$data$4 = _paymentDetails$data$3[0]) === null || _paymentDetails$data$4 === void 0 ? void 0 : _paymentDetails$data$4.expiryDate, "PT") || t("CS_NA")
        }]
      }, {
        title: "PT_TAX_ESTIMATION_HEADER",
        additionalDetails: {
          taxHeadEstimatesCalculation: ptCalculationEstimateData === null || ptCalculationEstimateData === void 0 ? void 0 : ptCalculationEstimateData.Calculation[0]
        }
      }, {
        belowComponent: () => /*#__PURE__*/React.createElement(LinkLabel, {
          onClick: () => {
            showPopUp(true);
          },
          style: isMobile ? {
            color: "#a82227",
            marginLeft: "0px"
          } : {
            color: "#a82227"
          }
        }, t("PT_ADD_REBATE_PENALITY"))
      }, {
        title: "PT_ASSESMENT_INFO_SUB_HEADER",
        values: [{
          title: "PT_ASSESMENT_INFO_TYPE_OF_BUILDING",
          value: getPropertyTypeLocale(applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a3 = applicationDetails.applicationData) === null || _applicationDetails$a3 === void 0 ? void 0 : _applicationDetails$a3.propertyType)
        }, {
          title: "PT_ASSESMENT_INFO_USAGE_TYPE",
          value: getPropertySubtypeLocale(applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a4 = applicationDetails.applicationData) === null || _applicationDetails$a4 === void 0 ? void 0 : _applicationDetails$a4.usageCategory)
        }, {
          title: "PT_ASSESMENT_INFO_PLOT_SIZE",
          value: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a5 = applicationDetails.applicationData) === null || _applicationDetails$a5 === void 0 ? void 0 : _applicationDetails$a5.landArea
        }, {
          title: "PT_ASSESMENT_INFO_NO_OF_FLOOR",
          value: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a6 = applicationDetails.applicationData) === null || _applicationDetails$a6 === void 0 ? void 0 : _applicationDetails$a6.noOfFloors
        }],
        additionalDetails: {
          floors: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a7 = applicationDetails.applicationData) === null || _applicationDetails$a7 === void 0 ? void 0 : (_applicationDetails$a8 = _applicationDetails$a7.units) === null || _applicationDetails$a8 === void 0 ? void 0 : (_applicationDetails$a9 = _applicationDetails$a8.filter(e => e.active)) === null || _applicationDetails$a9 === void 0 ? void 0 : (_applicationDetails$a10 = _applicationDetails$a9.sort) === null || _applicationDetails$a10 === void 0 ? void 0 : (_applicationDetails$a11 = _applicationDetails$a10.call(_applicationDetails$a9, (a, b) => a.floorNo - b.floorNo)) === null || _applicationDetails$a11 === void 0 ? void 0 : _applicationDetails$a11.map((unit, index) => {
            var _unit$usageCategory, _unit$constructionDet;
            const values = [{
              title: `${t("ES_APPLICATION_DETAILS_UNIT")} ${index + 1}`,
              value: ""
            }, {
              title: "Floor No",
              value: unit === null || unit === void 0 ? void 0 : unit.floorNo
            }, {
              title: "PT_ASSESSMENT_UNIT_USAGE_TYPE",
              value: `PROPERTYTAX_BILLING_SLAB_${(unit === null || unit === void 0 ? void 0 : unit.usageCategory) != "RESIDENTIAL" ? unit === null || unit === void 0 ? void 0 : (_unit$usageCategory = unit.usageCategory) === null || _unit$usageCategory === void 0 ? void 0 : _unit$usageCategory.split(".")[1] : unit === null || unit === void 0 ? void 0 : unit.usageCategory}`
            }, {
              title: "PT_ASSESMENT_INFO_OCCUPLANCY",
              value: unit === null || unit === void 0 ? void 0 : unit.occupancyType
            }, {
              title: "PT_FORM2_BUILT_AREA",
              value: unit === null || unit === void 0 ? void 0 : (_unit$constructionDet = unit.constructionDetail) === null || _unit$constructionDet === void 0 ? void 0 : _unit$constructionDet.builtUpArea
            }];
            if (unit.occupancyType === "RENTED") values.push({
              title: "PT_FORM2_TOTAL_ANNUAL_RENT",
              value: unit.arv
            });
            return {
              title: "",
              values: [{
                title: "",
                values
              }]
            };
          })
        }
      }, {
        belowComponent: () => {
          var _applicationDetails$a12, _applicationDetails$a13, _applicationDetails$a14, _applicationDetails$a15, _applicationDetails$a16;
          return /*#__PURE__*/React.createElement("div", {
            style: {
              marginTop: "19px"
            }
          }, /*#__PURE__*/React.createElement(CardSubHeader, {
            style: {
              marginBottom: "8px",
              color: "#0B0C0C",
              fontSize: "24px"
            }
          }, t("PT_CALC_DETAILS"), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement(CardSectionHeader, {
            style: {
              marginBottom: "16px",
              color: "#0B0C0C",
              fontSize: "16px",
              marginTop: "revert"
            }
          }, t("PT_CALC_LOGIC_HEADER")), /*#__PURE__*/React.createElement(CardText, {
            style: {
              fontSize: "16px"
            }
          }, t("PT_CALC_LOGIC")), /*#__PURE__*/React.createElement("div", {
            style: {
              border: "1px solid #D6D5D4",
              padding: "16px",
              marginTop: "8px",
              borderRadius: "4px",
              background: "#FAFAFA"
            }
          }, /*#__PURE__*/React.createElement("div", {
            className: "row border-none"
          }, /*#__PURE__*/React.createElement("h2", null, t("PT_APPLICABLE_CHARGE_SLABS"))), /*#__PURE__*/React.createElement(StatusTable, null, applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a12 = applicationDetails.applicationData) === null || _applicationDetails$a12 === void 0 ? void 0 : (_applicationDetails$a13 = _applicationDetails$a12.units) === null || _applicationDetails$a13 === void 0 ? void 0 : (_applicationDetails$a14 = _applicationDetails$a13.filter(e => e.active)) === null || _applicationDetails$a14 === void 0 ? void 0 : (_applicationDetails$a15 = _applicationDetails$a14.sort) === null || _applicationDetails$a15 === void 0 ? void 0 : (_applicationDetails$a16 = _applicationDetails$a15.call(_applicationDetails$a14, (a, b) => a.floorNo - b.floorNo)) === null || _applicationDetails$a16 === void 0 ? void 0 : _applicationDetails$a16.map((unit, index) => {
            var _ChargeSlabsMenu$Prop, _ChargeSlabsMenu$Prop2, _ChargeSlabsMenu$Prop3, _ChargeSlabsMenu$Prop4;
            return /*#__PURE__*/React.createElement(Row, {
              label: `${t(`PROPERTYTAX_FLOOR_${unit === null || unit === void 0 ? void 0 : unit.floorNo}`)} ${t(`PT_UNIT`)} - ${index + 1}`,
              text: (ChargeSlabsMenu === null || ChargeSlabsMenu === void 0 ? void 0 : ChargeSlabsMenu.PropertyTax) && (ChargeSlabsMenu === null || ChargeSlabsMenu === void 0 ? void 0 : (_ChargeSlabsMenu$Prop = ChargeSlabsMenu.PropertyTax) === null || _ChargeSlabsMenu$Prop === void 0 ? void 0 : (_ChargeSlabsMenu$Prop2 = _ChargeSlabsMenu$Prop.ChargeSlabs) === null || _ChargeSlabsMenu$Prop2 === void 0 ? void 0 : (_ChargeSlabsMenu$Prop3 = _ChargeSlabsMenu$Prop2.filter(ob => ob.floorNo == unit.floorNo)) === null || _ChargeSlabsMenu$Prop3 === void 0 ? void 0 : (_ChargeSlabsMenu$Prop4 = _ChargeSlabsMenu$Prop3[0]) === null || _ChargeSlabsMenu$Prop4 === void 0 ? void 0 : _ChargeSlabsMenu$Prop4.name)
            });
          }))));
        }
      }]
    },
    showTimeLine: false,
    isLoading: isLoading,
    isDataLoading: isLoading,
    applicationData: appDetailsToShow === null || appDetailsToShow === void 0 ? void 0 : appDetailsToShow.applicationData,
    mutate: null,
    workflowDetails: queryClient.getQueryData(["PT_ASSESSMENT", propertyId, location === null || location === void 0 ? void 0 : (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : (_location$state5$Asse = _location$state5.Assessment) === null || _location$state5$Asse === void 0 ? void 0 : _location$state5$Asse.financialYear]) ? {
      ...workflowDetails,
      data: {
        ...workflowDetails.data,
        nextActions: []
      }
    } : workflowDetails,
    businessService: "PT",
    assessmentMutate: assessmentMutate,
    ptCalculationEstimateMutate: ptCalculationEstimateMutate,
    showToast: showToast,
    setShowToast: setShowToast,
    closeToast: closeToast,
    timelineStatusPrefix: "ES_PT_COMMON_STATUS_",
    forcedActionPrefix: "WF_EMPLOYEE_PT.CREATE"
  }), popup && /*#__PURE__*/React.createElement(Modal, {
    headerBarMain: /*#__PURE__*/React.createElement(Heading, {
      label: t("PT_ADD_REBATE_PENALITY")
    }),
    headerBarEnd: /*#__PURE__*/React.createElement(CloseBtn, {
      onClick: () => {
        showPopUp(false), ptCalculationEstimateData.Calculation[0] = ptCalculationEstimateDataCopy;
        setSelectedPenalityReason(null);
        setSelectedRebateReason(null);
      }
    }),
    actionCancelLabel: t("PT_CANCEL"),
    actionCancelOnSubmit: () => {
      ptCalculationEstimateData.Calculation[0] = ptCalculationEstimateDataCopy;
      setSelectedPenalityReason(null);
      setSelectedRebateReason(null);
      showPopUp(false);
    },
    actionSaveLabel: t("PT_ADD"),
    actionSaveOnSubmit: () => change(),
    hideSubmit: false
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardSectionHeader, null, t("PT_AD_PENALTY")), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_TX_HEADS")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-input field"
  }, /*#__PURE__*/React.createElement(Dropdown, {
    isMandatory: true,
    option: Penality_menu,
    optionKey: "value",
    select: selectPenalityReason,
    selected: selectedPenalityReason,
    isPropertyAssess: true,
    t: t
  })))), selectedPenalityReason && selectedPenalityReason.value === "Others" && /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_REASON")), /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-input field"
  }, /*#__PURE__*/React.createElement("input", {
    type: "type",
    className: "employee-card-input false focus-visible undefined",
    ref: fourth_temp
  })))), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_HEAD_AMT")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-input field"
  }, /*#__PURE__*/React.createElement("input", {
    key: "firstTemp",
    type: "number",
    className: "employee-card-input false focus-visible undefined",
    ref: first_temp
  }))))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardSectionHeader, null, t("PT_AD_REBATE")), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_TX_HEADS")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-input field"
  }, /*#__PURE__*/React.createElement(Dropdown, {
    isMandatory: true,
    option: Rebate_menu,
    optionKey: "value",
    select: selectRebateReason,
    selected: selectedRebateReason,
    isPropertyAssess: true,
    t: t
  })))), selectedRebateReason && selectedRebateReason.value === "Others" && /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("PT_REASON")), /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-input field"
  }, /*#__PURE__*/React.createElement("input", {
    type: "type",
    className: "employee-card-input false focus-visible undefined",
    ref: third_temp
  })))), /*#__PURE__*/React.createElement(CardLabel, null, t("PT_HEAD_AMT")), /*#__PURE__*/React.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-input field"
  }, /*#__PURE__*/React.createElement("input", {
    type: "number",
    className: "employee-card-input false focus-visible undefined",
    ref: second_temp
  }))))))), !queryClient.getQueryData(["PT_ASSESSMENT", propertyId, location === null || location === void 0 ? void 0 : (_location$state6 = location.state) === null || _location$state6 === void 0 ? void 0 : (_location$state6$Asse = _location$state6.Assessment) === null || _location$state6$Asse === void 0 ? void 0 : _location$state6$Asse.financialYear]) ? /*#__PURE__*/React.createElement(ActionBar, null, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("PT_ASSESS_PROPERTY_BUTTON"),
    onSubmit: handleAssessment
  })) : /*#__PURE__*/React.createElement(ActionBar, null, /*#__PURE__*/React.createElement(SubmitBar, {
    disabled: (paymentDetails === null || paymentDetails === void 0 ? void 0 : (_paymentDetails$data2 = paymentDetails.data) === null || _paymentDetails$data2 === void 0 ? void 0 : (_paymentDetails$data3 = _paymentDetails$data2.Bill) === null || _paymentDetails$data3 === void 0 ? void 0 : (_paymentDetails$data4 = _paymentDetails$data3[0]) === null || _paymentDetails$data4 === void 0 ? void 0 : _paymentDetails$data4.totalAmount) > 0 ? false : true,
    label: t("PT_PROCEED_PAYMENT"),
    onSubmit: proceeedToPay
  })));
};

const EditForm = ({
  applicationData
}) => {
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const {
    state
  } = useLocation();
  const [canSubmit, setSubmitValve] = useState(false);
  const [mutationHappened, setMutationHappened, clear] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_HAPPENED", false);
  const [successData, setsuccessData, clearSuccessData] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_SUCCESS_DATA", {});
  const {
    data: commonFields,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "PropertyTax", "CommonFieldsConfig");
  useEffect(() => {
    setMutationHappened(false);
    clearSuccessData();
  }, []);
  const defaultValues = {
    originalData: applicationData,
    address: applicationData === null || applicationData === void 0 ? void 0 : applicationData.address,
    owners: applicationData === null || applicationData === void 0 ? void 0 : applicationData.owners.map(owner => ({
      ...owner,
      ownerType: {
        code: owner.ownerType,
        i18nKey: owner.ownerType
      },
      relationship: {
        code: owner.relationship,
        i18nKey: `PT_FORM3_${owner.relationship}`
      },
      gender: {
        code: owner.gender,
        i18nKey: `PT_FORM3_${owner.gender}`,
        value: owner.gender
      }
    }))
  };
  sessionStorage.setItem("PropertyInitials", JSON.stringify(defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.originalData));
  const onFormValueChange = (setValue, formData, formState) => {
    if (Object.keys(formState.errors).length == 1 && formState.errors.documents) setSubmitValve(true);else setSubmitValve(!Object.keys(formState.errors).length);
  };
  const onSubmit = data => {
    var _data$address, _data$address$city, _data$PropertyType, _state$workflow, _data$usageCategoryMi, _data$usageCategoryMi2, _data$usageCategoryMa, _data$usageCategoryMa2, _data$usageCategoryMa3, _data$documents2, _data$documents3, _applicationData$unit, _data$units, _state$workflow2;
    const formData = {
      ...applicationData,
      address: {
        ...(applicationData === null || applicationData === void 0 ? void 0 : applicationData.address),
        ...(data === null || data === void 0 ? void 0 : data.address),
        city: data === null || data === void 0 ? void 0 : (_data$address = data.address) === null || _data$address === void 0 ? void 0 : (_data$address$city = _data$address.city) === null || _data$address$city === void 0 ? void 0 : _data$address$city.name
      },
      propertyType: data === null || data === void 0 ? void 0 : (_data$PropertyType = data.PropertyType) === null || _data$PropertyType === void 0 ? void 0 : _data$PropertyType.code,
      creationReason: (state === null || state === void 0 ? void 0 : (_state$workflow = state.workflow) === null || _state$workflow === void 0 ? void 0 : _state$workflow.businessService) === "PT.UPDATE" || (applicationData === null || applicationData === void 0 ? void 0 : applicationData.documents) == null ? "UPDATE" : applicationData === null || applicationData === void 0 ? void 0 : applicationData.creationReason,
      usageCategory: data !== null && data !== void 0 && (_data$usageCategoryMi = data.usageCategoryMinor) !== null && _data$usageCategoryMi !== void 0 && _data$usageCategoryMi.subuagecode ? data === null || data === void 0 ? void 0 : (_data$usageCategoryMi2 = data.usageCategoryMinor) === null || _data$usageCategoryMi2 === void 0 ? void 0 : _data$usageCategoryMi2.subuagecode : data === null || data === void 0 ? void 0 : (_data$usageCategoryMa = data.usageCategoryMajor) === null || _data$usageCategoryMa === void 0 ? void 0 : _data$usageCategoryMa.code,
      usageCategoryMajor: data === null || data === void 0 ? void 0 : (_data$usageCategoryMa2 = data.usageCategoryMajor) === null || _data$usageCategoryMa2 === void 0 ? void 0 : _data$usageCategoryMa2.code.split(".")[0],
      usageCategoryMinor: (data === null || data === void 0 ? void 0 : (_data$usageCategoryMa3 = data.usageCategoryMajor) === null || _data$usageCategoryMa3 === void 0 ? void 0 : _data$usageCategoryMa3.code.split(".")[1]) || null,
      noOfFloors: Number(data === null || data === void 0 ? void 0 : data.noOfFloors),
      landArea: Number(data === null || data === void 0 ? void 0 : data.landarea),
      superBuiltUpArea: Number(data === null || data === void 0 ? void 0 : data.landarea),
      source: "MUNICIPAL_RECORDS",
      channel: "CFC_COUNTER",
      documents: applicationData !== null && applicationData !== void 0 && applicationData.documents ? applicationData === null || applicationData === void 0 ? void 0 : applicationData.documents.map(old => {
        var _data$documents, _data$documents$docum;
        let dt = old.documentType.split(".");
        let newDoc = data === null || data === void 0 ? void 0 : (_data$documents = data.documents) === null || _data$documents === void 0 ? void 0 : (_data$documents$docum = _data$documents.documents) === null || _data$documents$docum === void 0 ? void 0 : _data$documents$docum.find(e => e.documentType.includes(dt[0] + "." + dt[1]));
        return {
          ...old,
          ...newDoc
        };
      }) : (data === null || data === void 0 ? void 0 : (_data$documents2 = data.documents) === null || _data$documents2 === void 0 ? void 0 : _data$documents2.documents.length) > 0 ? data === null || data === void 0 ? void 0 : (_data$documents3 = data.documents) === null || _data$documents3 === void 0 ? void 0 : _data$documents3.documents : null,
      units: [...((applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$unit = applicationData.units) === null || _applicationData$unit === void 0 ? void 0 : _applicationData$unit.map(old => ({
        ...old,
        active: false
      }))) || []), ...((data === null || data === void 0 ? void 0 : (_data$units = data.units) === null || _data$units === void 0 ? void 0 : _data$units.map(unit => {
        return {
          ...unit,
          active: true
        };
      })) || [])],
      workflow: state === null || state === void 0 ? void 0 : state.workflow,
      applicationStatus: "UPDATE"
    };
    if ((state === null || state === void 0 ? void 0 : (_state$workflow2 = state.workflow) === null || _state$workflow2 === void 0 ? void 0 : _state$workflow2.action) === "OPEN") {
      formData.units = formData.units.filter(unit => unit.active);
    }
    history.push("/digit-ui/employee/pt/response", {
      Property: formData,
      key: "UPDATE",
      action: "SUBMIT"
    });
  };
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const configs = commonFields ? commonFields : newConfig;
  return /*#__PURE__*/React.createElement(FormComposer, {
    heading: t("PT_UPDATE_PROPERTY"),
    isDisabled: !canSubmit,
    label: t("ES_COMMON_APPLICATION_SUBMIT"),
    config: configs.map(config => {
      return {
        ...config,
        body: [...config.body.filter(a => !a.hideInEmployee), {
          withoutLabel: true,
          type: "custom",
          populators: {
            name: "originalData",
            component: (props, customProps) => /*#__PURE__*/React.createElement(React.Fragment, null)
          }
        }]
      };
    }),
    fieldStyle: {
      marginRight: 0
    },
    onSubmit: onSubmit,
    defaultValues: defaultValues,
    onFormValueChange: onFormValueChange
  });
};

const EditApplication = () => {
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    t
  } = useTranslation();
  let {
    id: applicationNumber
  } = useParams();
  const {
    isLoading,
    data: applicationDetails
  } = Digit.Hooks.pt.useApplicationDetail(t, tenantId, applicationNumber);
  return applicationDetails && !isLoading ? /*#__PURE__*/React.createElement(EditForm, {
    applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
    tenantId: tenantId
  }) : null;
};

const GetMessage = (type, action, isSuccess, isEmployee, t) => {
  return t(`${isEmployee ? "E" : "C"}S_PT_RESPONSE_${action ? action : "CREATE"}_${type}${isSuccess ? "" : "_ERROR"}`);
};
const GetActionMessage$1 = (action, isSuccess, isEmployee, t) => {
  return GetMessage("ACTION", action, isSuccess, isEmployee, t);
};
const GetLabel = (action, isSuccess, isEmployee, t) => {
  return GetMessage("LABEL", action, isSuccess, isEmployee, t);
};
const DisplayText = (action, isSuccess, isEmployee, t) => {
  return GetMessage("DISPLAY", action, isSuccess, isEmployee, t);
};
const BannerPicker$1 = props => {
  var _props$data, _props$data$Propertie, _props$data$Propertie2, _props$data2, _props$data2$Properti, _props$data2$Properti2, _props$data3, _props$data3$Properti, _props$data3$Properti2;
  return /*#__PURE__*/React.createElement(Banner, {
    message: GetActionMessage$1((props === null || props === void 0 ? void 0 : (_props$data = props.data) === null || _props$data === void 0 ? void 0 : (_props$data$Propertie = _props$data.Properties) === null || _props$data$Propertie === void 0 ? void 0 : (_props$data$Propertie2 = _props$data$Propertie[0]) === null || _props$data$Propertie2 === void 0 ? void 0 : _props$data$Propertie2.applicationStatus) || props.action, props.isSuccess, props.isEmployee, props.t),
    applicationNumber: props === null || props === void 0 ? void 0 : (_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : (_props$data2$Properti = _props$data2.Properties) === null || _props$data2$Properti === void 0 ? void 0 : (_props$data2$Properti2 = _props$data2$Properti[0]) === null || _props$data2$Properti2 === void 0 ? void 0 : _props$data2$Properti2.acknowldgementNumber,
    info: GetLabel(((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : (_props$data3$Properti = _props$data3.Properties) === null || _props$data3$Properti === void 0 ? void 0 : (_props$data3$Properti2 = _props$data3$Properti[0]) === null || _props$data3$Properti2 === void 0 ? void 0 : _props$data3$Properti2.applicationStatus) || props.action, props.isSuccess, props.isEmployee, props.t),
    successful: props.isSuccess
  });
};
const Response = props => {
  const {
    t
  } = useTranslation();
  const queryClient = useQueryClient();
  const history = useHistory();
  const [error, setError] = useState(null);
  const [showToast, setShowToast] = useState(null);
  const [enableAudit, setEnableAudit] = useState(false);
  const [mutationHappened, setMutationHappened, clear] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_HAPPENED", false);
  const [successData, setsuccessData, clearSuccessData] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_SUCCESS_DATA", false);
  const closeToast = () => {
    setShowToast(null);
    setError(null);
  };
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    state
  } = props.location;
  const mutation = Digit.Hooks.pt.usePropertyAPI(tenantId, state.key !== "UPDATE");
  const {
    data: storeData
  } = Digit.Hooks.useStore.getInitData();
  const {
    tenants
  } = storeData || {};
  const {
    isLoading: auditDataLoading,
    isError: isAuditError,
    data: auditData
  } = Digit.Hooks.pt.usePropertySearch({
    tenantId,
    filters: {
      propertyIds: state.Property.propertyId,
      audit: true
    }
  }, {
    enabled: enableAudit,
    select: data => {
      var _data$Properties;
      return (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : _data$Properties.filter(e => e.status === "ACTIVE");
    }
  });
  useEffect(() => {
    if (mutation.data && mutation.isSuccess) setsuccessData(mutation.data);
  }, [mutation.data]);
  useEffect(() => {
    const onSuccess = async successRes => {
      var _successRes$Propertie;
      setMutationHappened(true);
      queryClient.clear();
      if ((successRes === null || successRes === void 0 ? void 0 : (_successRes$Propertie = successRes.Properties[0]) === null || _successRes$Propertie === void 0 ? void 0 : _successRes$Propertie.creationReason) === "MUTATION") {
        setEnableAudit(true);
      }
    };
    const onError = (error, variables) => {
      var _error$response, _error$response$data, _error$response$data$;
      setShowToast({
        key: "error"
      });
      setError((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.Errors[0]) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || null);
    };
    if (!mutationHappened) {
      mutation.mutate({
        Property: state === null || state === void 0 ? void 0 : state.Property
      }, {
        onError,
        onSuccess
      });
    }
  }, []);
  const handleDownloadPdf = async () => {
    var _propertyDetails$Prop, _propertyDetails$Prop2, _propertyDetails$Prop3;
    const {
      Properties = []
    } = mutation.data || successData;
    const Property = Properties && Properties[0] || {};
    const tenantInfo = tenants.find(tenant => tenant.code === Property.tenantId);
    let tenantId = Property.tenantId || tenantId;
    const propertyDetails = await Digit.PTService.search({
      tenantId,
      filters: {
        propertyIds: Property === null || Property === void 0 ? void 0 : Property.propertyId,
        status: "INACTIVE"
      }
    });
    Property.transferorDetails = (propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$Prop = propertyDetails.Properties) === null || _propertyDetails$Prop === void 0 ? void 0 : _propertyDetails$Prop[0]) || [];
    Property.isTransferor = true;
    Property.transferorOwnershipCategory = propertyDetails === null || propertyDetails === void 0 ? void 0 : (_propertyDetails$Prop2 = propertyDetails.Properties) === null || _propertyDetails$Prop2 === void 0 ? void 0 : (_propertyDetails$Prop3 = _propertyDetails$Prop2[0]) === null || _propertyDetails$Prop3 === void 0 ? void 0 : _propertyDetails$Prop3.ownershipCategory;
    const data = await getPTAcknowledgementData({
      ...Property,
      auditData
    }, tenantInfo, t);
    Digit.Utils.pdf.generate(data);
  };
  if (mutation.isLoading || mutation.isIdle && !mutationHappened) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(BannerPicker$1, {
    t: t,
    data: (mutation === null || mutation === void 0 ? void 0 : mutation.data) || successData,
    action: state === null || state === void 0 ? void 0 : state.action,
    isSuccess: !Object.keys(successData || {}).length ? mutation === null || mutation === void 0 ? void 0 : mutation.isSuccess : true,
    isLoading: mutation.isIdle && !mutationHappened || (mutation === null || mutation === void 0 ? void 0 : mutation.isLoading),
    isEmployee: props.parentRoute.includes("employee")
  }), /*#__PURE__*/React.createElement(CardText, null, DisplayText(state.action, (mutation.isSuccess || !!successData) && !mutation.isError, props.parentRoute.includes("employee"), t)), (mutation.isSuccess || !!successData) && !mutation.isError && /*#__PURE__*/React.createElement(SubmitBar, {
    style: {
      overflow: "hidden"
    },
    label: t("PT_DOWNLOAD_ACK_FORM"),
    onSubmit: handleDownloadPdf
  })), showToast && /*#__PURE__*/React.createElement(Toast, {
    error: showToast.key === "error" ? true : false,
    label: error,
    onClose: closeToast
  }), /*#__PURE__*/React.createElement(ActionBar, null, /*#__PURE__*/React.createElement(Link, {
    to: `${props.parentRoute.includes("employee") ? "/digit-ui/employee" : "/digit-ui/citizen"}`
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

const MutationForm = ({
  applicationData,
  tenantId
}) => {
  const {
    t
  } = useTranslation();
  const [canSubmit, setSubmitValve] = useState(false);
  const {
    data: mutationDocs,
    isLoading
  } = Digit.Hooks.pt.useMDMS(Digit.ULBService.getStateId(), "PropertyTax", "MutationDocuments");
  const defaultValues = {
    originalData: applicationData
  };
  const [mutationHappened, setMutationHappened, clear] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_HAPPENED", false);
  const [successData, setsuccessData, clearSuccessData] = Digit.Hooks.useSessionStorage("EMPLOYEE_MUTATION_SUCCESS_DATA", {});
  useEffect(() => {
    setMutationHappened(false);
    clearSuccessData();
  }, []);
  const history = useHistory();
  const onFormValueChange = (setValue, formData, formState) => {
    var _formData$ownershipCa, _formData$ownershipCa2, _formData$ownershipCa3;
    setSubmitValve(!Object.keys(formState.errors).length);
    if (!Object.keys(formState.errors).length) {
      let {
        additionalDetails
      } = formData;
      let {
        documentDate,
        documentNumber,
        documentValue,
        isMutationInCourt,
        isPropertyUnderGovtPossession,
        marketValue,
        reasonForTransfer
      } = additionalDetails;
      setSubmitValve(!(!documentDate || !documentNumber || !documentValue || !isMutationInCourt || !isPropertyUnderGovtPossession || !marketValue || !reasonForTransfer));
    }
    if (formData !== null && formData !== void 0 && (_formData$ownershipCa = formData.ownershipCategory) !== null && _formData$ownershipCa !== void 0 && (_formData$ownershipCa2 = _formData$ownershipCa.code) !== null && _formData$ownershipCa2 !== void 0 && (_formData$ownershipCa3 = _formData$ownershipCa2.includes) !== null && _formData$ownershipCa3 !== void 0 && _formData$ownershipCa3.call(_formData$ownershipCa2, "MULTIPLE")) {
      var _formData$owners;
      if ((formData === null || formData === void 0 ? void 0 : (_formData$owners = formData.owners) === null || _formData$owners === void 0 ? void 0 : _formData$owners.length) < 2) setSubmitValve(false);
    }
  };
  const onSubmit = data => {
    var _data$originalData, _data$originalData$ow, _data$originalData2, _data$originalData2$d, _data$originalData3, _data$originalData3$o, _additionalDetails$is, _data$documents2;
    data.originalData.owners = (_data$originalData = data.originalData) === null || _data$originalData === void 0 ? void 0 : (_data$originalData$ow = _data$originalData.owners) === null || _data$originalData$ow === void 0 ? void 0 : _data$originalData$ow.filter(owner => owner.status == "ACTIVE");
    let {
      additionalDetails
    } = data;
    let prevDocs = (data === null || data === void 0 ? void 0 : (_data$originalData2 = data.originalData) === null || _data$originalData2 === void 0 ? void 0 : (_data$originalData2$d = _data$originalData2.documents) === null || _data$originalData2$d === void 0 ? void 0 : _data$originalData2$d.filter(oldDoc => {
      var _mutationDocs$Propert;
      return !(mutationDocs !== null && mutationDocs !== void 0 && (_mutationDocs$Propert = mutationDocs.PropertyTax) !== null && _mutationDocs$Propert !== void 0 && _mutationDocs$Propert.MutationDocuments.some(mut => oldDoc.documentType.includes(mut.code)));
    })) || [];
    const submitData = {
      Property: {
        ...data.originalData,
        creationReason: "MUTATION",
        owners: [...((_data$originalData3 = data.originalData) === null || _data$originalData3 === void 0 ? void 0 : (_data$originalData3$o = _data$originalData3.owners) === null || _data$originalData3$o === void 0 ? void 0 : _data$originalData3$o.map(e => ({
          ...e,
          landlineNumber: data.owners[0].altContactNumber,
          altContactNumber: data.owners[0].altContactNumber,
          status: "INACTIVE"
        }))), ...data.owners.map(owner => {
          var _data$documents, _data$documents$docum, _owner$institution, _owner$institution$ty;
          let obj = {};
          let gender = owner.gender.code;
          let ownerType = owner.ownerType.code;
          let relationship = owner.relationship.code;
          obj.documents = [data === null || data === void 0 ? void 0 : (_data$documents = data.documents) === null || _data$documents === void 0 ? void 0 : (_data$documents$docum = _data$documents.documents) === null || _data$documents$docum === void 0 ? void 0 : _data$documents$docum.find(e => {
            var _e$documentType;
            return (_e$documentType = e.documentType) === null || _e$documentType === void 0 ? void 0 : _e$documentType.includes("OWNER.IDENTITYPROOF");
          })];
          if (owner.documents) {
            let {
              documentUid,
              documentType
            } = owner.documents;
            obj.documents = [...obj.documents, {
              documentUid,
              documentType: documentType.code,
              fileStoreId: documentUid
            }];
          }
          return {
            ...owner,
            gender,
            ownerType,
            relationship,
            inistitutetype: owner === null || owner === void 0 ? void 0 : (_owner$institution = owner.institution) === null || _owner$institution === void 0 ? void 0 : (_owner$institution$ty = _owner$institution.type) === null || _owner$institution$ty === void 0 ? void 0 : _owner$institution$ty.code,
            landlineNumber: owner === null || owner === void 0 ? void 0 : owner.altContactNumber,
            ...obj,
            status: "ACTIVE"
          };
        })],
        additionalDetails: {
          ...additionalDetails,
          isMutationInCourt: (_additionalDetails$is = additionalDetails.isMutationInCourt) === null || _additionalDetails$is === void 0 ? void 0 : _additionalDetails$is.code,
          reasonForTransfer: additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.reasonForTransfer.code,
          isPropertyUnderGovtPossession: additionalDetails.isPropertyUnderGovtPossession.code,
          documentDate: new Date(additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.documentDate).getTime(),
          marketValue: Number(additionalDetails === null || additionalDetails === void 0 ? void 0 : additionalDetails.marketValue)
        },
        ownershipCategory: data.ownershipCategory.code,
        documents: [...prevDocs, ...(data === null || data === void 0 ? void 0 : (_data$documents2 = data.documents) === null || _data$documents2 === void 0 ? void 0 : _data$documents2.documents.map(e => e.documentType.includes("OWNER.TRANSFERREASONDOCUMENT") ? {
          ...e,
          documentType: e.documentType.split(".")[2]
        } : e))],
        workflow: {
          action: "OPEN",
          businessService: "PT.MUTATION",
          moduleName: "PT",
          tenantId: data.originalData.tenantId
        }
      }
    };
    if (!submitData.Property.ownershipCategory.includes("INDIVIDUAL")) {
      submitData.Property.institution = {
        nameOfAuthorizedPerson: data.owners[0].name,
        name: data.owners[0].institution.name,
        designation: data.owners[0].designation,
        tenantId: data.originalData.tenantId,
        type: data.owners[0].institution.type.code
      };
    }
    history.replace("/digit-ui/employee/pt/response", {
      Property: submitData.Property,
      key: "UPDATE",
      action: "SUBMIT"
    });
  };
  const configs = newConfigMutate;
  return /*#__PURE__*/React.createElement(FormComposer, {
    heading: t("ES_TITLE_MUTATE_PROPERTY"),
    isDisabled: !canSubmit,
    label: t("ES_COMMON_APPLICATION_SUBMIT"),
    config: configs.map(config => {
      return {
        ...config,
        body: [...config.body.filter(a => !a.hideInEmployee), {
          withoutLabel: true,
          type: "custom",
          populators: {
            name: "originalData",
            component: (props, customProps) => /*#__PURE__*/React.createElement(React.Fragment, null)
          }
        }]
      };
    }),
    fieldStyle: {
      marginRight: 0
    },
    onSubmit: onSubmit,
    defaultValues: defaultValues,
    onFormValueChange: onFormValueChange
  });
};

const MutateProperty = () => {
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const {
    t
  } = useTranslation();
  let {
    id: applicationNumber
  } = useParams();
  const {
    isLoading,
    data: applicationDetails
  } = Digit.Hooks.pt.useApplicationDetail(t, tenantId, applicationNumber);
  return applicationDetails && !isLoading ? /*#__PURE__*/React.createElement(MutationForm, {
    applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
    tenantId: tenantId
  }) : null;
};

const RequiredDoc = () => {
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const {
    id
  } = useParams();
  const [docs, setDocs] = useState([]);
  const {
    isLoading,
    data: Documentsob
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", ["MutationDocuments"]);
  const OnSubmit = () => {
    history.push(`/digit-ui/employee/pt/property-mutate/${id}`);
  };
  useEffect(() => {
    var _Documentsob$Property;
    if (Documentsob) setDocs(Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property.MutationDocuments);
  }, [Documentsob]);
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, t("PT_REQIURED_DOC_TRANSFER_OWNERSHIP")), /*#__PURE__*/React.createElement(Card, null, docs.map((doc, index) => {
    const splitValues = doc.code.split(".");
    const dd = doc.dropdownData;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, /*#__PURE__*/React.createElement(CardSectionHeader, {
      style: {
        marginTop: "38px",
        marginBottom: "16px"
      }
    }, t(`${splitValues[0]}.${splitValues[1]}`)), dd.map((e, ind) => {
      return /*#__PURE__*/React.createElement(React.Fragment, {
        key: ind
      }, /*#__PURE__*/React.createElement(CardLabel, {
        style: {
          fontWeight: 700
        }
      }, ind + 1 + ". " + t(e.code)));
    }), /*#__PURE__*/React.createElement(CardText, {
      className: "docsDescription"
    }, t(`${splitValues[0]}.${splitValues[1]}.${splitValues[1]}_DESCRIPTION`)));
  })), /*#__PURE__*/React.createElement(ActionBar, null, /*#__PURE__*/React.createElement(SubmitBar, {
    style: {
      display: "block",
      marginLeft: "auto"
    },
    label: t("PT_TRANSFER_OWNERSHIP"),
    onSubmit: OnSubmit
  })));
};

function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);
  useEffect(() => {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      const timer = setInterval(tick, delay);
      return () => clearInterval(timer);
    }
  }, [delay]);
}

const SelectOtp = ({
  config,
  otp,
  onOtpChange,
  onResend,
  onSelect,
  t,
  error,
  userType: _userType = "citizen",
  canSubmit
}) => {
  const [timeLeft, setTimeLeft] = useState(30);
  useInterval(() => {
    setTimeLeft(timeLeft - 1);
  }, timeLeft > 0 ? 1000 : null);
  const handleResendOtp = () => {
    onResend();
    setTimeLeft(2);
  };
  if (_userType === "employee") {
    return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(OTPInput, {
      length: 6,
      onChange: onOtpChange,
      value: otp
    }), timeLeft > 0 ? /*#__PURE__*/React.createElement(CardText, null, `${t("CS_RESEND_ANOTHER_OTP")} ${timeLeft} ${t("CS_RESEND_SECONDS")}`) : /*#__PURE__*/React.createElement("p", {
      className: "card-text-button",
      onClick: handleResendOtp
    }, t("CS_RESEND_OTP")), !error && /*#__PURE__*/React.createElement(CardLabelError, null, t("CS_INVALID_OTP")));
  }
  return /*#__PURE__*/React.createElement(FormStep, {
    onSelect: onSelect,
    config: config,
    t: t,
    isDisabled: !((otp === null || otp === void 0 ? void 0 : otp.length) === 6 && canSubmit)
  }, /*#__PURE__*/React.createElement(OTPInput, {
    length: 6,
    onChange: onOtpChange,
    value: otp
  }), timeLeft > 0 ? /*#__PURE__*/React.createElement(CardText, null, `${t("CS_RESEND_ANOTHER_OTP")} ${timeLeft} ${t("CS_RESEND_SECONDS")}`) : /*#__PURE__*/React.createElement("p", {
    className: "card-text-button",
    onClick: handleResendOtp
  }, t("CS_RESEND_OTP")), !error && /*#__PURE__*/React.createElement(CardLabelError, null, t("CS_INVALID_OTP")));
};

const CitizenFeedback = ({
  popup: _popup = false,
  onClose,
  setShowToast,
  data
}) => {
  var _data$Properties8, _data$Properties8$, _data$Properties9, _data$Properties9$;
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const user = Digit.UserService.getUser();
  let {
    redirectedFrom,
    propertyId,
    acknowldgementNumber,
    creationReason,
    tenantId,
    locality
  } = Digit.Hooks.useQueryParams();
  const isMobile = window.Digit.Utils.browser.isMobile();
  tenantId = tenantId || Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  const {
    data: RatingAndFeedBack,
    isLoading: RatingAndFeedBackLoading
  } = Digit.Hooks.pt.useRatingAndFeedbackMDMS.RatingAndFeedBack(stateId);
  const [comment, setComment] = useState("");
  const [rating, setRating] = useState(0);
  if (RatingAndFeedBackLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const onComments = e => {
    setComment(e.target.value);
  };
  const feedback = (e, ref, index) => {
    setRating(index);
  };
  const onSubmit = () => {
    var _data$Properties, _data$Properties$, _data$Properties2, _data$Properties2$;
    let formData = {};
    let ServiceDefinitionCriteria = {
      "tenantId": (data === null || data === void 0 ? void 0 : (_data$Properties = data.Properties) === null || _data$Properties === void 0 ? void 0 : (_data$Properties$ = _data$Properties[0]) === null || _data$Properties$ === void 0 ? void 0 : _data$Properties$.tenantId) || tenantId,
      "code": [`PT_${redirectedFrom !== null && redirectedFrom !== void 0 && redirectedFrom.includes("payment") ? "PAYMENT" : creationReason || (data === null || data === void 0 ? void 0 : (_data$Properties2 = data.Properties) === null || _data$Properties2 === void 0 ? void 0 : (_data$Properties2$ = _data$Properties2[0]) === null || _data$Properties2$ === void 0 ? void 0 : _data$Properties2$.creationReason)}`],
      "module": ["PT"]
    };
    Digit.PTService.cfdefinitionsearch({
      filters: {
        ServiceDefinitionCriteria
      }
    }).then((result1, err) => {
      var _result1$ServiceDefin;
      if ((result1 === null || result1 === void 0 ? void 0 : (_result1$ServiceDefin = result1.ServiceDefinition) === null || _result1$ServiceDefin === void 0 ? void 0 : _result1$ServiceDefin.length) > 0) {
        var _data$Properties3, _data$Properties3$, _result1$ServiceDefin2, _result1$ServiceDefin3, _data$Properties4, _data$Properties4$, _data$Properties5, _data$Properties5$, _data$Properties5$$ad, _data$Properties5$$ad2, _user$info, _data$Properties6, _data$Properties6$;
        formData = {
          "tenantId": (data === null || data === void 0 ? void 0 : (_data$Properties3 = data.Properties) === null || _data$Properties3 === void 0 ? void 0 : (_data$Properties3$ = _data$Properties3[0]) === null || _data$Properties3$ === void 0 ? void 0 : _data$Properties3$.tenantId) || tenantId,
          "serviceDefId": result1 === null || result1 === void 0 ? void 0 : (_result1$ServiceDefin2 = result1.ServiceDefinition) === null || _result1$ServiceDefin2 === void 0 ? void 0 : (_result1$ServiceDefin3 = _result1$ServiceDefin2[0]) === null || _result1$ServiceDefin3 === void 0 ? void 0 : _result1$ServiceDefin3.id,
          "isActive": true,
          "attributes": [{
            "attributeCode": "consumerCode",
            "value": propertyId || (data === null || data === void 0 ? void 0 : (_data$Properties4 = data.Properties) === null || _data$Properties4 === void 0 ? void 0 : (_data$Properties4$ = _data$Properties4[0]) === null || _data$Properties4$ === void 0 ? void 0 : _data$Properties4$.propertyId),
            "additionalDetails": {}
          }, {
            "attributeCode": "rating",
            "value": rating,
            "additionalDetails": {}
          }, {
            "attributeCode": "comments",
            "value": comment,
            "additionalDetails": {}
          }, {
            "attributeCode": "channel",
            "value": "Online",
            "additionalDetails": {}
          }],
          "additionalDetails": {
            locality: locality || (data === null || data === void 0 ? void 0 : (_data$Properties5 = data.Properties) === null || _data$Properties5 === void 0 ? void 0 : (_data$Properties5$ = _data$Properties5[0]) === null || _data$Properties5$ === void 0 ? void 0 : (_data$Properties5$$ad = _data$Properties5$.address) === null || _data$Properties5$$ad === void 0 ? void 0 : (_data$Properties5$$ad2 = _data$Properties5$$ad.locality) === null || _data$Properties5$$ad2 === void 0 ? void 0 : _data$Properties5$$ad2.code) || ""
          },
          "accountId": user === null || user === void 0 ? void 0 : (_user$info = user.info) === null || _user$info === void 0 ? void 0 : _user$info.uuid
        };
        formData = {
          ...formData,
          referenceId: acknowldgementNumber || (data === null || data === void 0 ? void 0 : (_data$Properties6 = data.Properties) === null || _data$Properties6 === void 0 ? void 0 : (_data$Properties6$ = _data$Properties6[0]) === null || _data$Properties6$ === void 0 ? void 0 : _data$Properties6$.acknowldgementNumber)
        };
        Digit.PTService.cfcreate({
          Service: {
            ...formData
          }
        }, tenantId).then((result, err) => {
          var _result$Service;
          if ((result === null || result === void 0 ? void 0 : (_result$Service = result.Service) === null || _result$Service === void 0 ? void 0 : _result$Service.length) > 0) {
            if (_popup) {
              onClose(false);
              setShowToast({
                key: false,
                label: "PT_FEEDBACK_SUBMITTED_SUCCESSFULLY"
              });
            } else history.push({
              pathname: "/digit-ui/citizen/feedback-acknowledgement",
              state: {
                rating,
                comment,
                result
              }
            });
          }
        }).catch(e => {
          var _e$response, _e$response$data, _e$response$data$Erro;
          setShowToast({
            key: "error",
            label: `${e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : (_e$response$data$Erro = _e$response$data.Errors[0]) === null || _e$response$data$Erro === void 0 ? void 0 : _e$response$data$Erro.message}`
          });
        });
      }
    });
  };
  const getCardHeaderAndText = type => {
    var _RatingAndFeedBack$en, _RatingAndFeedBack$en2;
    let tempObject = RatingAndFeedBack === null || RatingAndFeedBack === void 0 ? void 0 : (_RatingAndFeedBack$en = RatingAndFeedBack.enabledScreensList) === null || _RatingAndFeedBack$en === void 0 ? void 0 : (_RatingAndFeedBack$en2 = _RatingAndFeedBack$en.filter(ob => {
      var _ob$bussinessService, _data$Properties7, _data$Properties7$;
      return (ob === null || ob === void 0 ? void 0 : ob.module) === "PT" && ((redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom.includes(ob === null || ob === void 0 ? void 0 : ob.screenfrom)) || (ob === null || ob === void 0 ? void 0 : (_ob$bussinessService = ob.bussinessService) === null || _ob$bussinessService === void 0 ? void 0 : _ob$bussinessService.includes(data === null || data === void 0 ? void 0 : (_data$Properties7 = data.Properties) === null || _data$Properties7 === void 0 ? void 0 : (_data$Properties7$ = _data$Properties7[0]) === null || _data$Properties7$ === void 0 ? void 0 : _data$Properties7$.creationReason)));
    })) === null || _RatingAndFeedBack$en2 === void 0 ? void 0 : _RatingAndFeedBack$en2[0];
    if (type === "Header") return tempObject === null || tempObject === void 0 ? void 0 : tempObject.cardHeader;else if (type === "Text") {
      return tempObject === null || tempObject === void 0 ? void 0 : tempObject.cardText;
    }
  };
  const getCommentHeader = () => {
    var _RatingAndFeedBack$he, _RatingAndFeedBack$he2, _RatingAndFeedBack$he3;
    return (RatingAndFeedBack === null || RatingAndFeedBack === void 0 ? void 0 : (_RatingAndFeedBack$he = RatingAndFeedBack.headerByRating) === null || _RatingAndFeedBack$he === void 0 ? void 0 : (_RatingAndFeedBack$he2 = _RatingAndFeedBack$he.filter(ob => rating >= (ob === null || ob === void 0 ? void 0 : ob.minvalue) && rating <= (ob === null || ob === void 0 ? void 0 : ob.maxvalue))) === null || _RatingAndFeedBack$he2 === void 0 ? void 0 : (_RatingAndFeedBack$he3 = _RatingAndFeedBack$he2[0]) === null || _RatingAndFeedBack$he3 === void 0 ? void 0 : _RatingAndFeedBack$he3.code) || t("CS_WHAT_WENT_WRONG");
  };
  const getCommentCheck = () => {
    if (comment && (comment === null || comment === void 0 ? void 0 : comment.length) < 64) return true;else if (rating) return false;else return true;
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement("div", {
    style: _popup ? {
      display: "flex",
      justifyContent: "space-between"
    } : {}
  }, /*#__PURE__*/React.createElement(CardHeader, null, t(getCardHeaderAndText("Header")) || t(`PT_RATE_HELP_TEXT`)), _popup && /*#__PURE__*/React.createElement("span", {
    style: {
      marginTop: "8px"
    },
    onClick: () => onClose(false)
  }, /*#__PURE__*/React.createElement(CloseSvg, null))), /*#__PURE__*/React.createElement(CardText, null, t(getCardHeaderAndText("Text"), {
    acknowldgementNumber: acknowldgementNumber || (data === null || data === void 0 ? void 0 : (_data$Properties8 = data.Properties) === null || _data$Properties8 === void 0 ? void 0 : (_data$Properties8$ = _data$Properties8[0]) === null || _data$Properties8$ === void 0 ? void 0 : _data$Properties8$.acknowldgementNumber),
    propertyId: propertyId || (data === null || data === void 0 ? void 0 : (_data$Properties9 = data.Properties) === null || _data$Properties9 === void 0 ? void 0 : (_data$Properties9$ = _data$Properties9[0]) === null || _data$Properties9$ === void 0 ? void 0 : _data$Properties9$.propertyId)
  }) || t(`PT_RATE_TEXT`)), /*#__PURE__*/React.createElement(Rating, {
    styles: {
      justifyContent: "center"
    },
    currentRating: rating,
    maxRating: 5,
    onFeedback: (e, ref, i) => feedback(e, ref, i)
  }), rating !== 0 && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardLabel, null, t(getCommentHeader())), /*#__PURE__*/React.createElement(TextArea, {
    name: "",
    minLength: "64",
    onChange: onComments
  }), comment && (comment === null || comment === void 0 ? void 0 : comment.length) < 64 && /*#__PURE__*/React.createElement(CardLabelError, {
    style: {
      marginTop: "-20px",
      marginBottom: "25px"
    }
  }, t("CS_MIN_LENGTH_64"))), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t(`${"PT"}_SUBMIT`),
    onSubmit: onSubmit,
    disabled: getCommentCheck()
  }), !_popup && /*#__PURE__*/React.createElement("div", {
    className: "link",
    style: isMobile ? {
      marginTop: "8px",
      width: "100%",
      textAlign: "center"
    } : {
      marginTop: "8px"
    }
  }, /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen`
  }, t("CS_GO_BACK_HOME"))))));
};

const GetActionMessage$2 = props => {
  const {
    t
  } = useTranslation();
  if (props !== null && props !== void 0 && props.isSuccess) {
    return t("CS_PROPERTY_FEEDBACK_SUCCESS");
  } else {
    return t("CS_PROPERTY_FEEDBACK_FAILED");
  }
};
const BannerPicker$2 = props => {
  return /*#__PURE__*/React.createElement(Banner, {
    message: GetActionMessage$2(props),
    applicationNumber: "",
    style: props.isMobile ? {
      width: "unset"
    } : {
      width: "740px"
    },
    successful: props === null || props === void 0 ? void 0 : props.isSuccess
  });
};
const AcknowledgementCF = ({
  data,
  onSuccess
}) => {
  var _location$state, _location$state$resul, _location$state$resul2, _location$state2, _location$state2$resu, _location$state2$resu2, _location$state3, _location$state3$resu, _location$state3$resu2;
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const location = useLocation();
  const {
    data: storeData
  } = Digit.Hooks.useStore.getInitData();
  const isMobile = window.Digit.Utils.browser.isMobile();
  return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement(Card, {
    style: isMobile ? {
      padding: "unset"
    } : {}
  }, /*#__PURE__*/React.createElement(BannerPicker$2, {
    t: t,
    data: location.state,
    isSuccess: (_location$state = location.state) !== null && _location$state !== void 0 && (_location$state$resul = _location$state.result) !== null && _location$state$resul !== void 0 && (_location$state$resul2 = _location$state$resul.Service) !== null && _location$state$resul2 !== void 0 && _location$state$resul2[0] ? true : false,
    isMobile: isMobile,
    isLoading: false
  }), ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : (_location$state2$resu = _location$state2.result) === null || _location$state2$resu === void 0 ? void 0 : (_location$state2$resu2 = _location$state2$resu.Service) === null || _location$state2$resu2 === void 0 ? void 0 : _location$state2$resu2[0]) && /*#__PURE__*/React.createElement(CardText, {
    style: {
      padding: "0px 10px 0px 10px"
    }
  }, t("CS_CF_FEEDBACK_RESPONSE")), !((_location$state3 = location.state) !== null && _location$state3 !== void 0 && (_location$state3$resu = _location$state3.result) !== null && _location$state3$resu !== void 0 && (_location$state3$resu2 = _location$state3$resu.Service) !== null && _location$state3$resu2 !== void 0 && _location$state3$resu2[0]) && /*#__PURE__*/React.createElement(CardText, null, t("CS_FILE_PROPERTY_FAILED_RESPONSE")), /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "0px 10px 20px 10px"
    }
  }, /*#__PURE__*/React.createElement(Link, {
    to: `/digit-ui/citizen`
  }, /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("CS_COMMON_GO_BACK_TO_HOME")
  })))));
};

const PTSelectLandmark = ({
  t,
  config,
  onSelect,
  formData,
  userType
}) => {
  var _formData$address2;
  const [landmark, setLandmark] = useState();
  const [error, setError] = useState("");
  const inputs = [{
    label: "ES_NEW_APPLICATION_LOCATION_LANDMARK",
    type: "textarea",
    name: "landmark",
    validation: {
      maxLength: 1024
    }
  }];
  useEffect(() => {
    var _formData$address;
    setLandmark(formData === null || formData === void 0 ? void 0 : (_formData$address = formData.address) === null || _formData$address === void 0 ? void 0 : _formData$address.landmark);
  }, [formData === null || formData === void 0 ? void 0 : (_formData$address2 = formData.address) === null || _formData$address2 === void 0 ? void 0 : _formData$address2.landmark]);
  function onChange(e) {
    if (e.target.value.length > 1024) {
      setError("CS_COMMON_LANDMARK_MAX_LENGTH");
    } else {
      setError(null);
      setLandmark(e.target.value);
      if (userType === "employee") {
        onSelect(config.key, {
          ...formData[config.key],
          landmark: e.target.value
        });
      }
    }
  }
  if (userType === "employee") {
    return inputs === null || inputs === void 0 ? void 0 : inputs.map((input, index) => {
      return /*#__PURE__*/React.createElement(LabelFieldPair, {
        key: index
      }, /*#__PURE__*/React.createElement(CardLabel, {
        className: "card-label-smaller"
      }, t(input.label), config.isMandatory ? " * " : null), /*#__PURE__*/React.createElement(TextArea, Object.assign({
        className: "form-field",
        id: input.name,
        value: landmark,
        onChange: onChange,
        name: input.name || ""
      }, input.validation)));
    });
  }
  const onSkip = () => onSelect();
  return /*#__PURE__*/React.createElement(React.Fragment, null, window.location.href.includes("/citizen") ? /*#__PURE__*/React.createElement(Timeline$1, {
    currentStep: 1
  }) : null, /*#__PURE__*/React.createElement(FormStep, {
    config: {
      ...config,
      inputs
    },
    value: landmark,
    onChange: onChange,
    onSelect: data => onSelect(config.key, {
      ...formData[config.key],
      ...data
    }),
    onSkip: onSkip,
    t: t,
    forcedError: t(error)
  }));
};

const componentsToRegister = {
  PTLandArea: Area$1,
  PTCheckPage: CheckPage,
  PTAcknowledgement,
  PropertyTax,
  PTSelectPincode,
  PTSelectAddress,
  PTSelectStreet,
  Proof,
  SelectOwnerShipDetails,
  SelectOwnerDetails,
  SelectSpecialOwnerCategoryType,
  SelectOwnerAddress,
  SelectInistitutionOwnerDetails,
  SelectProofIdentity,
  SelectSpecialProofIdentity,
  PTSelectGeolocation,
  PTWFApplicationTimeline,
  PTWFCaption,
  PTWFReason,
  IsThisFloorSelfOccupied,
  ProvideSubUsageType,
  RentalDetails,
  ProvideSubUsageTypeOfRentedArea,
  IsAnyPartOfThisFloorUnOccupied,
  UnOccupiedArea,
  Area,
  IsResidential,
  PropertyType,
  PropertyUsageType,
  GroundFloorDetails,
  PropertyFloorDetails: PropertyFloorsDetails,
  PropertyBasementDetails: PropertyBasementsDetails,
  PropertyInformation,
  ProvideFloorNo,
  PropertyOwnerHistory: propertyOwnerHistory,
  TransferDetails: propertyOwnerHistory,
  Units,
  SelectAltContactNumber,
  SelectDocuments,
  PTEmployeeOwnershipDetails,
  SearchPropertyCitizen: SearchProperty,
  SearchResultCitizen: CitizenSearchResults,
  TransfererDetails: TransfererDetails$1,
  OwnerMutate: OwnerCitizen,
  PTComments: Comments,
  IsMutationPending,
  PropertyMarketValue,
  PTReasonForTransfer: ReasonForTransfer,
  PTRegistrationDocument: RegistrationDocument,
  UnderStateAquire: PTPropertyUnderStateAquire,
  TransferProof,
  UpdateNumber,
  EmployeeUpdateOwnerNumber: UpdateNumber$1,
  PropertySearchForm: SearchPTID,
  PropertySearchResults: SearchPTID$1,
  PTMyPayments,
  SelectPTUnits,
  PTNewApplication: NewApplication,
  ApplicationDetails: ApplicationDetails$2,
  PTPropertyDetails: PropertyDetails,
  PTAssessmentDetails: AssessmentDetails,
  PTEditApplication: EditApplication,
  PTResponse: Response,
  PTTransferOwnership: MutateProperty,
  PTDocsRequired: RequiredDoc,
  PTCreateProperty: CreateProperty,
  PTMyApplications: PTMyApplications,
  PTMyProperties: MyProperties,
  PTApplicationDetails: PTApplicationDetails,
  PTSearchPropertyComponent: SearchProperty$1,
  PTSearchResultsComponent: CitizenSearchResults,
  PTEditProperty: EditProperty,
  PTMutateProperty: MutationCitizen,
  SelectOtp,
  AcknowledgementCF,
  CitizenFeedback,
  PTSelectLandmark
};
const addComponentsToRegistry = () => {
  Object.entries(componentsToRegister).forEach(([key, value]) => {
    Digit.ComponentRegistryService.setComponent(key, value);
  });
};
const PTModule = ({
  stateCode,
  userType,
  tenants
}) => {
  const {
    path,
    url
  } = useRouteMatch();
  const moduleCode = "PT";
  const language = Digit.StoreData.getCurrentLanguage();
  const {
    isLoading,
    data: store
  } = Digit.Services.useStore({
    stateCode,
    moduleCode,
    language
  });
  addComponentsToRegistry();
  Digit.SessionStorage.set("PT_TENANTS", tenants);
  useEffect(() => userType === "employee" && Digit.LocalizationService.getLocale({
    modules: [`rainmaker-${Digit.ULBService.getCurrentTenantId()}`],
    locale: Digit.StoreData.getCurrentLanguage(),
    tenantId: Digit.ULBService.getCurrentTenantId()
  }), []);
  if (userType === "employee") {
    return /*#__PURE__*/React.createElement(EmployeeApp, {
      path: path,
      url: url,
      userType: userType
    });
  } else return /*#__PURE__*/React.createElement(App, null);
};
const PTLinks = ({
  matchPath,
  userType
}) => {
  const {
    t
  } = useTranslation();
  const [params, setParams, clearParams] = Digit.Hooks.useSessionStorage("PT_CREATE_PROPERTY", {});
  useEffect(() => {
    clearParams();
  }, []);
  const links = [{
    link: `${matchPath}/property/citizen-search`,
    i18nKey: t("PT_SEARCH_AND_PAY")
  }, {
    link: `/digit-ui/citizen/payment/my-bills/PT`,
    i18nKey: t("CS_TITLE_MY_BILLS")
  }, {
    link: `${matchPath}/property/my-payments`,
    i18nKey: t("PT_MY_PAYMENTS_HEADER")
  }, {
    link: `${matchPath}/property/new-application`,
    i18nKey: t("PT_CREATE_PROPERTY")
  }, {
    link: `${matchPath}/property/my-properties`,
    i18nKey: t("PT_MY_PROPERTIES")
  }, {
    link: `${matchPath}/property/my-applications`,
    i18nKey: t("PT_MY_APPLICATION")
  }, {
    link: `${matchPath}/property/property-mutation`,
    i18nKey: t("PT_PROPERTY_MUTATION")
  }, {
    link: `${matchPath}/howItWorks`,
    i18nKey: t("PT_HOW_IT_WORKS")
  }, {
    link: `${matchPath}/faqs`,
    i18nKey: t("PT_FAQ_S")
  }];
  return /*#__PURE__*/React.createElement(CitizenHomeCard, {
    header: t("ACTION_TEST_PROPERTY_TAX"),
    links: links,
    Icon: () => /*#__PURE__*/React.createElement(PTIcon, {
      className: "fill-path-primary-main"
    })
  });
};
const PTComponents = {
  PTCard,
  PTModule,
  PTLinks,
  PT_INBOX_FILTER: props => /*#__PURE__*/React.createElement(Filter, props),
  PTEmptyResultInbox: EmptyResultInbox,
  PTInboxTableConfig: TableConfig
};

export { PTComponents, PTLinks, PTModule };
//# sourceMappingURL=index.modern.js.map
